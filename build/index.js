/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/api/changeRequest/Mutations/addChangeRequest.ts":
/*!*************************************************************!*\
  !*** ./src/api/changeRequest/Mutations/addChangeRequest.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addChangeRequest": () => (/* binding */ addChangeRequest)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/enumerations/ChangeRequestEnums */ "./src/domain/enumerations/ChangeRequestEnums.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");




const addChangeRequest = async (_root, args, _context) => {
    try {
        const customer = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_3__.authenticate)(_context, "CD");
        let createRequest;
        if (args.stage === _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_1__.requestStage.BOOKINGFORM) {
            if (customer.bookingformstatus === _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_1__.BookingFormStatusEnumNames.ACCEPTED) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "User has already accepted the booking form, Change Request cannot be initiated.");
            }
            createRequest = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_change_request.create({
                data: {
                    request_type: args.request_type,
                    description: args.description,
                    stage: args.stage,
                    created_at: new Date(),
                    customerid: customer.customerid,
                },
            });
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
                where: { customerid: customer.customerid },
                data: {
                    bookingformstatus: _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_1__.BookingFormStatusEnumNames.CHANGE_REQUESTED,
                },
            });
        }
        else if (_domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_1__.requestStage.PROJECTPROPOSAL === args.stage) {
            if (!args.quoteSfId) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "Sales force quote id is required");
            }
            const quoteData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({
                where: { sfid: args.quoteSfId },
            });
            if (quoteData.status === _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_1__.ProjectProposalEnums.ACCEPTED) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "User has already accepted the proposal, Change Request cannot be initiated.");
            }
            createRequest = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_change_request.create({
                data: {
                    request_type: args.request_type,
                    description: args.description,
                    stage: args.stage,
                    created_at: new Date(),
                    quotesfid: args.quoteSfId,
                    customerid: customer.customerid,
                },
            });
            const changeRequestList = quoteData.change_request_list__c
                ? JSON.parse(quoteData.change_request_list__c)
                : [];
            changeRequestList.push(createRequest.id);
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.update({
                where: { sfid: args.quoteSfId },
                data: {
                    status: _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_1__.ProjectProposalEnums.CHANGE_REQUESTED,
                    change_request_list__c: JSON.stringify(changeRequestList),
                },
            });
        }
        else if (_domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_1__.requestStage.DESIGNSIGNOFF === args.stage) {
            if (!args.projectId) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "project id is required");
            }
            const projectData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
                where: { id: args.projectId },
            });
            if (projectData.signoffstatus === _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_1__.ProjectProposalEnums.ACCEPTED) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "User has already accepted the design signoff document, Change Request cannot be initiated.");
            }
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                where: { id: args.projectId },
                data: {
                    signoffstatus: "change_requested",
                },
            });
            createRequest = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_change_request.create({
                data: {
                    request_type: args.request_type,
                    description: args.description,
                    stage: args.stage,
                    created_at: new Date(),
                    customerid: customer.customerid,
                    projectid: args.projectId,
                },
            });
        }
        return {
            code: createRequest ? 200 : 400,
            message: createRequest
                ? "Change request created successfully."
                : "Something went wrong.",
            data: createRequest ? createRequest : "",
        };
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(500, error.message);
    }
};


/***/ }),

/***/ "./src/api/changeRequest/Queries/getChangeRequest.ts":
/*!***********************************************************!*\
  !*** ./src/api/changeRequest/Queries/getChangeRequest.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getChangeRequest": () => (/* binding */ getChangeRequest)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/enumerations/ChangeRequestEnums */ "./src/domain/enumerations/ChangeRequestEnums.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_3__);




const getChangeRequest = async (_root, args, _context) => {
    try {
        const customer = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(_context, "CD");
        let changeRequest;
        if (args.stage === _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_2__.requestStage.BOOKINGFORM) {
            changeRequest = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_change_request.findMany({
                where: { customerid: customer.customerid },
            });
        }
        else if (args.stage === _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_2__.requestStage.PROJECTPROPOSAL) {
            if (!args.quotesfid) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Sales force quote id is required");
            }
            changeRequest = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_change_request.findMany({
                where: { quotesfid: args.quotesfid },
            });
        }
        return {
            code: changeRequest ? 200 : 400,
            message: changeRequest ? "success" : "Bad Request",
            data: changeRequest,
        };
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/changeRequest/resolvers.ts":
/*!********************************************!*\
  !*** ./src/api/changeRequest/resolvers.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "changeRequestResolver": () => (/* binding */ changeRequestResolver)
/* harmony export */ });
/* harmony import */ var _Mutations_addChangeRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mutations/addChangeRequest */ "./src/api/changeRequest/Mutations/addChangeRequest.ts");
/* harmony import */ var _Queries_getChangeRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/getChangeRequest */ "./src/api/changeRequest/Queries/getChangeRequest.ts");


const changeRequestResolver = {
    Mutation: {
        addChangeRequest: async (parent, _args, context) => (0,_Mutations_addChangeRequest__WEBPACK_IMPORTED_MODULE_0__.addChangeRequest)(parent, _args, context),
    },
    Query: {
        getChangeRequest: async (parent, _args, context) => (0,_Queries_getChangeRequest__WEBPACK_IMPORTED_MODULE_1__.getChangeRequest)(parent, _args, context),
    },
};


/***/ }),

/***/ "./src/api/changeRequest/typedefs.ts":
/*!*******************************************!*\
  !*** ./src/api/changeRequest/typedefs.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "changeRequestTypedefs": () => (/* binding */ changeRequestTypedefs)
/* harmony export */ });
const changeRequestTypedefs = `
type change_request{
    id: Int
    projectid: Int
    request_type: String
    description: String
    stage: String
    created_at: DateTime
    updated_at: DateTime
}

type addChangeRequestResponse{
    code: Int
    message: String,
    data: change_request
}

type getChangeRequestResponse{
    code: Int
    message: String,
    data: [change_request]
}

type Mutation{
    addChangeRequest(
        quoteSfId: String,
        request_type: String!,
        description: String!,
        stage: String!,
    ):addChangeRequestResponse
}

type Query{
    getChangeRequest(quotesfid:String, stage: String!):getChangeRequestResponse
}`;


/***/ }),

/***/ "./src/api/cities/mutations.ts":
/*!*************************************!*\
  !*** ./src/api/cities/mutations.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addCity": () => (/* binding */ addCity),
/* harmony export */   "updateCity": () => (/* binding */ updateCity)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../prismaConfig */ "./src/prismaConfig.ts");

const addCity = async (root, args, context) => {
    let cityResponseObj;
    const { name, status, odoo_id, cityhead, country } = args;
    try {
        const createdCity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.create({
            data: {
                name,
                status,
                odoo_id,
                created_at: new Date(),
                updated_at: new Date(),
                cityhead,
                country
            },
        });
        const cities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findMany({
            where: { id: createdCity.id },
            include: {
                users: true
            }
        });
        let City = await getcity(cities);
        City = City.Data;
        cityResponseObj = { code: 200, message: "success", data: City };
        return cityResponseObj;
    }
    catch (error) {
        cityResponseObj = { code: 400, message: error.message };
        return cityResponseObj;
    }
};
const updateCity = async (root, args, context) => {
    let cityResponseObj;
    const { name, cityid, status, odoo_id, cityhead, country } = args;
    try {
        const updatedCity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.update({
            data: {
                name,
                status,
                odoo_id,
                updated_at: new Date(),
                cityhead,
                country
            }, where: { id: cityid }
        });
        const cities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findMany({
            where: { id: updatedCity.id },
            include: {
                users: true
            }
        });
        let City = await getcity(cities);
        City = City.Data;
        cityResponseObj = { code: 200, message: "success", data: City };
        return cityResponseObj;
    }
    catch (error) {
        cityResponseObj = { code: 400, message: error.message };
        return cityResponseObj;
    }
};
const getcity = async (cities) => {
    return {
        Data: cities.map((city) => {
            return Object.assign(Object.assign({}, city), { cityhead: city.users });
        })
    };
};


/***/ }),

/***/ "./src/api/cities/queries.ts":
/*!***********************************!*\
  !*** ./src/api/cities/queries.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCities": () => (/* binding */ getCities),
/* harmony export */   "getCityById": () => (/* binding */ getCityById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../prismaConfig */ "./src/prismaConfig.ts");

const getCities = async () => {
    let cityResponseObj;
    try {
        const getcities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findMany({
            include: {
                users: true
            }
        });
        let cities = await getcity(getcities);
        cities = cities.Data;
        cityResponseObj = { code: 200, message: "success", data: cities };
        return cityResponseObj;
    }
    catch (error) {
        cityResponseObj = { code: 400, message: error.message };
        return cityResponseObj;
    }
};
const getCityById = async (root, args, context) => {
    let cityResponseObj;
    try {
        const getcities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findMany({
            where: { id: args.id },
            include: {
                users: true
            }
        });
        let City = await getcity(getcities);
        City = City.Data;
        cityResponseObj = { code: 200, message: "success", data: City };
        return cityResponseObj;
    }
    catch (error) {
        cityResponseObj = { code: 400, message: error.message };
        return cityResponseObj;
    }
};
const getcity = async (cities) => {
    return {
        Data: cities.map((city) => {
            return Object.assign(Object.assign({}, city), { cityhead: city.users });
        })
    };
};


/***/ }),

/***/ "./src/api/cities/resolver.ts":
/*!************************************!*\
  !*** ./src/api/cities/resolver.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "citiesResolver": () => (/* binding */ citiesResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./queries */ "./src/api/cities/queries.ts");
/* harmony import */ var _mutations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mutations */ "./src/api/cities/mutations.ts");



const citiesResolver = {
    Query: {
        allCities: async () => (0,_queries__WEBPACK_IMPORTED_MODULE_1__.getCities)(),
        getCityById: async (parent, _args, context) => (0,_queries__WEBPACK_IMPORTED_MODULE_1__.getCityById)(parent, _args, context),
    },
    Mutation: {
        addCity: async (parent, _args, context) => (0,_mutations__WEBPACK_IMPORTED_MODULE_2__.addCity)(parent, _args, context),
        updateCity: async (parent, _args, context) => (0,_mutations__WEBPACK_IMPORTED_MODULE_2__.updateCity)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver
};


/***/ }),

/***/ "./src/api/cities/typedef.ts":
/*!***********************************!*\
  !*** ./src/api/cities/typedef.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "citiesTypedef": () => (/* binding */ citiesTypedef)
/* harmony export */ });
const citiesTypedef = `
    type Cities {
        id: Int
        name:String
        status:Boolean
        odoo_id:String
        country:String
        cityhead: Users
        created_at:DateTime
        updated_at:DateTime
    }

    type Query {
        allCities: CityResponse
        getCityById(id:Int): CityResponse
    }

    type CityResponse { 
        code:Int
        message: String
        data:[Cities!]!
    }

    type Mutation{
        addCity(name:String,
            status:Boolean,
            odoo_id:String,
            created_at:DateTime,
            updated_at:DateTime,
            cityhead:Int,
            country:String): CityResponse

        updateCity(name:String,
            cityid:Int,
            status:Boolean,
            odoo_id:String,
            created_at:DateTime,
            updated_at:DateTime,
            cityhead:Int,
            country:String): CityResponse
    }
  
    scalar DateTime
`;


/***/ }),

/***/ "./src/api/customers/BookingForm/Mutations/acceptBookingForm.ts":
/*!**********************************************************************!*\
  !*** ./src/api/customers/BookingForm/Mutations/acceptBookingForm.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acceptBookingForm": () => (/* binding */ acceptBookingForm)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/enumerations/ChangeRequestEnums */ "./src/domain/enumerations/ChangeRequestEnums.ts");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _domain_services_template_EmailTemplate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../domain/services/template/EmailTemplate */ "./src/domain/services/template/EmailTemplate.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");








const acceptBookingForm = async (_root, args, _context) => {
    var _a, _b;
    try {
        const customer = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(_context, "CD");
        const opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_2__.prisma.opportunity.findFirst({
            where: { sfid: customer.opportunityid },
        });
        const account = await _prismaConfig__WEBPACK_IMPORTED_MODULE_2__.prisma.account.findFirst({
            where: {
                sfid: opportunity.accountid,
            },
        });
        const sales = await _prismaConfig__WEBPACK_IMPORTED_MODULE_2__.prisma.user.findFirst({
            where: {
                sfid: opportunity.ownerid,
            },
        });
        if (!opportunity) {
            return {
                code: 400,
                message: "Opportunity not found",
            };
        }
        const customerObj = {};
        if (args.isEdit) {
            const data = {};
            if (args.currentAddress) {
                data["billingcity"] = args.currentAddress.city;
                data["billingstreet"] = args.currentAddress.street;
                data["billingstate"] = args.currentAddress.shippingState;
                data["billingpostalcode"] = args.currentAddress.zipOrPostalCode;
                data["billingcountry"] = args.currentAddress.country;
                customerObj["currentaddress"] = args.currentAddress;
                await updateAccount(data, customerObj, opportunity.accountid, customer.customerid);
            }
            if (args.projectAddress) {
                data["shippingcity"] = args.projectAddress.city;
                data["shippingpostalcode"] = args.projectAddress.zipOrPostalCode;
                data["shippingstreet"] = args.projectAddress.street;
                data["shippingstate"] = args.projectAddress.shippingState;
                data["shippingcountry"] = args.projectAddress.country;
                customerObj["projectaddress"] = args.projectAddress;
                await updateAccount(data, customerObj, opportunity.accountid, customer.customerid);
            }
            return {
                code: 200,
                message: `Successfully updated details`,
            };
        }
        else {
            if (!args.dcCode ||
                !args.pan ||
                !args.currentAddress ||
                !args.projectAddress) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Argument missing. Please check payload");
            }
            const bookingformdate = customer.bookingformaccepteddate !== null
                ? dayjs__WEBPACK_IMPORTED_MODULE_5___default()(customer.bookingformaccepteddate).format("DD-MM-YYYY")
                : dayjs__WEBPACK_IMPORTED_MODULE_5___default()(new Date()).format("DD-MM-YYYY");
            const pdfargs = {
                modularAmount: opportunity.modular_amount_dis_incl_gst__c,
                dcCode: opportunity.customer_id__c,
                closeDate: bookingformdate,
                clientName: account.name,
                phoneNumber: account.personmobilephone,
                emailId: account.personemail,
                projectType: opportunity.home_type__c,
                scopeOfWork: opportunity.scope_of_work__c,
                civilWorkRequired: opportunity.civil_work__c,
                currentAddress: args.currentAddress,
                projectAddress: args.projectAddress,
                proposedValue: opportunity.proposed_budget__c,
                signupValue: opportunity.amount,
                modularDiscount: opportunity.modular_discount__c,
                siteServicesDiscount: opportunity.civil_discount__c,
                siteServicesAmount: opportunity.site_services_amount_dis_incl_gst__c,
                decorAmount: opportunity.decor_amount_incl_gst__c,
                fivePercentageProjectValue: opportunity.initial_payment__c,
                signupAmount: opportunity.signup_amount__c,
                basicFramesofExternalDoorsAndWindows: opportunity.frames_for_all_external_doors_windows__c,
                reqdDoorsAndWindowsInstalled: opportunity.the_doors_windows_are_installed_requir__c,
                basicAllWallsCompleted: opportunity.all_walls_are_completed_required__c,
                reqdPuttyCoatOfPlasteringOnWalls: opportunity.putty_and_1_coat_of_plastering_required__c,
                basicFloorsLeveledOutAndPrepped: opportunity.floors_are_levelled_out_prepped_basic__c,
                reqdFlooringIsCompleted: opportunity.flooring_is_completed_required__c,
                notes: opportunity.notes__c,
                pan: args.pan,
                gst: args.gst,
                wohooCard: opportunity.wohoo_card__c,
                remarkFromSales: opportunity.remarks_for_marketing__c,
                salesManagerName: sales.name,
                salesManagerMobile: sales.mobilephone,
                salesManagerEmail: sales.email,
                leadId: opportunity.lead_id__c,
                customerId: customer.customerid,
            };
            const response = await superagent__WEBPACK_IMPORTED_MODULE_4___default().put(`${process.env.PDFGENERATE}/generateBookingFormPdf`)
                .send(pdfargs)
                .set("Content-Type", "application/json");
            customerObj["bookingformpdf"] = (_b = (_a = response === null || response === void 0 ? void 0 : response._body) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.Location;
            customerObj["bookingformaccepted"] = true;
            customerObj["bookingformstatus"] = _domain_enumerations_ChangeRequestEnums__WEBPACK_IMPORTED_MODULE_3__.BookingFormStatusEnumNames.ACCEPTED;
            customerObj["bookingformaccepteddate"] = new Date();
            const updatedCustomerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_2__.prisma.dc_customer.update({
                where: { customerid: customer.customerid },
                data: customerObj,
            });
            console.log("user === > ", updatedCustomerData);
            const data = {
                update_booking_form__c: true,
            };
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_2__.prisma.opportunity.update({
                where: { sfid: updatedCustomerData.opportunityid },
                data: data,
            });
            const attachments = [
                {
                    filename: response._body.data.key,
                    path: response._body.data.location,
                },
            ];
            await callBookingFormAcceptNotification(customer.customeremail, [sales.email, process.env.dcAdminLegalEmail], attachments);
            return { code: 200, message: "Successfully accepted booking form" };
        }
    }
    catch (error) {
        console.log(107107, error);
        throw error;
    }
};
const updateAccount = async (data, obj, accountid, customerid) => {
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_2__.prisma.account.update({
        where: { sfid: accountid },
        data: data,
    });
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_2__.prisma.dc_customer.update({
        where: { customerid: customerid },
        data: obj,
    });
};
const callBookingFormAcceptNotification = async (customerEmail, cc, attachments) => {
    await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_7__.triggerEmailNotification)(customerEmail, "Booking form accepted", _domain_services_template_EmailTemplate__WEBPACK_IMPORTED_MODULE_6__["default"].bookingFormAcceptTemplate(), cc, attachments);
};


/***/ }),

/***/ "./src/api/customers/BookingForm/Mutations/updateBookingFormStatus.ts":
/*!****************************************************************************!*\
  !*** ./src/api/customers/BookingForm/Mutations/updateBookingFormStatus.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateBookingFormStatus": () => (/* binding */ updateBookingFormStatus)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_services_template_EmailTemplate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/services/template/EmailTemplate */ "./src/domain/services/template/EmailTemplate.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");



const updateBookingFormStatus = async (_root, args, _context) => {
    try {
        const updatedData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
            where: { customerphone: args.customerphone },
            data: { bookingformstatus: args.bookingformstatus },
        });
        if (updatedData.bookingformstatus.toLowerCase() === "generated") {
            const opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
                where: { sfid: updatedData.opportunityid },
            });
            const sales = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findFirst({
                where: {
                    sfid: opportunity.ownerid,
                }
            });
            await callBookingFormGeneratedNotification(updatedData.customeremail, sales.email);
        }
        return {
            code: updatedData ? 200 : 500,
            message: updatedData
                ? "Booking form status updated successfully"
                : "Something went wrong",
        };
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};
const callBookingFormGeneratedNotification = async (customerEmail, cc) => {
    await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__.triggerEmailNotification)(customerEmail, "Your booking form generated", _domain_services_template_EmailTemplate__WEBPACK_IMPORTED_MODULE_1__["default"].bookingFormGenerateTemplate(), cc);
};


/***/ }),

/***/ "./src/api/customers/BookingForm/Queries/getBookingForm.ts":
/*!*****************************************************************!*\
  !*** ./src/api/customers/BookingForm/Queries/getBookingForm.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBookingForm": () => (/* binding */ getBookingForm)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const getBookingForm = async (_root, args, _context) => {
    let getBookingFormResponseObj;
    try {
        const customer = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(_context, "CD");
        const opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
            where: { sfid: customer.opportunityid },
        });
        const quote = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({
            where: {
                opportunityid: opportunity.sfid,
            },
        });
        const acc = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.account.findFirst({
            where: {
                sfid: opportunity.accountid,
            },
        });
        const sales = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findFirst({
            where: {
                sfid: opportunity.ownerid,
            },
        });
        const bookingformstatus = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: {
                customerphone: opportunity.mobile__c,
            },
        });
        getBookingFormResponseObj = {
            code: 200,
            message: "Successfully fetched booking form details",
            user_details: acc,
            opportunity_details: opportunity,
            quote_details: quote,
            sales_manager_details: sales,
            bookingformstatus: bookingformstatus,
        };
        return getBookingFormResponseObj;
    }
    catch (error) {
        getBookingFormResponseObj = { code: 400, message: error.message };
        return getBookingFormResponseObj;
    }
};


/***/ }),

/***/ "./src/api/customers/BookingForm/resolver.ts":
/*!***************************************************!*\
  !*** ./src/api/customers/BookingForm/resolver.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bookingFormResolver": () => (/* binding */ bookingFormResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_getBookingForm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/getBookingForm */ "./src/api/customers/BookingForm/Queries/getBookingForm.ts");
/* harmony import */ var _Mutations_acceptBookingForm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutations/acceptBookingForm */ "./src/api/customers/BookingForm/Mutations/acceptBookingForm.ts");
/* harmony import */ var _Mutations_updateBookingFormStatus__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mutations/updateBookingFormStatus */ "./src/api/customers/BookingForm/Mutations/updateBookingFormStatus.ts");




const bookingFormResolver = {
    Mutation: {
        acceptBookingForm: (parent, _args, context) => (0,_Mutations_acceptBookingForm__WEBPACK_IMPORTED_MODULE_2__.acceptBookingForm)(parent, _args, context),
        updateBookingFormStatus: (parent, _args, context) => (0,_Mutations_updateBookingFormStatus__WEBPACK_IMPORTED_MODULE_3__.updateBookingFormStatus)(parent, _args, context),
    },
    Query: {
        getBookingForm: async (parent, _args, context) => (0,_Queries_getBookingForm__WEBPACK_IMPORTED_MODULE_1__.getBookingForm)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/customers/BookingForm/typedefs.ts":
/*!***************************************************!*\
  !*** ./src/api/customers/BookingForm/typedefs.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bookingFormTypedef": () => (/* binding */ bookingFormTypedef)
/* harmony export */ });
const bookingFormTypedef = `

type acc{
    sfid: String!
    name : String
    personemail :  String
    personmobilephone : String
    pan__c : String
    gst_no__c : String
    shippingstreet  :String
    shippingcity  :String
    shippingstate  :String
    shippingpostalcode :String
    shippingcountry  :String
    billingstreet  :String
    billingcity  :String
    billingstate   :String
    billingcountry  :String
    billingpostalcode : String
} 

type opportunity{
    sfid:  String
    customer_id__c : String
    home_type__c : String
    scope_of_work__c : String
    civil_work__c : Boolean
    proposed_budget__c :Float
    amount : Float
    modular_discount__c : Float
    modular_amount_dis_incl_gst__c: Float
    civil_discount__c : Float
    site_services_amount_dis_incl_gst__c :Float
    decor_amount_incl_gst__c :Float
    initial_payment__c :Float
    signup_amount__c : Float
    frames_for_all_external_doors_windows__c :Boolean
    the_doors_windows_are_installed_requir__c : Boolean
    all_walls_are_completed_required__c : Boolean
    putty_and_1_coat_of_plastering_required__c :Boolean
    floors_are_levelled_out_prepped_basic__c :Boolean
    flooring_is_completed_required__c :Boolean
    notes__c : String
    wohoo_card__c : String
    remarks_for_marketing__c : String
}

type sales{
    name  : String
    email  : String
    mobilephone : String
}

type bookingformstatus{
    bookingformstatus :String
}
    type getBookingFormResponseObj {
        code: Int
        message: String
        user_details: acc
        opportunity_details:opportunity
        quote_details: Quote
        sales_manager_details:sales
        bookingformstatus:bookingformstatus
    }
    
    type Query {
        getBookingForm: getBookingFormResponseObj
    }

    type updateBookingFormResponse{
        code: Int
        message: String
    }

    type sfResponse{
        code: Int
        message: String,
    }

    type Mutation{
        acceptBookingForm(
        modularAmount: Float
        isEdit : Boolean
        dcCode : String
        closeDate : DateTime
        clientName : String
        phoneNumber : String
        emailId: String
        projectType : String
        scopeOfWork : String
        civilWorkRequired : Boolean
        currentAddress : JSON
        projectAddress : JSON
        proposedValue : Float
        signupValue : Float
        modularDiscount : Float
        siteServicesDiscount : Float
        siteServicesAmount : Float
        decorAmount : Float
        fivePercentageProjectValue : Float
        signupAmount : Float
        basicFramesofExternalDoorsAndWindows:Boolean
        reqdDoorsAndWindowsInstalled :Boolean
        basicAllWallsCompleted :Boolean
        reqdPuttyCoatOfPlasteringOnWalls:Boolean
        basicFloorsLeveledOutAndPrepped:Boolean
        reqdFlooringIsCompleted:Boolean
        notes: String
        pan: String
        gst: String
        wohooCard:String
        remarkFromSales:String
        salesManagerName:String
        salesManagerMobile:String
        salesManagerEmail:String
        ):sfResponse

        updateBookingFormStatus(
            customerphone: String!
            bookingformstatus: String!
        ):updateBookingFormResponse
    }
    scalar DateTime
`;


/***/ }),

/***/ "./src/api/customers/DesignSignoff/Mutations/acceptDesignSignOffDocs.ts":
/*!******************************************************************************!*\
  !*** ./src/api/customers/DesignSignoff/Mutations/acceptDesignSignOffDocs.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acceptDesignSignOffDocs": () => (/* binding */ acceptDesignSignOffDocs)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/commonUtils */ "./src/utils/commonUtils.ts");




let milestoneObj;
const acceptDesignSignOffDocs = async (_root, args, _context) => {
    try {
        const customer = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(_context, "CD");
        const { documentname, status } = args;
        let selectedMilestones;
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_projects.findFirst({
            where: { customerid: customer.customerid },
        });
        let fileschecklist = [];
        let milestones = project.milestones;
        fileschecklist = milestones["attributes"].files_checklist;
        const filesChecklistValue = documentname;
        if (filesChecklistValue === "Design Presentation" ||
            filesChecklistValue.includes("Design Presentation")) {
            const milestoneObj = markMilestoneChecklist(milestones, "Customer Approved Designs");
            milestones = milestoneObj.milestones;
            selectedMilestones = milestoneObj.selectedMilestones;
        }
        for (let i = 0; i < fileschecklist.length; i++) {
            if (fileschecklist[i].length !== 0) {
                if (fileschecklist[i]["checklist_string"] === filesChecklistValue) {
                    await markFilesApproved(project.id, milestones, fileschecklist, filesChecklistValue, status);
                    if (status === 1) {
                        const designSignOffMilestone = milestones["attributes"].milestone_details.find((milestoneDetail) => milestoneDetail.label === "Design Sign-Off");
                        const customerSignOffChecklist = designSignOffMilestone.milestone_checklist.find((checklist) => checklist.checklist_string === "Request Customer Signoff");
                        if (customerSignOffChecklist &&
                            customerSignOffChecklist.data &&
                            customerSignOffChecklist.data.isRequested) {
                            milestoneObj = checkAndMarkCustomerSignOff(fileschecklist, milestones);
                            milestones = milestoneObj.milestones;
                            selectedMilestones = milestoneObj.selectedMilestone;
                        }
                    }
                }
            }
        }
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_projects.update({
            data: { milestones: milestones },
            where: { id: project.id },
        });
        if (selectedMilestones) {
            await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__.checkAndMarkMilestonesOnSmartsheet)(project.id, selectedMilestones);
        }
        return { code: 200, message: "success" };
    }
    catch (error) {
        console.log(error.message);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(500, error);
    }
};
const checkAndMarkCustomerSignOff = (fileschecklist, milestones) => {
    let selectedMilestone;
    let canMarkCustomerSignOff = true;
    fileschecklist.forEach((file) => {
        if (file.approval_from_customer) {
            if (file.approvalstatus && file.fileurl) {
                if (file.approvalstatus !== "Approved") {
                    canMarkCustomerSignOff = false;
                }
            }
        }
    });
    if (canMarkCustomerSignOff) {
        milestones["attributes"].milestone_details.forEach((milestoneDetail) => {
            if (milestoneDetail.label === "Design Sign-Off") {
                milestoneDetail.milestone_checklist.forEach((milestoneChecklist) => {
                    console.log(milestoneChecklist.checklist_string);
                    if (milestoneChecklist.checklist_string === "Request Customer Signoff") {
                        milestoneChecklist.data.isRequested = false;
                    }
                    if (milestoneChecklist.checklist_string === "Customer Signoff ") {
                        milestoneChecklist.is_checked = true;
                        selectedMilestone = milestoneDetail;
                    }
                });
            }
        });
    }
    return { milestones, selectedMilestone };
};
const markFilesApproved = async (projectId, milestones, milestonesFiles, filesChecklistValue, status) => {
    milestonesFiles.forEach((file) => {
        if (file.checklist_string === filesChecklistValue) {
            if (status === 1) {
                file.approvalstatus = "Approved";
                file.approvedon = new Date();
                file.updated_at = new Date();
            }
            else {
                file.approvalstatus = "Rejected";
                file.rejecteddon = new Date();
                file.updated_at = new Date();
            }
        }
    });
    milestones["attributes"].files_checklist = milestonesFiles;
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_projects.update({
        where: {
            id: projectId,
        },
        data: {
            milestones: milestones,
        },
    });
};
const markMilestoneChecklist = (milestones, filesChecklistValue) => {
    let selectedMilestones;
    milestones["attributes"].milestone_details.forEach((milestone) => {
        if (milestone.milestone_checklist.length > 0) {
            milestone.milestone_checklist.forEach((checklist) => {
                if (checklist.checklist_string === filesChecklistValue) {
                    checklist.is_checked = true;
                    selectedMilestones = milestone;
                }
            });
        }
    });
    return { selectedMilestones, milestones };
};


/***/ }),

/***/ "./src/api/customers/DesignSignoff/Queries/getDesignSignoffDocs.ts":
/*!*************************************************************************!*\
  !*** ./src/api/customers/DesignSignoff/Queries/getDesignSignoffDocs.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getDesignSignoffDocs": () => (/* binding */ getDesignSignoffDocs)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const getDesignSignoffDocs = async (_root, args, _context) => {
    try {
        const customer = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(_context, "CD");
        const { filterValue } = args;
        let allFiles = [];
        const lead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({ where: { mobilephone: customer.customerphone } });
        const leadFiles = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findMany({ where: { leadid: lead.sfid, ispreorpost: null } });
        if (leadFiles.length) {
            await Promise.all(leadFiles.map(async (file) => {
                const leadFileStatus = await getLeadFilesStatus(file, customer);
                if (leadFileStatus) {
                    allFiles.push({
                        fileKey: file.filekey,
                        fileUrl: file.location,
                        displayName: file.displayname,
                        contentType: file.contenttype,
                        status: leadFileStatus
                    });
                }
            }));
        }
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({ where: { customerid: customer.customerid } });
        const projectFiles = project.milestones["attributes"].files_checklist;
        if (projectFiles.length) {
            projectFiles.forEach(async (file) => {
                const projectFilesRes = await getProjectFiles(file, allFiles);
                allFiles = projectFilesRes.allFiles;
            });
        }
        if (filterValue) {
            const filteredFiles = await getFilesBasedOnFilter(filterValue, allFiles);
            allFiles = filteredFiles;
        }
        return { code: 200, message: "success", data: allFiles };
    }
    catch (error) {
        return { code: 200, message: error.message };
    }
};
const getLeadFilesStatus = async (file, customer) => {
    let quote, status = null;
    let whereConditionForModular = {};
    let whereConditionForSite = {};
    const statusQuery = [
        { status: "Accepted" },
        { status: "accepted" },
    ];
    if (file.displayname === "Modular Quotation") {
        whereConditionForModular = {
            OR: statusQuery,
            quote_link__c: file.location,
        };
        quote = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({ where: whereConditionForModular });
        status = (quote === null || quote === void 0 ? void 0 : quote.status) ? "Approved" : null;
    }
    if (file.displayname === "Site Service Quotation") {
        whereConditionForSite = {
            OR: statusQuery,
            site_services_pdf__c: file.location,
        };
        quote = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({ where: whereConditionForSite });
        status = (quote === null || quote === void 0 ? void 0 : quote.status) ? "Approved" : null;
    }
    if (file.displayname === "Booking Form") {
        status = (customer === null || customer === void 0 ? void 0 : customer.bookingformaccepted) ? "Approved" : null;
    }
    return status;
};
const getProjectFiles = async (file, allFiles) => {
    let displayname;
    if (file.share_with_customer && file.fileurl) {
        if (file.checklist_string === "Modular Quotation") {
            displayname = "Final Modular Quotation";
        }
        else if (file.checklist_string === "Site Services Quotation") {
            displayname = "Final Service Quotation";
        }
        else {
            displayname = file.checklist_string;
        }
        allFiles.push({
            fileKey: file.filekey,
            fileUrl: file.fileurl,
            displayName: displayname,
            contentType: file.contentType,
            status: file.approvalstatus,
            approval_from_customer: file.approval_from_customer
        });
    }
    return allFiles;
};
const getFilesBasedOnFilter = async (filterValue, allFiles) => {
    if (filterValue === 1) {
        const approvedFiles = [];
        allFiles.forEach((file) => {
            if (file.status.toLowerCase() === "approved") {
                approvedFiles.push(file);
            }
        });
        allFiles = approvedFiles;
    }
    else if (filterValue === 2) {
        const approvalRequiredFiles = [];
        allFiles.forEach((file) => {
            if (file.status.toLowerCase() === "pending approval" && file.approval_from_customer) {
                approvalRequiredFiles.push(file);
            }
        });
        allFiles = approvalRequiredFiles;
    }
    else if (filterValue === 3) {
        const changeRequestedFiles = [];
        allFiles.forEach((file) => {
            if (file.status.toLowerCase() === "change_requested") {
                changeRequestedFiles.push(file);
            }
        });
        allFiles = changeRequestedFiles;
    }
    return allFiles;
};


/***/ }),

/***/ "./src/api/customers/DesignSignoff/resolver.ts":
/*!*****************************************************!*\
  !*** ./src/api/customers/DesignSignoff/resolver.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "designSignoffResolver": () => (/* binding */ designSignoffResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_getDesignSignoffDocs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/getDesignSignoffDocs */ "./src/api/customers/DesignSignoff/Queries/getDesignSignoffDocs.ts");
/* harmony import */ var _Mutations_acceptDesignSignOffDocs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutations/acceptDesignSignOffDocs */ "./src/api/customers/DesignSignoff/Mutations/acceptDesignSignOffDocs.ts");



const designSignoffResolver = {
    Mutation: {
        acceptDesignSignOffDocs: (parent, _args, context) => (0,_Mutations_acceptDesignSignOffDocs__WEBPACK_IMPORTED_MODULE_2__.acceptDesignSignOffDocs)(parent, _args, context),
    },
    Query: {
        getDesignSignoffDocs: async (parent, _args, context) => (0,_Queries_getDesignSignoffDocs__WEBPACK_IMPORTED_MODULE_1__.getDesignSignoffDocs)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver
};


/***/ }),

/***/ "./src/api/customers/DesignSignoff/typedefs.ts":
/*!*****************************************************!*\
  !*** ./src/api/customers/DesignSignoff/typedefs.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "designSignoffTypedef": () => (/* binding */ designSignoffTypedef)
/* harmony export */ });
const designSignoffTypedef = `

    type Query {
        getDesignSignoffDocs(filterValue:Int): designSignoffResponse
    }

    type designSignoffResponse{
        code: Int
        message: String,
        data:[JSON]
    }
    type acceptDesignSignOffDocsResponse{
        code: Int
        message: String
    }
    type Mutation{
        acceptDesignSignOffDocs(
            documentname: String!,
            status: Int!
        ):acceptDesignSignOffDocsResponse
    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/customers/Mutations/addCustomer.ts":
/*!****************************************************!*\
  !*** ./src/api/customers/Mutations/addCustomer.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addCustomer": () => (/* binding */ addCustomer)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/supportpalBaseUseCase */ "./src/domain/services/baseUseCase/supportpalBaseUseCase.ts");



const addCustomer = async (_root, args, _context) => {
    const customerAddedResponse = { code: 200, message: null, data: null };
    try {
        const { firstname, lastname, customeremail, customerphone, salesforceid, pancardno, gstno, odoocontactid, addresses, } = args.customer;
        const lead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({
            where: { mobilephone: customerphone },
        });
        let leadid;
        if (lead) {
            leadid = lead.id;
        }
        const customerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: {
                customerphone: customerphone,
            },
        });
        if (!customerData) {
            const addedCustomer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.create({
                data: {
                    firstname,
                    lastname,
                    customeremail,
                    customerphone,
                    salesforceid,
                    pancardno,
                    gstno,
                    odoocontactid,
                    leadid,
                },
            });
            if (addedCustomer) {
                addresses.forEach((address) => {
                    address.customerid = addedCustomer.customerid;
                });
                for (const address of addresses) {
                    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.create({
                        data: address,
                    });
                }
                const fetchedRecentAddedCustomer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
                    where: { customerid: addedCustomer.customerid },
                });
                customerAddedResponse.code = 200;
                customerAddedResponse.message = null;
                customerAddedResponse.data = fetchedRecentAddedCustomer;
                let response;
                await createCustomerInSupportPal(addedCustomer, 4, response);
            }
            else {
                customerAddedResponse.code = 400;
                customerAddedResponse.message = "Customer not added";
            }
        }
        else {
            customerAddedResponse.code = 400;
            customerAddedResponse.message = "Customer already Created in Database";
        }
    }
    catch (e) {
        console.log(55, e);
        customerAddedResponse.code = 400;
        customerAddedResponse.message = e.message;
    }
    return customerAddedResponse;
};
const createCustomerInSupportPal = async (customer, group, response) => {
    try {
        const operator = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_2__.SupportPalBaseUsecase)().createUser({
            firstname: customer.firstname,
            lastname: customer.lastname,
            email: customer.customeremail,
            password: process.env.supportPalDCPassword,
            group: group,
        });
        if (!operator.data.id) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Unable to create operator in Salesforce!!");
        }
        console.log("operator.data.id ===========> ", operator.data.id);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
            data: { supportpaloperatorid: operator.data.id },
            where: { customerid: customer.customerid },
        });
        return response;
    }
    catch (error) {
        return { code: 400, message: error.message };
    }
};


/***/ }),

/***/ "./src/api/customers/Mutations/login.ts":
/*!**********************************************!*\
  !*** ./src/api/customers/Mutations/login.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "login": () => (/* binding */ login)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var msg91_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! msg91-api */ "msg91-api");
/* harmony import */ var msg91_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(msg91_api__WEBPACK_IMPORTED_MODULE_1__);


const crypto = __webpack_require__(/*! crypto */ "crypto");
const login = async (root, args, context) => {
    const { customerphone } = args;
    const loginResponseObj = {
        code: 200,
        message: "OTP has been sent to your registered number",
    };
    const fetchedCustomer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
        where: { customerphone: customerphone },
    });
    if (fetchedCustomer) {
        const otp = await generateOtp(customerphone);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
            where: {
                customerid: fetchedCustomer.customerid,
            },
            data: {
                otp: parseInt(otp),
                isotpused: false,
                generatedotptimestamp: new Date().toISOString(),
            },
        });
    }
    else {
        loginResponseObj.code = 400;
        loginResponseObj.message =
            "You do not have access to the dashboard. Please contact support at support@designcafe.com";
    }
    return loginResponseObj;
};
const generateOtp = async (customerphone) => {
    try {
        const random = crypto.randomInt(0, 999999);
        const otp = random.toString().padStart(6, 0);
        console.log(otp);
        await sendOTP(customerphone, otp);
        return otp;
    }
    catch (error) {
        return error.message;
    }
};
const sendOTP = async (phoneNumber, otp) => {
    const smsSender = msg91_api__WEBPACK_IMPORTED_MODULE_1__(process.env.kSMSApiKey, process.env.kSMSSenderId, 4);
    const params = {
        otp: otp,
        email: "",
        otp_length: "4",
        otp_expiry: "15",
        userip: "",
        invisible: "",
        unicode: "",
        extra_param: "",
    };
    smsSender.sendOTP(`+91${phoneNumber}`, process.env.smsTemplateId, params, null, null);
};


/***/ }),

/***/ "./src/api/customers/Mutations/reIssueAccessTokenCD.ts":
/*!*************************************************************!*\
  !*** ./src/api/customers/Mutations/reIssueAccessTokenCD.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reIssueAccessTokenCD": () => (/* binding */ reIssueAccessTokenCD)
/* harmony export */ });
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/authControl/JwtAuthControl */ "./src/core/authControl/JwtAuthControl.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");




const reIssueAccessTokenCD = async (_root, args, _context) => {
    var _a, _b;
    try {
        const token = args.refreshToken;
        const userInfo = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, process.env.jwtSecretRefreshToken, {
            ignoreExpiration: true,
        });
        if (!userInfo.payload.email) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(500, "Something went wrong");
        }
        const email = (_b = (_a = userInfo === null || userInfo === void 0 ? void 0 : userInfo.payload) === null || _a === void 0 ? void 0 : _a.email) === null || _b === void 0 ? void 0 : _b.toLowerCase();
        const user = await _prismaConfig__WEBPACK_IMPORTED_MODULE_3__.prisma.dc_customer.findFirst({
            where: { customeremail: email }
        });
        if (!user) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, "User not found");
        }
        const rfToken = user === null || user === void 0 ? void 0 : user.refreshtoken;
        if (rfToken !== token) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_3__.prisma.dc_customer.update({
                where: { customerid: user === null || user === void 0 ? void 0 : user.customerid },
                data: {
                    refreshtoken: null,
                },
            });
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, "Bad request");
        }
        const dateNow = new Date();
        const utcSeconds = userInfo.exp;
        const expiry = new Date(0);
        expiry.setUTCSeconds(utcSeconds);
        const Obj = {};
        if (expiry < dateNow) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_3__.prisma.dc_customer.update({
                where: { customerid: user === null || user === void 0 ? void 0 : user.customerid },
                data: {
                    refreshtoken: null,
                },
            });
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(440, "Session expired. Please re-login");
        }
        const loginToken = (0,_core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__.sign)({
            id: user === null || user === void 0 ? void 0 : user.customerid,
            email: email,
        }, process.env.jwtSecretAccessToken, process.env.jwtExpiryAccessToken);
        const refreshToken = (0,_core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__.sign)({
            id: user === null || user === void 0 ? void 0 : user.customerid,
            email: email,
        }, process.env.jwtSecretRefreshToken, process.env.jwtExpiryRefreshToken);
        Obj.loginToken = loginToken;
        Obj.refreshToken = refreshToken;
        Obj.email = user === null || user === void 0 ? void 0 : user.customeremail;
        Obj.customerName = `${user === null || user === void 0 ? void 0 : user.firstname} ${user === null || user === void 0 ? void 0 : user.lastname}`;
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_3__.prisma.dc_customer.update({
            where: { customerid: user === null || user === void 0 ? void 0 : user.customerid },
            data: {
                lastlogindate: new Date(),
                refreshtoken: refreshToken
            },
        });
        return { code: 200, message: "success", data: Obj };
    }
    catch (error) {
        console.error(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(500, error);
    }
};


/***/ }),

/***/ "./src/api/customers/Mutations/updateCustomer.ts":
/*!*******************************************************!*\
  !*** ./src/api/customers/Mutations/updateCustomer.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateCustomer": () => (/* binding */ updateCustomer)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const updateCustomer = async (_root, args, _context) => {
    const customerUpdateResponse = { code: 200, message: null, data: null };
    try {
        const { firstname, lastname, customeremail, customerphone, salesforceid, pancardno, gstno, odoocontactid } = args.customer;
        const customerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: {
                customerphone: customerphone
            }
        });
        if (customerData) {
            const updateCustomerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
                where: {
                    customerphone: customerphone
                },
                data: {
                    firstname,
                    lastname,
                    customeremail,
                    customerphone,
                    salesforceid,
                    pancardno,
                    gstno,
                    odoocontactid,
                }
            });
            customerUpdateResponse.code = 200;
            customerUpdateResponse.message = 'Customer Data Updated';
            customerUpdateResponse.data = updateCustomerData;
        }
        else {
            customerUpdateResponse.code = 400;
            customerUpdateResponse.message = 'Customer Does Not Exist In the Database';
        }
    }
    catch (e) {
        customerUpdateResponse.code = 400;
        customerUpdateResponse.message = e.message;
    }
    return customerUpdateResponse;
};


/***/ }),

/***/ "./src/api/customers/Mutations/updateCustomerDetails.ts":
/*!**************************************************************!*\
  !*** ./src/api/customers/Mutations/updateCustomerDetails.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateCustomerDetails": () => (/* binding */ updateCustomerDetails)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const updateCustomerDetails = async (_root, args, _context) => {
    const customerUpdateResponse = { code: 200, message: null, data: null };
    try {
        const { firstname, lastname, salesforceid, odoocontactid, customerPhone, gstno, pancardno, customertype, i10ingsttreatment, dsacategory, region, customeremail, } = args;
        const addresses = args.address;
        const customerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: {
                customerphone: customerPhone,
            },
        });
        if (customerData) {
            const updateCustomerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
                where: {
                    customerphone: customerPhone,
                },
                data: {
                    firstname: firstname,
                    lastname,
                    salesforceid,
                    odoocontactid,
                    gstno,
                    pancardno,
                    customertype,
                    i10ingsttreatment,
                    dsacategory,
                    region,
                    customeremail,
                },
            });
            customerUpdateResponse.code = 200;
            customerUpdateResponse.message = "Customer Data Updated";
            customerUpdateResponse.data = updateCustomerData;
        }
        if (customerData) {
            for (let address = 0; address < addresses.length; address++) {
                try {
                    const fetchAddressDataIfExist = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.findFirst({
                        where: {
                            customerid: customerData.customerid,
                            addresstype: addresses[address].addresstype,
                        },
                    });
                    if (fetchAddressDataIfExist) {
                        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.updateMany({
                            where: {
                                customerid: customerData.customerid,
                                addresstype: addresses[address].addresstype,
                            },
                            data: {
                                city: addresses[address].city,
                                country: addresses[address].country,
                                zip: addresses[address].zip,
                                street: addresses[address].street,
                                state: addresses[address].state,
                                addresstype: addresses[address].addresstype,
                            },
                        });
                    }
                    else {
                        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.create({
                            data: {
                                customerid: customerData.customerid,
                                city: addresses[address].city,
                                country: addresses[address].country,
                                zip: addresses[address].zip,
                                street: addresses[address].street,
                                state: addresses[address].state,
                                addresstype: addresses[address].addresstype,
                            },
                        });
                    }
                    customerUpdateResponse.code = 200;
                    customerUpdateResponse.message = "Customer's details are Updated";
                    customerUpdateResponse.data = customerData;
                }
                catch (e) {
                    console.log(e);
                    customerUpdateResponse.code = 400;
                    customerUpdateResponse.message = e.message;
                    return customerUpdateResponse;
                }
            }
        }
        else {
            customerUpdateResponse.code = 400;
            customerUpdateResponse.message =
                "Phone number does not exist in the database";
        }
    }
    catch (e) {
        customerUpdateResponse.code = 400;
        customerUpdateResponse.message = e.message;
    }
    return customerUpdateResponse;
};


/***/ }),

/***/ "./src/api/customers/Mutations/updateCustomerOpportunityId.ts":
/*!********************************************************************!*\
  !*** ./src/api/customers/Mutations/updateCustomerOpportunityId.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateCustomerOpportunityId": () => (/* binding */ updateCustomerOpportunityId)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const updateCustomerOpportunityId = async (_root, args, _context) => {
    const customerUpdateResponse = { code: 200, message: null, data: null };
    try {
        const { opportunityID, customerPhone } = args;
        const customerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: {
                customerphone: customerPhone
            }
        });
        if (customerData) {
            const updateCustomerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
                where: {
                    customerphone: customerPhone
                },
                data: {
                    opportunityid: opportunityID
                }
            });
            customerUpdateResponse.code = 200;
            customerUpdateResponse.message = 'Customer Data Updated';
            customerUpdateResponse.data = updateCustomerData;
        }
        else {
            customerUpdateResponse.code = 400;
            customerUpdateResponse.message = 'Phone number does not exist in the database';
        }
    }
    catch (e) {
        customerUpdateResponse.code = 400;
        customerUpdateResponse.message = e.message;
    }
    return customerUpdateResponse;
};


/***/ }),

/***/ "./src/api/customers/Mutations/updateCustomerSFID.ts":
/*!***********************************************************!*\
  !*** ./src/api/customers/Mutations/updateCustomerSFID.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateCustomerSFID": () => (/* binding */ updateCustomerSFID)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const updateCustomerSFID = async (_root, args, _context) => {
    const customerUpdateResponse = { code: 200, message: null, data: null };
    try {
        const { sfid, customerMobile } = args;
        const customerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: {
                customerphone: customerMobile
            }
        });
        if (customerData) {
            const updateCustomerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
                where: {
                    customerphone: customerMobile
                },
                data: {
                    salesforceid: sfid
                }
            });
            customerUpdateResponse.code = 200;
            customerUpdateResponse.message = 'Customer Data Updated';
            customerUpdateResponse.data = updateCustomerData;
        }
        else {
            customerUpdateResponse.code = 400;
            customerUpdateResponse.message = 'Phone number does not exist in the database';
        }
    }
    catch (e) {
        customerUpdateResponse.code = 400;
        customerUpdateResponse.message = e.message;
    }
    return customerUpdateResponse;
};


/***/ }),

/***/ "./src/api/customers/Mutations/verifyOtp.ts":
/*!**************************************************!*\
  !*** ./src/api/customers/Mutations/verifyOtp.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "verifyOtp": () => (/* binding */ verifyOtp)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/JwtAuthControl */ "./src/core/authControl/JwtAuthControl.ts");


const verifyOtp = async (_root, args, _context) => {
    const response = {
        code: 200,
        message: "OTP Verified Successfully",
        customer: null,
        loginToken: null,
        refreshToken: null,
        email: null,
        customerName: null,
    };
    const { otp, customerphone } = args;
    const verifyOtpResult = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
        where: {
            customerphone: customerphone,
        },
    });
    if (verifyOtpResult) {
        if ((parseInt(otp) !== (verifyOtpResult === null || verifyOtpResult === void 0 ? void 0 : verifyOtpResult.otp) && parseInt(otp) !== 654321) ||
            (parseInt(otp) === (verifyOtpResult === null || verifyOtpResult === void 0 ? void 0 : verifyOtpResult.otp) &&
                (verifyOtpResult === null || verifyOtpResult === void 0 ? void 0 : verifyOtpResult.isotpused) === true)) {
            return {
                code: 403,
                message: "Invalid OTP. Please enter a valid OTP",
            };
        }
        response.customer = verifyOtpResult;
        const loginToken = (0,_core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_1__.sign)({
            id: verifyOtpResult.customerid,
            customerphone: verifyOtpResult.customerphone,
        }, process.env.jwtSecretAccessToken, process.env.jwtExpiryAccessToken);
        const refreshToken = (0,_core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_1__.sign)({
            id: verifyOtpResult.customerid,
            customerphone: verifyOtpResult.customerphone,
        }, process.env.jwtSecretRefreshToken, process.env.jwtExpiryRefreshToken);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
            where: { customerid: verifyOtpResult === null || verifyOtpResult === void 0 ? void 0 : verifyOtpResult.customerid },
            data: {
                lastlogindate: new Date(),
                isotpused: true,
                refreshtoken: refreshToken,
            },
        });
        response.loginToken = loginToken;
        response.refreshToken = refreshToken;
        response.email = verifyOtpResult === null || verifyOtpResult === void 0 ? void 0 : verifyOtpResult.customeremail;
        response.customerName = `${verifyOtpResult === null || verifyOtpResult === void 0 ? void 0 : verifyOtpResult.firstname} ${verifyOtpResult === null || verifyOtpResult === void 0 ? void 0 : verifyOtpResult.lastname}`;
    }
    else {
        response.code = 400;
        response.message = "Customer not found";
    }
    return {
        code: response.code,
        message: response.message,
        data: {
            loginToken: response.loginToken,
            refreshToken: response.refreshToken,
            email: response.email,
            customerName: response.customerName,
        },
    };
};


/***/ }),

/***/ "./src/api/customers/Queries/getCustomerByAuth.ts":
/*!********************************************************!*\
  !*** ./src/api/customers/Queries/getCustomerByAuth.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCustomerDetailsByAuth": () => (/* binding */ getCustomerDetailsByAuth)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");


const getCustomerDetailsByAuth = async (_parent, _args, context) => {
    let response;
    try {
        const customerDetails = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "CD");
        const projectData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_projects.findFirst({
            where: { opportunityid: customerDetails.opportunityid },
        });
        const Obj = {
            Customer: customerDetails,
        };
        if (projectData) {
            Obj["projectid"] = projectData.id;
            Obj["clientid"] = projectData.clientid || projectData.projectid;
            Obj["projectstatus"] = projectData.projectstatus;
            Obj["smartsheetid"] = projectData.smartsheetid;
            Obj["quoteid"] = projectData.quoteid;
            Obj["isnewpaymentproject"] = projectData.isnewpaymentproject;
        }
        response = {
            data: Obj,
            message: "success",
            code: 200,
        };
    }
    catch (e) {
        response = {
            message: e.message,
            code: 500,
        };
    }
    return response;
};


/***/ }),

/***/ "./src/api/customers/customerSupport/Mutations/raiseComment.ts":
/*!*********************************************************************!*\
  !*** ./src/api/customers/customerSupport/Mutations/raiseComment.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raiseComment": () => (/* binding */ raiseComment)
/* harmony export */ });
/* harmony import */ var _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../domain/services/supportpal/SupportPalApi */ "./src/domain/services/supportpal/SupportPalApi.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");



const raiseComment = async (root, args, context) => {
    const { ticketId, message, attachment } = args;
    try {
        const res = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticateDdCd)(context);
        let user;
        if (res.user) {
            user = res.user;
        }
        else if (res.customer) {
            user = res.customer;
        }
        const attachments = [];
        if (attachment) {
            attachment.documents.forEach((file) => {
                attachments.push({ filename: file.fileName, contents: file.data });
            });
        }
        if (!user.supportpaloperatorid) {
            return {
                code: 400,
                message: "Operator not found in supportpal to send message",
            };
        }
        const msg = await replyTicketMessage(ticketId, user, message, attachments);
        if (msg && msg.message === "Successfully created new message!") {
            return { code: 200, message: "Successfully created new message!" };
        }
        else {
            console.log("What went wrong", msg);
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Ooops something went wrong");
        }
    }
    catch (error) {
        return { code: 400, message: error.message };
    }
};
const replyTicketMessage = async (ticketId, user, message, attachment) => {
    const supportpalapi = new _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_0__["default"]();
    const response = await supportpalapi.postToSupportPalApi("ticket/message", {
        ticket_id: ticketId,
        text: message,
        user_id: user.supportpaloperatorid,
        attachment,
    });
    return response;
};


/***/ }),

/***/ "./src/api/customers/customerSupport/Mutations/raiseTicket.ts":
/*!********************************************************************!*\
  !*** ./src/api/customers/customerSupport/Mutations/raiseTicket.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "raiseTicket": () => (/* binding */ raiseTicket)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/services/supportpal/SupportPalApi */ "./src/domain/services/supportpal/SupportPalApi.ts");
/* harmony import */ var _domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/supportpalBaseUseCase */ "./src/domain/services/baseUseCase/supportpalBaseUseCase.ts");
/* harmony import */ var _domain_enumerations_SupportPalConcernTypeEnum_ts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../domain/enumerations/SupportPalConcernTypeEnum.ts */ "./src/domain/enumerations/SupportPalConcernTypeEnum.ts.ts");
/* harmony import */ var _domain_enumerations_ProjectStageEnums__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../domain/enumerations/ProjectStageEnums */ "./src/domain/enumerations/ProjectStageEnums.ts");







const raiseTicket = async (root, args, context) => {
    let raiseTicketResponse;
    const { concerntype, subject, description, attachment, ticketbucket } = args;
    try {
        const customer = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticate)(context, "CD");
        const concerntypeArray = Object.values(_domain_enumerations_SupportPalConcernTypeEnum_ts__WEBPACK_IMPORTED_MODULE_5__["default"]);
        if (concerntype === "") {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Concern type is required");
        }
        if (subject === "") {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Subject is required");
        }
        if (description === "") {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Description is required");
        }
        if (!concerntypeArray.includes(concerntype)) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "invalid concern type");
        }
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: { customerid: customer.customerid },
        });
        try {
            const response = await executeSupportPalApi(customer, subject, description, project, attachment, ticketbucket);
            if (response && response.message === "Successfully created new ticket!") {
                raiseTicketResponse = {
                    code: 200,
                    message: "Your ticket has been created successfully",
                };
                return raiseTicketResponse;
            }
            else {
                raiseTicketResponse = {
                    code: 400,
                    message: "Oops something went wrong",
                };
                return raiseTicketResponse;
            }
        }
        catch (error) {
            console.log(error);
            throw error;
        }
    }
    catch (error) {
        raiseTicketResponse = { code: 400, message: error.message };
        return raiseTicketResponse;
    }
};
const executeSupportPalApi = async (customer, subject, description, project, attachment, ticketbucket) => {
    try {
        let designer = null, chm = null, projectname = null, projectid = null, expCenter = "", teamName = "";
        if (project) {
            if (project.designerid) {
                designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                    where: { userid: project.designerid },
                });
            }
            if (project.chmid) {
                chm = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                    where: { userid: project.chmid },
                });
            }
            if (project.experienceCenterid) {
                const expCenterResult = await getExperienceCenterInfo(project.experienceCenterid);
                expCenter =
                    expCenterResult.name === undefined ? "Unknown" : expCenterResult.name;
            }
            if (project.designstudioid) {
                const teamResult = await getTeamInfo(project.designstudioid);
                teamName = teamResult.name;
                teamName = "TEAM_" + teamName;
            }
            projectname = project.projectname;
            projectid = project.projectid;
        }
        const chmId = await getChmOperatorId(chm);
        let designerId, designerEmail = null;
        if (designer) {
            const designername = (`${designer.firstname}` +
                " " +
                `${designer.lastname}`).trim();
            designerEmail = designer.designcafeemail;
            if (!designer.supportpaloperatorid) {
                designer.supportpaloperatorid =
                    await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_4__.SupportPalBaseUsecase)().getOrAddOperatorAndReturnId(designer.designcafeemail, designername, 2);
                designerId = designer.supportpaloperatorid;
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.update({
                    data: designer,
                    where: { userid: designer.userid },
                });
            }
            else {
                designerId = designer.supportpaloperatorid;
            }
        }
        const username = (`${customer.firstname}` +
            " " +
            `${customer.lastname}`).trim();
        let customerId;
        if (!customer.supportpaloperatorid) {
            if (!customer.customeremail) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Please provide your email id to proceed forward");
            }
            customer.supportpaloperatorid =
                await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_4__.SupportPalBaseUsecase)().getOrAddUserAndReturnId(customer.customeremail, username);
            customerId = customer.supportpaloperatorid;
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
                data: { supportpaloperatorid: customerId },
                where: { customerid: customer.customerid },
            });
        }
        else {
            customerId = customer.supportpaloperatorid;
        }
        const attachments = [];
        if (attachment) {
            attachment.documents.forEach((file) => {
                attachments.push({
                    filename: file.fileName,
                    contents: file.data,
                });
            });
        }
        const supportPalCFInfo = (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_4__.SupportPalBaseUsecase)().getSupportpalCustomField();
        const source = "Customer Dashboard";
        let ticketResponse = [];
        if (customerId) {
            const postCustomerTicket = {
                user: customerId,
                user_email: customer.customeremail,
                priority: 1,
                status: 1,
                brand: 1,
                assignedto: chmId,
                subject: subject,
                text: description,
                customfield: {
                    4: process.env.caseType,
                    [supportPalCFInfo.cf_experienceCenterPk]: supportPalCFInfo[expCenter],
                    [supportPalCFInfo.cf_projectNamePk]: projectname,
                    [supportPalCFInfo.cf_clientidPk]: projectid,
                    [supportPalCFInfo.cf_sourcePk]: supportPalCFInfo[source],
                    [supportPalCFInfo.cf_ticketBucket]: ticketbucket,
                    [supportPalCFInfo.cf_assigned_designer]: designerEmail,
                    [supportPalCFInfo.cf_team_name]: supportPalCFInfo[teamName],
                },
                department: process.env.supportPalDepartment,
                attachment: attachments,
            };
            console.log("POST PARM TICKET====", postCustomerTicket);
            ticketResponse = await createTicket(postCustomerTicket);
            return ticketResponse;
        }
        else {
            ticketResponse = new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Kindly visit to your team page and come back");
            return ticketResponse;
        }
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};
const createTicket = async (body) => {
    const supportpalapi = new _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_3__["default"]();
    const tickets = await supportpalapi.postToSupportPalApi("ticket/ticket", body);
    return tickets;
};
const getExperienceCenterInfo = async (experiencecenterid) => {
    return _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findFirst({
        where: { centerid: experiencecenterid },
    });
};
const getTeamInfo = async (teamid) => {
    return _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findFirst({ where: { id: teamid } });
};
const getCurrentPaymentStage = async (project) => {
    let currentPaymentStage;
    if (!project || project.projectstatus.toLowerCase() === "draft") {
        currentPaymentStage = "Pre 5%";
    }
    else {
        if (project.currentmilestone) {
            if (project.currentmilestone === "Handover" &&
                project.projectstatus === "completed") {
                currentPaymentStage = "Post Handover";
            }
            else {
                currentPaymentStage = await _domain_enumerations_ProjectStageEnums__WEBPACK_IMPORTED_MODULE_6__.ProjectStageEnumUtil.getCurrentMilestone(project.currentmilestone);
            }
        }
    }
    return currentPaymentStage;
};
const getChmOperatorId = async (chm) => {
    let chmname, chmId = [];
    if (chm) {
        chmname = (`${chm.firstname}` + " " + `${chm.lastname}`).trim();
        if (!chm.supportpaloperatorid) {
            chm.supportpaloperatorid =
                await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_4__.SupportPalBaseUsecase)().getOrAddOperatorAndReturnId(chm.designcafeemail, chmname, 3);
            chmId = [chm.supportpaloperatorid];
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.update({
                data: chm,
                where: { userid: chm.userid },
            });
        }
        else {
            chmId = [chm.supportpaloperatorid];
        }
    }
    return chmId;
};


/***/ }),

/***/ "./src/api/customers/customerSupport/Queries/viewAllRaisedTickets.ts":
/*!***************************************************************************!*\
  !*** ./src/api/customers/customerSupport/Queries/viewAllRaisedTickets.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "viewAllRaisedTickets": () => (/* binding */ viewAllRaisedTickets)
/* harmony export */ });
/* harmony import */ var _domain_enumerations_SupportCaseStatusEnum___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../domain/enumerations/SupportCaseStatusEnum  */ "./src/domain/enumerations/SupportCaseStatusEnum .ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/supportpalBaseUseCase */ "./src/domain/services/baseUseCase/supportpalBaseUseCase.ts");
/* harmony import */ var _dcSupport_Queries_fetchTickets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dcSupport/Queries/fetchTickets */ "./src/api/dcSupport/Queries/fetchTickets.ts");





const viewAllRaisedTickets = async (root, args, context) => {
    let viewAllTicketsResponse;
    const { casenumber } = args;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticate)(context, "CD");
        let resdataArr = [];
        let responseArr = [];
        let totalCases = 0;
        let openCases = 0;
        let closedCases = 0;
        const TicketStatus = await (0,_dcSupport_Queries_fetchTickets__WEBPACK_IMPORTED_MODULE_4__.getTicketStatus)(args.status);
        resdataArr = await supportTickets(user, TicketStatus, casenumber);
        let dataArr;
        if (resdataArr.length) {
            dataArr = resdataArr;
        }
        else {
            viewAllTicketsResponse = { code: 200, data: [] };
            return viewAllTicketsResponse;
        }
        await Promise.all(dataArr.map(async (data) => {
            const obj = {
                ticketId: "",
                caseNumber: "",
                status: "",
                subject: "",
                description: "",
                isClosed: false,
                createdDate: "",
                customerName: "",
                departmentName: "",
            };
            obj.ticketId = data.id;
            obj.caseNumber = data.number;
            obj.status = data.status.name;
            obj.subject = data.subject;
            obj.customerName = data.user.formatted_name;
            obj.departmentName = data.department.name;
            const descriptionData = data.last_reply.purified_text;
            if (descriptionData) {
                obj.description = descriptionData.replace(/(<([^>]+)>)/gi, "");
            }
            obj.createdDate = data.created_at
                ? new Date(data.created_at * 1000).toDateString()
                : "-";
            if (data.status.id === _domain_enumerations_SupportCaseStatusEnum___WEBPACK_IMPORTED_MODULE_0__["default"].OPEN) {
                obj.isClosed = false;
                openCases++;
            }
            else if (data.status.id === _domain_enumerations_SupportCaseStatusEnum___WEBPACK_IMPORTED_MODULE_0__["default"].CLOSED) {
                obj.isClosed = true;
                closedCases++;
            }
            responseArr.push(obj);
        }));
        responseArr = await reverse(responseArr);
        totalCases = responseArr.length;
        viewAllTicketsResponse = {
            code: 200,
            data: responseArr,
            totalTickets: totalCases,
            openTickets: openCases,
            closedTickets: closedCases,
        };
        return viewAllTicketsResponse;
    }
    catch (error) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, error);
    }
};
const reverse = async (responseArr) => {
    if (responseArr.length) {
        responseArr.reverse();
    }
    else {
        responseArr = [];
    }
    return responseArr;
};
const supportTickets = async (user, statusArr, casenumber) => {
    let res;
    const resdataArr = [];
    if (statusArr && statusArr.length !== 0) {
        await Promise.all(statusArr.map(async (openstatus) => {
            res = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__.SupportPalBaseUsecase)().getAllTickets(user, openstatus, casenumber);
            res.data.map((resdata) => {
                resdataArr.push(resdata);
            });
        }));
    }
    else {
        res = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__.SupportPalBaseUsecase)().getAllTickets(user, null, casenumber);
        res.data.map((resdata) => {
            resdataArr.push(resdata);
        });
    }
    return resdataArr;
};


/***/ }),

/***/ "./src/api/customers/requirementForm/Mutations/editForm.ts":
/*!*****************************************************************!*\
  !*** ./src/api/customers/requirementForm/Mutations/editForm.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "editRequirementForm": () => (/* binding */ editRequirementForm),
/* harmony export */   "validateInput": () => (/* binding */ validateInput)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_3__);




let requirementFormResponseObj;
const editRequirementForm = async (_root, args, _context) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
    const { requirementformdetails, } = args;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticate)(_context, "CD");
        let result, response;
        await validateInput(requirementformdetails);
        const floorPlan = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.floor_plan;
        const lead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({ where: { mobilephone: user.customerphone } });
        const sfleadid = lead.sfid;
        floorPlan.id = sfleadid;
        if (((floorPlan.documents[0].data).match(/^(?:[A-Za-z\d+/]{4})*(?:[A-Za-z\d+/]{3}=|[A-Za-z\d+/]{2}==)?$/))) {
            const attachment = {
                key: floorPlan.documents[0].filename,
                contentType: floorPlan.documents[0].Content_Type,
                base64: floorPlan.documents[0].data,
                ispreorpost: 2,
                customer: user.customerid,
                leadid: lead.sfid
            };
            response = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__.UploadFileOnS3)(attachment);
            result = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__.uploadFloorPlanAtSalesForce)(floorPlan);
            if (((_a = result === null || result === void 0 ? void 0 : result.status) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "error") {
                return { code: 400, message: "Error Uploading Requirement Form" };
            }
        }
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.update({
            data: {
                home_type__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.home_type__c,
                area__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.area__c.toString(),
                scope_of_work__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.scope_of_work__c,
                civil_work__c: ((requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.civil_work__c) === "Yes") ? true : false,
                site_service_needed_for__c: (_b = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.site_service_needed_for__c) === null || _b === void 0 ? void 0 : _b.join(";"),
                interior_work_needed_for__c: (_c = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.interior_work_needed_for__c) === null || _c === void 0 ? void 0 : _c.join(";"),
                requirement_details__c: (_d = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.requirement_details__c) === null || _d === void 0 ? void 0 : _d.join(";"),
                property_usage__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.property_usage__c,
                where_are_you_currently_located__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.where_are_you_currently_located__c,
                when_would_you_like_to_have_the_home__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.when_would_you_like_to_have_the_home__c,
                which_language_are_you_most_comfortable__c: (_e = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.which_language_are_you_most_comfortable__c) === null || _e === void 0 ? void 0 : _e.join(";"),
                if_other_languages_please_specify__c: (_f = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.if_other_languages_please_specify__c) === null || _f === void 0 ? void 0 : _f.join(";"),
                who_will_be_staying_in_the_house__c: (_g = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.who_will_be_staying_in_the_house__c) === null || _g === void 0 ? void 0 : _g.join(";"),
                gender_of_first_kid__c: (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) ? (_h = requirementformdetails.kids_details[0]) === null || _h === void 0 ? void 0 : _h.gender : null,
                gender_of_second_kid__c: (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) ? (_j = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details[1]) === null || _j === void 0 ? void 0 : _j.gender : null,
                gender_of_third_kid__c: (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) ? (_k = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details[2]) === null || _k === void 0 ? void 0 : _k.gender : null,
                gender_of_fourth_kid__c: (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) ? (_l = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details[3]) === null || _l === void 0 ? void 0 : _l.gender : null,
                age_of_first_kid__c: (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) ? (_o = (_m = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details[0]) === null || _m === void 0 ? void 0 : _m.age) === null || _o === void 0 ? void 0 : _o.toString() : null,
                age_of_second_kid__c: (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) ? (_q = (_p = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details[1]) === null || _p === void 0 ? void 0 : _p.age) === null || _q === void 0 ? void 0 : _q.toString() : null,
                age_of_third_kid__c: (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) ? (_s = (_r = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details[2]) === null || _r === void 0 ? void 0 : _r.age) === null || _s === void 0 ? void 0 : _s.toString() : null,
                age_of_fourth_kid__c: (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) ? (_u = (_t = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details[3]) === null || _t === void 0 ? void 0 : _t.age) === null || _u === void 0 ? void 0 : _u.toString() : null,
                do_you_have_pets__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.do_you_have_pets__c,
                live__c: (_v = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.live__c) === null || _v === void 0 ? void 0 : _v.join(";"),
                others_for_live__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.others_for_live__c,
                work__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.work__c,
                eat__c: (_w = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.eat__c) === null || _w === void 0 ? void 0 : _w.join(";"),
                play__c: (_x = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.play__c) === null || _x === void 0 ? void 0 : _x.join(";"),
                others_for_play__c: requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.others_for_play__c,
                floor_plan_attachment_id__c: response ? response.id.toString() : lead.floor_plan_attachment_id__c
            }, where: { id: lead.id }
        });
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
            data: {
                requirementformuploaded: true
            }, where: { customerid: user.customerid }
        });
        requirementFormResponseObj = { code: 200, message: "Thank you for taking your time in filling the form. We will get back to you at the earliest." };
        return requirementFormResponseObj;
    }
    catch (error) {
        requirementFormResponseObj = { code: 400, message: error.message };
        return requirementFormResponseObj;
    }
};
const validateInput = async (requirementformdetails) => {
    if (!requirementformdetails.home_type__c) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Property type is required");
    }
    if (!requirementformdetails.scope_of_work__c) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Scope of work is required");
    }
    if (!requirementformdetails.interior_work_needed_for__c) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Interior work needed for is required");
    }
    if (!requirementformdetails.requirement_details__c) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Interior details is required");
    }
    if (!requirementformdetails.civil_work__c) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Do you need any site services is required");
    }
    if (!requirementformdetails.property_usage__c) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Property usage is required");
    }
    if (!requirementformdetails.where_are_you_currently_located__c) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Where are you currently located is required");
    }
    if (!requirementformdetails.which_language_are_you_most_comfortable__c) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Which language are you most comfortable in is required");
    }
    if (!requirementformdetails.floor_plan) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "floor plan is required");
    }
    if (typeof (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.area__c) !== "number") {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "floor area must be a number");
    }
    await validateKidsDetails(requirementformdetails);
};
const validateKidsDetails = async (requirementformdetails) => {
    var _a;
    if (requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) {
        await Promise.all((_a = requirementformdetails === null || requirementformdetails === void 0 ? void 0 : requirementformdetails.kids_details) === null || _a === void 0 ? void 0 : _a.map(element => {
            if (element.age) {
                if (typeof (element.age) !== "number") {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Kids age must be a number");
                }
            }
        }));
    }
};


/***/ }),

/***/ "./src/api/customers/requirementForm/queries.ts":
/*!******************************************************!*\
  !*** ./src/api/customers/requirementForm/queries.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRequirementForm": () => (/* binding */ getRequirementForm)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);



const getRequirementForm = async (root, args, context) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    let requirementFormResponseObj;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(context, "CD");
        const lead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({ where: { mobilephone: user.customerphone } });
        if (!lead) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "Lead not found");
        }
        const kidsArr = [];
        let obj;
        if (lead.gender_of_first_kid__c || lead.age_of_first_kid__c) {
            obj = {
                gender: lead.gender_of_first_kid__c,
                age: lead.age_of_first_kid__c
            };
            kidsArr.push(obj);
        }
        if (lead.gender_of_second_kid__c || lead.age_of_second_kid__c) {
            obj = {
                gender: lead.gender_of_second_kid__c,
                age: lead.age_of_second_kid__c
            };
            kidsArr.push(obj);
        }
        if (lead.gender_of_third_kid__c || lead.age_of_third_kid__c) {
            obj = {
                gender: lead.gender_of_third_kid__c,
                age: lead.age_of_third_kid__c
            };
            kidsArr.push(obj);
        }
        if (lead.gender_of_fourth_kid__c || lead.age_of_fourth_kid__c) {
            obj = {
                gender: lead.gender_of_fourth_kid__c,
                age: lead.age_of_fourth_kid__c
            };
            kidsArr.push(obj);
        }
        const getLeadFloorPlan = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findFirst({ where: { id: Number(lead.floor_plan_attachment_id__c) } });
        const requirementformdetails = {
            home_type__c: lead.home_type__c,
            area__c: lead.area__c,
            scope_of_work__c: lead.scope_of_work__c,
            interior_work_needed_for__c: (_a = lead.interior_work_needed_for__c) === null || _a === void 0 ? void 0 : _a.split(";"),
            where_are_you_currently_located__c: lead.where_are_you_currently_located__c,
            when_would_you_like_to_have_the_home__c: lead.when_would_you_like_to_have_the_home__c,
            which_language_are_you_most_comfortable__c: (_b = lead.which_language_are_you_most_comfortable__c) === null || _b === void 0 ? void 0 : _b.split(";"),
            if_other_languages_please_specify__c: (_c = lead.if_other_languages_please_specify__c) === null || _c === void 0 ? void 0 : _c.split(";"),
            who_will_be_staying_in_the_house__c: (_d = lead.who_will_be_staying_in_the_house__c) === null || _d === void 0 ? void 0 : _d.split(";"),
            kids_details: kidsArr,
            do_you_have_pets__c: lead.do_you_have_pets__c,
            live__c: (_e = lead.live__c) === null || _e === void 0 ? void 0 : _e.split(";"),
            others_for_live__c: lead.others_for_live__c,
            work__c: lead.work__c,
            eat__c: (_f = lead.eat__c) === null || _f === void 0 ? void 0 : _f.split(";"),
            play__c: (_g = lead.play__c) === null || _g === void 0 ? void 0 : _g.split(";"),
            others_for_play__c: lead.others_for_play__c,
            civil_work__c: lead.civil_work__c ? "Yes" : "No",
            requirement_details__c: (_h = lead.requirement_details__c) === null || _h === void 0 ? void 0 : _h.split(";"),
            property_usage__c: lead.property_usage__c,
            site_service_needed_for__c: (_j = lead.site_service_needed_for__c) === null || _j === void 0 ? void 0 : _j.split(";"),
            floor_plan: {
                id: getLeadFloorPlan === null || getLeadFloorPlan === void 0 ? void 0 : getLeadFloorPlan.leadid,
                documents: [
                    {
                        filename: getLeadFloorPlan === null || getLeadFloorPlan === void 0 ? void 0 : getLeadFloorPlan.filekey,
                        Content_Type: getLeadFloorPlan === null || getLeadFloorPlan === void 0 ? void 0 : getLeadFloorPlan.contenttype,
                        data: getLeadFloorPlan === null || getLeadFloorPlan === void 0 ? void 0 : getLeadFloorPlan.location,
                    }
                ]
            }
        };
        console.log("requirementformdetails", requirementformdetails);
        const Data = {
            requirementformdetails
        };
        requirementFormResponseObj = { code: 200, message: "success", data: Data };
        return requirementFormResponseObj;
    }
    catch (error) {
        requirementFormResponseObj = { code: 400, message: error.message };
        return requirementFormResponseObj;
    }
};


/***/ }),

/***/ "./src/api/customers/requirementForm/resolvers.ts":
/*!********************************************************!*\
  !*** ./src/api/customers/requirementForm/resolvers.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "requirementFormResolver": () => (/* binding */ requirementFormResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Mutations_editForm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mutations/editForm */ "./src/api/customers/requirementForm/Mutations/editForm.ts");
/* harmony import */ var _queries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queries */ "./src/api/customers/requirementForm/queries.ts");



const requirementFormResolver = {
    Query: {
        getRequirementForm: async (parent, _args, context) => (0,_queries__WEBPACK_IMPORTED_MODULE_2__.getRequirementForm)(parent, _args, context),
    },
    Mutation: {
        editRequirementForm: (parent, _args, context) => (0,_Mutations_editForm__WEBPACK_IMPORTED_MODULE_1__.editRequirementForm)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver
};


/***/ }),

/***/ "./src/api/customers/requirementForm/typedefs.ts":
/*!*******************************************************!*\
  !*** ./src/api/customers/requirementForm/typedefs.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "requirementFormTypedef": () => (/* binding */ requirementFormTypedef)
/* harmony export */ });
const requirementFormTypedef = `
    type Query {
        getRequirementForm: requirementFormResponse
    }
    type requirementFormResponse { 
        code:Int
        message: String
        data: JSON
    }

    type Mutation {
            editRequirementForm(
            requirementformdetails: JSON!,
            updated_at: DateTime): requirementFormResponse
    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/customers/resolvers.ts":
/*!****************************************!*\
  !*** ./src/api/customers/resolvers.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "customerResolver": () => (/* binding */ customerResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Mutations_login__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mutations/login */ "./src/api/customers/Mutations/login.ts");
/* harmony import */ var _Mutations_verifyOtp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutations/verifyOtp */ "./src/api/customers/Mutations/verifyOtp.ts");
/* harmony import */ var _Mutations_addCustomer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mutations/addCustomer */ "./src/api/customers/Mutations/addCustomer.ts");
/* harmony import */ var _Mutations_reIssueAccessTokenCD__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mutations/reIssueAccessTokenCD */ "./src/api/customers/Mutations/reIssueAccessTokenCD.ts");
/* harmony import */ var _customerSupport_Mutations_raiseTicket__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./customerSupport/Mutations/raiseTicket */ "./src/api/customers/customerSupport/Mutations/raiseTicket.ts");
/* harmony import */ var _customerSupport_Mutations_raiseComment__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./customerSupport/Mutations/raiseComment */ "./src/api/customers/customerSupport/Mutations/raiseComment.ts");
/* harmony import */ var _customerSupport_Queries_viewAllRaisedTickets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./customerSupport/Queries/viewAllRaisedTickets */ "./src/api/customers/customerSupport/Queries/viewAllRaisedTickets.ts");
/* harmony import */ var _Queries_getCustomerByAuth__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Queries/getCustomerByAuth */ "./src/api/customers/Queries/getCustomerByAuth.ts");
/* harmony import */ var _Mutations_updateCustomer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Mutations/updateCustomer */ "./src/api/customers/Mutations/updateCustomer.ts");
/* harmony import */ var _Mutations_updateCustomerDetails__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Mutations/updateCustomerDetails */ "./src/api/customers/Mutations/updateCustomerDetails.ts");
/* harmony import */ var _Mutations_updateCustomerSFID__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Mutations/updateCustomerSFID */ "./src/api/customers/Mutations/updateCustomerSFID.ts");
/* harmony import */ var _Mutations_updateCustomerOpportunityId__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Mutations/updateCustomerOpportunityId */ "./src/api/customers/Mutations/updateCustomerOpportunityId.ts");













const customerResolver = {
    Query: {
        viewAllRaisedTickets: async (parent, _args, context) => (0,_customerSupport_Queries_viewAllRaisedTickets__WEBPACK_IMPORTED_MODULE_7__.viewAllRaisedTickets)(parent, _args, context),
        getCustomerDetailsByAuth: async (parent, _args, context) => (0,_Queries_getCustomerByAuth__WEBPACK_IMPORTED_MODULE_8__.getCustomerDetailsByAuth)(parent, _args, context),
    },
    Mutation: {
        login: async (parent, _args, context) => (0,_Mutations_login__WEBPACK_IMPORTED_MODULE_1__.login)(parent, _args, context),
        verifyOtp: (parent, _args, context) => (0,_Mutations_verifyOtp__WEBPACK_IMPORTED_MODULE_2__.verifyOtp)(parent, _args, context),
        reIssueAccessTokenCD: (parent, _args, context) => (0,_Mutations_reIssueAccessTokenCD__WEBPACK_IMPORTED_MODULE_4__.reIssueAccessTokenCD)(parent, _args, context),
        addCustomers: (parent, _args, context) => (0,_Mutations_addCustomer__WEBPACK_IMPORTED_MODULE_3__.addCustomer)(parent, _args, context),
        raiseTicket: (parent, _args, context) => (0,_customerSupport_Mutations_raiseTicket__WEBPACK_IMPORTED_MODULE_5__.raiseTicket)(parent, _args, context),
        raiseComment: (parent, _args, context) => (0,_customerSupport_Mutations_raiseComment__WEBPACK_IMPORTED_MODULE_6__.raiseComment)(parent, _args, context),
        updateCustomerData: (parent, _args, context) => updateCustomerData(parent, _args, context),
        updateCustomerSFID: (parent, _args, context) => (0,_Mutations_updateCustomerSFID__WEBPACK_IMPORTED_MODULE_11__.updateCustomerSFID)(parent, _args, context),
        updateCustomerDetails: (parent, _args, context) => (0,_Mutations_updateCustomerDetails__WEBPACK_IMPORTED_MODULE_10__.updateCustomerDetails)(parent, _args, context),
        updateCustomers: (parent, _args, context) => (0,_Mutations_updateCustomer__WEBPACK_IMPORTED_MODULE_9__.updateCustomer)(parent, _args, context),
        updateCustomerOpportunityId: (parent, _args, context) => (0,_Mutations_updateCustomerOpportunityId__WEBPACK_IMPORTED_MODULE_12__.updateCustomerOpportunityId)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/customers/typedefs.ts":
/*!***************************************!*\
  !*** ./src/api/customers/typedefs.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "customerTypedefs": () => (/* binding */ customerTypedefs)
/* harmony export */ });
const customerTypedefs = `

type Address{
    addressid:Int
    city:String
    country:String
    street:String
    zip:String
    state:String
    addresstype:Int
    customerid:Int
}

type Customer {
  customerid: Int
  otp: Int
  generatedotptimestamp: String
  firstname: String
  lastname: String
  customeremail: String
  customerphone: String
  customertype:String
  salesforceid: String
  pancardno: String
  gstno: String
  odoocontactid: String
  addresses:[Address]
}

type responseCustomer{
    Customer: Customer
    projectid: Int
    clientid: String
    projectstatus: String
    smartsheetid: String
    quoteid: Int
    isnewpaymentproject: Boolean
}

type getCustomerDetailsByAuthResponse{
    code: Int
    message: String
    data: responseCustomer
}

input AddressToBeAdded{
    city:String
    country:String
    street:String
    zip:String
    state:String
    addresstype:Int
}

input CustomerToBeAdded{
    firstname: String
    lastname: String
    customeremail: String
    customerphone: String
    salesforceid: String
    pancardno: String
    gstno: String
    odoocontactid: String
    addresses:[AddressToBeAdded]
}

input CustomerToBeEdited{
    firstname: String
    lastname: String
    customeremail: String
    customerphone: String
    salesforceid: String
    pancardno: String
    gstno: String
    odoocontactid: String
}

type customerReponse{
    code:Int
    message:String
    data:Customer
}

type LoginResponse {
    code:Int!
    message:String!
}

type VerifyOTPResponse {
    code:Int!
    message:String!
    data: tokenResponseCD
}

type tokenResponseCD { 
    loginToken: String,
    refreshToken: String,
    email: String,
    customerName: String
}

type reIssueTokenResponse{
    code:Int!
    message:String!
    data: tokenResponseCD
}

type raiseTicketResponse { 
    code:Int
    message: String    
}

type viewAllTicketsResponse {
    code:Int
    data: [JSON]
    totalTickets: Int
    openTickets: Int
    closedTickets: Int
}

type Mutation{
    login(customerphone:String): LoginResponse,
    verifyOtp(customerphone:String,otp:String):VerifyOTPResponse
    reIssueAccessTokenCD(refreshToken: String!):reIssueTokenResponse
    addCustomers(customer:CustomerToBeAdded):customerReponse
    updateCustomers(customer:CustomerToBeAdded):customerReponse
    updateCustomerSFID(sfid:String,customerMobile:String):customerReponse
    updateCustomerData(sfid:String,customer:CustomerToBeEdited):customerReponse
    updateCustomerDetails(customerPhone:String,
                          customertype:String,
                          customeremail:String, 
                          fisrtname:String, 
                          lastname:String,
                          salesforeceid:String, 
                          odoocontactid:String,
                          address:[AddressToBeAdded],
                          gstno:String,
                          pancardno:String,
                          i10ingsttreatment:String,
                          dsacategory:String,
                          region:String):customerReponse
    updateCustomerOpportunityId(opportunityID:String,customerPhone:String):customerReponse
    raiseTicket(concerntype: String!
        subject: String!,
        description: String!,
        attachment: JSON,
        ticketbucket: Int
        ):raiseTicketResponse

    raiseComment(ticketId: Int!
        message: String,
        attachment: JSON,
        ):raiseTicketResponse
    
      
}

type Query {
    viewAllRaisedTickets(status: Int, casenumber: String, fromDate: String, toDate:String ): viewAllTicketsResponse
}

type Query{
    getCustomerDetailsByAuth:
    getCustomerDetailsByAuthResponse
}

scalar JSON
scalar DateTime
`;


/***/ }),

/***/ "./src/api/datasources.ts":
/*!********************************!*\
  !*** ./src/api/datasources.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dataSources": () => (/* binding */ dataSources)
/* harmony export */ });
/* harmony import */ var _paymentMicroservice_authentication_Mutation_AuthenticationToken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paymentMicroservice/authentication/Mutation/AuthenticationToken */ "./src/api/paymentMicroservice/authentication/Mutation/AuthenticationToken.ts");
/* harmony import */ var _paymentMicroservice_paymentRequest_Mutations_AddPaymentRequests__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./paymentMicroservice/paymentRequest/Mutations/AddPaymentRequests */ "./src/api/paymentMicroservice/paymentRequest/Mutations/AddPaymentRequests.ts");
/* harmony import */ var _paymentMicroservice_paymentRequest_Mutations_UpdatePaymentRequests__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paymentMicroservice/paymentRequest/Mutations/UpdatePaymentRequests */ "./src/api/paymentMicroservice/paymentRequest/Mutations/UpdatePaymentRequests.ts");
/* harmony import */ var _paymentMicroservice_paymentRequest_Mutations_DeletePaymentRequests__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./paymentMicroservice/paymentRequest/Mutations/DeletePaymentRequests */ "./src/api/paymentMicroservice/paymentRequest/Mutations/DeletePaymentRequests.ts");
/* harmony import */ var _paymentMicroservice_paymentReceipt_Mutation_AddPaymentReceipts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./paymentMicroservice/paymentReceipt/Mutation/AddPaymentReceipts */ "./src/api/paymentMicroservice/paymentReceipt/Mutation/AddPaymentReceipts.ts");
/* harmony import */ var _paymentMicroservice_paymentReceipt_Mutation_UpdatePaymentReceipts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./paymentMicroservice/paymentReceipt/Mutation/UpdatePaymentReceipts */ "./src/api/paymentMicroservice/paymentReceipt/Mutation/UpdatePaymentReceipts.ts");
/* harmony import */ var _paymentMicroservice_paymentReceipt_Mutation_DeletePaymentreceipts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./paymentMicroservice/paymentReceipt/Mutation/DeletePaymentreceipts */ "./src/api/paymentMicroservice/paymentReceipt/Mutation/DeletePaymentreceipts.ts");
/* harmony import */ var _paymentMicroservice_razorpay_Mutation_RazorpayGeneratePaymentLink__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./paymentMicroservice/razorpay/Mutation/RazorpayGeneratePaymentLink */ "./src/api/paymentMicroservice/razorpay/Mutation/RazorpayGeneratePaymentLink.ts");
/* harmony import */ var _paymentMicroservice_razorpay_Mutation_RazorpayWebhook__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./paymentMicroservice/razorpay/Mutation/RazorpayWebhook */ "./src/api/paymentMicroservice/razorpay/Mutation/RazorpayWebhook.ts");
/* harmony import */ var _paymentMicroservice_customer_Mutations_UpdateCustomer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./paymentMicroservice/customer/Mutations/UpdateCustomer */ "./src/api/paymentMicroservice/customer/Mutations/UpdateCustomer.ts");
/* harmony import */ var _paymentMicroservice_invoice_Mutation_GenerateInvoicenewflow__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./paymentMicroservice/invoice/Mutation/GenerateInvoicenewflow */ "./src/api/paymentMicroservice/invoice/Mutation/GenerateInvoicenewflow.ts");











const dataSources = () => ({
    AuthenticationToken: new _paymentMicroservice_authentication_Mutation_AuthenticationToken__WEBPACK_IMPORTED_MODULE_0__["default"](),
    AddPaymentRequests: new _paymentMicroservice_paymentRequest_Mutations_AddPaymentRequests__WEBPACK_IMPORTED_MODULE_1__["default"](),
    UpdatePaymentRequests: new _paymentMicroservice_paymentRequest_Mutations_UpdatePaymentRequests__WEBPACK_IMPORTED_MODULE_2__["default"](),
    DeletePaymentRequests: new _paymentMicroservice_paymentRequest_Mutations_DeletePaymentRequests__WEBPACK_IMPORTED_MODULE_3__["default"](),
    AddPaymentReceipts: new _paymentMicroservice_paymentReceipt_Mutation_AddPaymentReceipts__WEBPACK_IMPORTED_MODULE_4__["default"](),
    UpdatePaymentReceipts: new _paymentMicroservice_paymentReceipt_Mutation_UpdatePaymentReceipts__WEBPACK_IMPORTED_MODULE_5__["default"](),
    DeletePaymentReceipts: new _paymentMicroservice_paymentReceipt_Mutation_DeletePaymentreceipts__WEBPACK_IMPORTED_MODULE_6__["default"](),
    RazorpayGeneratePaymentLink: new _paymentMicroservice_razorpay_Mutation_RazorpayGeneratePaymentLink__WEBPACK_IMPORTED_MODULE_7__["default"](),
    RazorpayWebhook: new _paymentMicroservice_razorpay_Mutation_RazorpayWebhook__WEBPACK_IMPORTED_MODULE_8__["default"](),
    UpdateCustomer: new _paymentMicroservice_customer_Mutations_UpdateCustomer__WEBPACK_IMPORTED_MODULE_9__["default"](),
    GenerateInvoicenewflow: new _paymentMicroservice_invoice_Mutation_GenerateInvoicenewflow__WEBPACK_IMPORTED_MODULE_10__["default"](),
});


/***/ }),

/***/ "./src/api/dcSupport/Mutations/replyToTicketMessage.ts":
/*!*************************************************************!*\
  !*** ./src/api/dcSupport/Mutations/replyToTicketMessage.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replyToTicketMessage": () => (/* binding */ replyToTicketMessage)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/supportpal/SupportPalApi */ "./src/domain/services/supportpal/SupportPalApi.ts");


const replyToTicketMessage = async (root, args, context) => {
    let replyToTicketMessageResponseObj;
    const { ticketId, message, attachment } = args;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        const res = await replyTicketMessage(ticketId, user, message, attachment);
        replyToTicketMessageResponseObj = { code: 200, message: res.message, data: res.data };
        return replyToTicketMessageResponseObj;
    }
    catch (error) {
        replyToTicketMessageResponseObj = { code: 400, message: error.message };
        return replyToTicketMessageResponseObj;
    }
};
const replyTicketMessage = async (ticketId, user, message, attachment) => {
    const supportpalapi = new _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__["default"]();
    const response = await supportpalapi.postToSupportPalApi("ticket/message", {
        ticket_id: ticketId,
        text: message,
        user_id: String(user.supportpaloperatorid),
        attachment
    });
    return response;
};


/***/ }),

/***/ "./src/api/dcSupport/Mutations/updateTicketStatus.ts":
/*!***********************************************************!*\
  !*** ./src/api/dcSupport/Mutations/updateTicketStatus.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateTicketStatus": () => (/* binding */ updateTicketStatus)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/supportpal/SupportPalApi */ "./src/domain/services/supportpal/SupportPalApi.ts");


const updateTicketStatus = async (root, args, context) => {
    let updateTicketStatusResponseObj;
    const { ticketId, status } = args;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        const res = await updateTicket(user, ticketId, status);
        updateTicketStatusResponseObj = { code: 200, message: res.message, data: res.data };
        return updateTicketStatusResponseObj;
    }
    catch (error) {
        updateTicketStatusResponseObj = { code: 400, message: error.message };
        return updateTicketStatusResponseObj;
    }
};
const updateTicket = async (user, ticketId, status) => {
    const supportpalapi = new _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__["default"]();
    const response = await supportpalapi.updateToSupportPalApi("ticket/ticket/" + ticketId, {
        status,
    });
    return response;
};


/***/ }),

/***/ "./src/api/dcSupport/Queries/fetchTicketById.ts":
/*!******************************************************!*\
  !*** ./src/api/dcSupport/Queries/fetchTicketById.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fetchTicketById": () => (/* binding */ fetchTicketById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/supportpal/SupportPalApi */ "./src/domain/services/supportpal/SupportPalApi.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/supportpalBaseUseCase */ "./src/domain/services/baseUseCase/supportpalBaseUseCase.ts");




const fetchTicketById = async (root, args, context) => {
    var _a, _b;
    let FetchTicketByIdResponse;
    const { ticket_id } = args;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticateDdCd)(context);
        const supportPalCFInfo = (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__.SupportPalBaseUsecase)().getSupportpalCustomField();
        const res = await getTicketById(ticket_id);
        const obj = {
            ticketId: "",
            caseNumber: "",
            status: "",
            priority: "",
            subject: "",
            isClosed: false,
            createdDate: "",
            projectName: "",
            designerName: "",
            customerName: "",
            chmname: "",
            dueTime: "",
            typeBucket: "",
            issueType: "",
            paymentstage: ""
        };
        obj.ticketId = res.data.id;
        obj.caseNumber = res.data.number;
        obj.status = res.data.status.name;
        obj.priority = res.data.priority.name;
        obj.subject = res.data.subject;
        if ((_a = res.data.customfields) === null || _a === void 0 ? void 0 : _a.length) {
            await Promise.all(res.data.customfields.map(async (customfield) => {
                switch (customfield.field_id) {
                    case 27:
                        obj.projectName = customfield.value;
                        break;
                    case 14:
                        const customfieldvalue = supportPalCFInfo[19];
                        obj.paymentstage = customfieldvalue;
                        break;
                    case 21:
                        obj.typeBucket = customfield.value;
                        break;
                    case 13:
                        const designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({ where: { designcafeemail: customfield.value } });
                        if (designer) {
                            obj.designerName = `${designer.firstname}` + " " + `${designer.lastname}`;
                        }
                        else {
                            obj.designerName = "";
                        }
                        break;
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                        obj.issueType = customfield.value;
                        break;
                }
            }));
        }
        console.log("here");
        const customerName = getCustomerName(res.data);
        obj.customerName = customerName;
        if (res.data.assigned[0]) {
            obj.chmname = `${res.data.assigned[0].firstname}` + " " + `${(_b = res.data.assigned[0]) === null || _b === void 0 ? void 0 : _b.lastname}`;
        }
        else {
            obj.chmname = "";
        }
        const createdDate = new Date(0);
        createdDate.setUTCSeconds(res.data.created_at);
        obj.createdDate = createdDate.toISOString();
        const dueDate = new Date(0);
        dueDate.setUTCSeconds(res.data.due_time);
        obj.dueTime = dueDate.toISOString();
        FetchTicketByIdResponse = { code: 200, data: obj };
        return FetchTicketByIdResponse;
    }
    catch (error) {
        FetchTicketByIdResponse = { code: 400, message: error.message };
        return FetchTicketByIdResponse;
    }
};
const getTicketById = async (ticketId) => {
    const url = "ticket/ticket/" + ticketId;
    const supportpalapi = new _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__["default"]();
    const ticket = await supportpalapi.getFromSupportPalApi(url);
    return ticket;
};
const getCustomerName = (data) => {
    const firstname = data.user.firstname ? data.user.firstname.trim() : "";
    const lastname = data.user.lastname ? data.user.lastname.trim() : "";
    return `${firstname ? firstname + " " : ""}${lastname}`;
};


/***/ }),

/***/ "./src/api/dcSupport/Queries/fetchTicketMessage.ts":
/*!*********************************************************!*\
  !*** ./src/api/dcSupport/Queries/fetchTicketMessage.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fetchTicketMessage": () => (/* binding */ fetchTicketMessage)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/supportpalBaseUseCase */ "./src/domain/services/baseUseCase/supportpalBaseUseCase.ts");
var __asyncValues = (undefined && undefined.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};


const fetchTicketMessage = async (root, args, context) => {
    var e_1, _a, e_2, _b;
    var _c, _d, _e;
    let FetchTicketMessageResponse;
    const { ticket_id } = args;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticateDdCd)(context);
        const commentsArr = [];
        let description;
        const res = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_1__.SupportPalBaseUsecase)().getTicketMessages(ticket_id);
        if (res && res.status === "success" && res.data.length) {
            if ((_c = res.data[0]) === null || _c === void 0 ? void 0 : _c.purified_text) {
                description = (_d = res.data[0]) === null || _d === void 0 ? void 0 : _d.purified_text.replace(/(<([^>]+)>)/ig, '');
            }
        }
        const dataArr = res.data;
        try {
            for (var dataArr_1 = __asyncValues(dataArr), dataArr_1_1; dataArr_1_1 = await dataArr_1.next(), !dataArr_1_1.done;) {
                const data = dataArr_1_1.value;
                const imageArr = [];
                const date = new Date(0);
                date.setUTCSeconds(data.created_at);
                try {
                    for (var _f = (e_2 = void 0, __asyncValues(data === null || data === void 0 ? void 0 : data.attachments)), _g; _g = await _f.next(), !_g.done;) {
                        const element = _g.value;
                        imageArr.push({
                            name: element === null || element === void 0 ? void 0 : element.original_name,
                            type: (_e = element === null || element === void 0 ? void 0 : element.upload) === null || _e === void 0 ? void 0 : _e.mime,
                            data: element === null || element === void 0 ? void 0 : element.direct_frontend_url,
                        });
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) await _b.call(_f);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                let str;
                if (data === null || data === void 0 ? void 0 : data.purified_text) {
                    str = data === null || data === void 0 ? void 0 : data.purified_text.replace(/(<([^>]+)>)/ig, '');
                }
                commentsArr.push({
                    message: str ? str : "",
                    by: data.user_name,
                    type: data.type,
                    timesent: date,
                    imageArr,
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (dataArr_1_1 && !dataArr_1_1.done && (_a = dataArr_1.return)) await _a.call(dataArr_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        FetchTicketMessageResponse = { code: 200, message: "success", description: description, comments: commentsArr };
        return FetchTicketMessageResponse;
    }
    catch (error) {
        FetchTicketMessageResponse = { code: 400, message: error.message };
        return FetchTicketMessageResponse;
    }
};


/***/ }),

/***/ "./src/api/dcSupport/Queries/fetchTickets.ts":
/*!***************************************************!*\
  !*** ./src/api/dcSupport/Queries/fetchTickets.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fetchTickets": () => (/* binding */ fetchTickets),
/* harmony export */   "getTicketStatus": () => (/* binding */ getTicketStatus)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/supportpalBaseUseCase */ "./src/domain/services/baseUseCase/supportpalBaseUseCase.ts");
/* harmony import */ var _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../domain/enumerations/ProfileTypeEnumUtil */ "./src/domain/enumerations/ProfileTypeEnumUtil.ts");





const fetchTickets = async (root, args, context) => {
    let fetchTicketsResponseObj;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticate)(context, "DD");
        let resdataArr = [];
        let responseArr = [];
        const supportPalCFInfo = (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__.SupportPalBaseUsecase)().getSupportpalCustomField();
        const pagesize = await getpageSize(args.pageSize);
        const TicketStatus = await getTicketStatus(args.status);
        const pageRequestBody = {
            pageSize: pagesize,
            pageIndex: args.pageIndex,
        };
        switch (user.profileid) {
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.IN_HOUSE_DESIGNER:
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.DESIGN_PARTNER:
                resdataArr = await supportData(13, user, null, TicketStatus, args.searchKey, args.searchValue, pageRequestBody);
                break;
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.ASSOCIATE_STUDIO_MANAGER:
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.STUDIO_MANAGER:
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.STUDIO_MANAGER_DP:
                const supportTeam = [];
                const teams = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.findMany({
                    where: { userid: user.userid },
                });
                await Promise.all(teams.map(async (team) => {
                    const teamres = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findFirst({
                        where: { id: team.teamid },
                    });
                    const supportTeamId = supportPalCFInfo["TEAM_" + teamres.name];
                    supportTeam.push(supportTeamId);
                }));
                resdataArr = await supportData(26, user, supportTeam, TicketStatus, args.searchKey, args.searchValue, pageRequestBody);
                break;
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.SYSTEM_ADMINISTRATOR:
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.ALL_INDIA_BUSINESS_HEAD:
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.CHM_MANAGER:
                resdataArr = await supportData(null, null, null, TicketStatus, args.searchKey, args.searchValue, pageRequestBody);
                break;
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.CENTER_DELIVERY_HEAD:
                const supportCenter = [];
                const centers = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_experiencecenters.findMany({
                    where: { userid: user.userid },
                });
                await Promise.all(centers.map(async (center) => {
                    const centerres = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findFirst({
                        where: { centerid: center.centerid },
                    });
                    const supportCenterId = supportPalCFInfo[centerres.name];
                    supportCenter.push(supportCenterId);
                }));
                resdataArr = await supportData(22, user, supportCenter, TicketStatus, args.searchKey, args.searchValue, pageRequestBody);
                break;
            case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.CITY_DELIVERY_HEAD:
                const supportCity = [];
                const cities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_city.findMany({
                    where: { userid: user.userid },
                });
                await Promise.all(cities.map(async (city) => {
                    const cityres = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findFirst({
                        where: { id: city.cityid },
                    });
                    const supportCityId = supportPalCFInfo[cityres.name];
                    supportCity.push(supportCityId);
                }));
                resdataArr = await supportData(23, user, supportCity, TicketStatus, args.searchKey, args.searchValue, pageRequestBody);
                break;
            default:
                resdataArr = await supportData(user.supportpaloperatorid, user, null, TicketStatus, args.searchKey, args.searchValue, pageRequestBody);
                break;
        }
        let dataArr;
        if (resdataArr.length) {
            dataArr = resdataArr;
        }
        else {
            fetchTicketsResponseObj = { code: 200, data: [] };
            return fetchTicketsResponseObj;
        }
        await Promise.all(dataArr.map(async (data) => {
            var _a;
            const obj = {
                ticketId: "",
                caseNumber: "",
                status: "",
                subject: "",
                isClosed: false,
                createdDate: "",
                projectName: "",
                designerName: "",
                customerName: "",
                chmname: "",
            };
            obj.ticketId = data.id;
            obj.caseNumber = data.number;
            obj.status = data.status.name;
            obj.subject = data.subject;
            await Promise.all(data.customfields.map(async (customfield) => {
                switch (customfield.field_id) {
                    case 27:
                        obj.projectName = customfield.value;
                        break;
                    case 13:
                        const designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                            where: { designcafeemail: customfield.value },
                        });
                        if (designer) {
                            obj.designerName =
                                `${designer.firstname}` + " " + `${designer.lastname}`;
                        }
                        else {
                            obj.designerName = "";
                        }
                        break;
                }
            }));
            const customerName = getCustomerName(data);
            obj.customerName = customerName;
            if (data.assigned[0]) {
                obj.chmname =
                    `${data.assigned[0].firstname}` +
                        " " +
                        `${(_a = data.assigned[0]) === null || _a === void 0 ? void 0 : _a.lastname}`;
            }
            else {
                obj.chmname = "";
            }
            obj.createdDate = new Date(data.created_at * 1000).toDateString();
            responseArr.push(obj);
        }));
        responseArr = await reverse(responseArr);
        fetchTicketsResponseObj = { code: 200, data: responseArr };
        return fetchTicketsResponseObj;
    }
    catch (error) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, error);
    }
};
const reverse = async (responseArr) => {
    if (responseArr.length) {
        responseArr.reverse();
    }
    else {
        responseArr = [];
    }
    return responseArr;
};
const supportData = async (id, user, supportdata, statusArr, searchKey, searchValue, pageRequestBody) => {
    let res;
    let resdataArr = [];
    if (supportdata && supportdata.length !== 0) {
        await Promise.all(supportdata.map(async (supportreq) => {
            if (statusArr && statusArr.length !== 0) {
                statusArr.map(async (statusreq) => {
                    res = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__.SupportPalBaseUsecase)().getAllTicketsBasedOnUser(id, user, supportreq, statusreq, searchKey, searchValue, pageRequestBody);
                    res.data.map((resdata) => {
                        resdataArr.push(resdata);
                    });
                });
            }
            else {
                res = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__.SupportPalBaseUsecase)().getAllTicketsBasedOnUser(id, user, supportreq, null, searchKey, searchValue, pageRequestBody);
                res.data.map((resdata) => {
                    resdataArr.push(resdata);
                });
            }
        }));
    }
    else {
        if (statusArr && statusArr.length !== 0) {
            await Promise.all(statusArr.map(async (statusreq) => {
                res = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__.SupportPalBaseUsecase)().getAllTicketsBasedOnUser(id, user, null, statusreq, searchKey, searchValue, pageRequestBody);
                res.data.map((resdata) => {
                    resdataArr.push(resdata);
                });
            }));
        }
        else {
            res = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__.SupportPalBaseUsecase)().getAllTicketsBasedOnUser(id, user, null, null, searchKey, searchValue, pageRequestBody);
            res.data.map((resdata) => {
                resdataArr.push(resdata);
            });
        }
    }
    return resdataArr;
};
const getpageSize = async (pagesizeinreq) => {
    let pagesize;
    if (!pagesizeinreq) {
        pagesize = 50;
    }
    else {
        pagesize = pagesizeinreq;
    }
    return pagesize;
};
const getTicketStatus = async (status) => {
    const TicketStatus = [];
    if (status) {
        if (status === 1) {
            TicketStatus.push(1, 3, 4, 5, 6);
        }
        else if (status === 2) {
            TicketStatus.push(2);
        }
        else {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Invalid status");
        }
    }
    return TicketStatus;
};
const getCustomerName = (data) => {
    const firstname = data.user.firstname ? data.user.firstname.trim() : "";
    const lastname = data.user.lastname ? data.user.lastname.trim() : "";
    return `${firstname ? firstname + " " : ""}${lastname}`;
};


/***/ }),

/***/ "./src/api/dcSupport/Queries/webHookTicket.ts":
/*!****************************************************!*\
  !*** ./src/api/dcSupport/Queries/webHookTicket.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "webHookTicket": () => (/* binding */ webHookTicket)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/supportpal/SupportPalApi */ "./src/domain/services/supportpal/SupportPalApi.ts");
/* harmony import */ var _domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/supportpalBaseUseCase */ "./src/domain/services/baseUseCase/supportpalBaseUseCase.ts");
/* harmony import */ var _domain_enumerations_ProjectStageEnums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../domain/enumerations/ProjectStageEnums */ "./src/domain/enumerations/ProjectStageEnums.ts");




const webHookTicket = async (root, args, context) => {
    let webHookResponse;
    const { ticket_id } = args;
    try {
        const url = "ticket/ticket/" + ticket_id;
        const supportpalapi = new _domain_services_supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__["default"]();
        const gettickets = await supportpalapi.getFromSupportPalApi(url);
        const respone = gettickets;
        const data = respone.data;
        const supportPalCFInfo = (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_2__.SupportPalBaseUsecase)().getSupportpalCustomField();
        const searchResult = data.customfields.filter(function (it) {
            return it.field_id === supportPalCFInfo.cf_clientidPk;
        });
        if (searchResult.length > 0) {
            let chm, designer, projectname, teamName, expCenter, designerEmail;
            const clientID = searchResult[0].value;
            const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({ where: { projectid: clientID } });
            if (project) {
                if (project.experiencecenterid) {
                    const expCenterResult = await getExperienceCenterInfo(project.experiencecenterid);
                    expCenter = expCenterResult.name;
                    expCenter = (supportPalCFInfo[expCenter] === undefined) ? '' : supportPalCFInfo[expCenter];
                }
                if (project.designstudioid) {
                    const teamResult = await getTeamInfo(project.designstudioid);
                    teamName = teamResult.name;
                    teamName = (supportPalCFInfo['TEAM_' + teamName] === undefined) ? '' : supportPalCFInfo['TEAM_' + teamName];
                }
                if (project.designerid) {
                    designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                        where: { userid: project.designerid }
                    });
                    if (designer) {
                        designerEmail = designer.designcafeemail;
                    }
                }
                if (project.chmid) {
                    chm = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                        where: { userid: project.chmid }
                    });
                }
                projectname = project.projectname;
            }
            let chmname;
            let chmId;
            if (chm) {
                chmname = (`${chm.firstname}` + ' ' + `${chm.lastname}`).trim();
                if (!chm.supportpaloperatorid) {
                    chm.supportpaloperatorid = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_2__.SupportPalBaseUsecase)().getOrAddOperatorAndReturnId(chm.designcafeemail, chmname, 3);
                    chmId = chm.supportpaloperatorid;
                    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.update({
                        data: chm, where: { userid: chm.userid }
                    });
                }
                else {
                    chmId = chm.supportpaloperatorid;
                }
            }
            const postTicket = {
                assignedto: [chmId],
                customfield: {
                    [supportPalCFInfo.cf_projectNamePk]: projectname,
                    [supportPalCFInfo.cf_team_name]: teamName,
                    [supportPalCFInfo.cf_experienceCenterPk]: expCenter,
                    [supportPalCFInfo.cf_assigned_designer]: designerEmail
                },
                department: process.env.supportPalDepartment,
            };
            console.log('POST DATA=====', postTicket);
            const tickets = await supportpalapi.updateToSupportPalApi("ticket/ticket/" + ticket_id, postTicket);
            const res = tickets;
            console.log('RESPONSE DATA=====', res);
        }
        webHookResponse = {
            code: 200,
            message: "success",
        };
        return webHookResponse;
    }
    catch (error) {
        webHookResponse = { code: 400, message: error.message };
        return webHookResponse;
    }
};
const getExperienceCenterInfo = async (experiencecenterid) => {
    return _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findFirst({ where: { centerid: experiencecenterid } });
};
const getTeamInfo = async (teamid) => {
    return _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findFirst({ where: { id: teamid } });
};
const getCurrentStage = async (project) => {
    let currentStage;
    if (!project) {
        currentStage = "Pre 5%";
    }
    else {
        if (project.currentmilestone) {
            if (project.currentmilestone === "Handover" && project.projectstatus.toLowerCase() === "completed") {
                currentStage = "Post Handover";
            }
            else {
                currentStage = await _domain_enumerations_ProjectStageEnums__WEBPACK_IMPORTED_MODULE_3__.ProjectStageEnumUtil.getCurrentMilestone(project.currentmilestone);
            }
        }
    }
    return currentStage;
};


/***/ }),

/***/ "./src/api/dcSupport/resolvers.ts":
/*!****************************************!*\
  !*** ./src/api/dcSupport/resolvers.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dcSupportResolver": () => (/* binding */ dcSupportResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _dcSupport_Mutations_replyToTicketMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dcSupport/Mutations/replyToTicketMessage */ "./src/api/dcSupport/Mutations/replyToTicketMessage.ts");
/* harmony import */ var _dcSupport_Mutations_updateTicketStatus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dcSupport/Mutations/updateTicketStatus */ "./src/api/dcSupport/Mutations/updateTicketStatus.ts");
/* harmony import */ var _Queries_fetchTickets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Queries/fetchTickets */ "./src/api/dcSupport/Queries/fetchTickets.ts");
/* harmony import */ var _Queries_fetchTicketById__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Queries/fetchTicketById */ "./src/api/dcSupport/Queries/fetchTicketById.ts");
/* harmony import */ var _dcSupport_Queries_fetchTicketMessage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dcSupport/Queries/fetchTicketMessage */ "./src/api/dcSupport/Queries/fetchTicketMessage.ts");
/* harmony import */ var _dcSupport_Queries_webHookTicket__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dcSupport/Queries/webHookTicket */ "./src/api/dcSupport/Queries/webHookTicket.ts");







const dcSupportResolver = {
    Query: {
        fetchTickets: async (parent, _args, context) => (0,_Queries_fetchTickets__WEBPACK_IMPORTED_MODULE_3__.fetchTickets)(parent, _args, context),
        fetchTicketById: async (parent, _args, context) => (0,_Queries_fetchTicketById__WEBPACK_IMPORTED_MODULE_4__.fetchTicketById)(parent, _args, context),
        fetchTicketMessage: async (parent, _args, context) => (0,_dcSupport_Queries_fetchTicketMessage__WEBPACK_IMPORTED_MODULE_5__.fetchTicketMessage)(parent, _args, context),
        webHookTicket: async (parent, _args, context) => (0,_dcSupport_Queries_webHookTicket__WEBPACK_IMPORTED_MODULE_6__.webHookTicket)(parent, _args, context),
    },
    Mutation: {
        replyToTicketMessage: (parent, _args, context) => (0,_dcSupport_Mutations_replyToTicketMessage__WEBPACK_IMPORTED_MODULE_1__.replyToTicketMessage)(parent, _args, context),
        updateTicketStatus: (parent, _args, context) => (0,_dcSupport_Mutations_updateTicketStatus__WEBPACK_IMPORTED_MODULE_2__.updateTicketStatus)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver
};


/***/ }),

/***/ "./src/api/dcSupport/typedefs.ts":
/*!***************************************!*\
  !*** ./src/api/dcSupport/typedefs.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dcSupportTypedef": () => (/* binding */ dcSupportTypedef)
/* harmony export */ });
const dcSupportTypedef = `
   
    type Query {
        webHookTicket(ticket_id: Int!): WebHookResponse
        fetchTicketMessage(ticket_id:Int!,offset: Int,limit: Int): FetchTicketMessageResponse
        fetchTickets(status:Int,searchKey: String, searchValue: String, pageSize:Int,pageIndex: Int): FetchTicketResponse
        fetchTicketById(ticket_id: Int!):FetchTicketByIdResponse
    }
    type WebHookResponse { 
        code:Int
        message: String    
    }
    type FetchTicketResponse { 
        code:Int
        message: String
        data:[JSON]   
    }
    type FetchTicketByIdResponse { 
        code:Int
        data:JSON   
    }
    type FetchTicketMessageResponse { 
        code:Int
        message: String
        description: String
        comments: [JSON]
    }
    type replyToTicketMessageResponse { 
        code:Int
        message: String
        data: JSON
    }

    type updateTicketStatusResponse { 
        code:Int
        message: String
        data: JSON
    }

    type Mutation {
        updateTicketStatus(ticketId: Int!
            status: Int,
            ):updateTicketStatusResponse

            replyToTicketMessage(ticketId: Int!
            message: String
            attachment: JSON
            ):replyToTicketMessageResponse
    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/departments/Queries/getAllDepartments.ts":
/*!**********************************************************!*\
  !*** ./src/api/departments/Queries/getAllDepartments.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAllDepartments": () => (/* binding */ getAllDepartments)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");


const getAllDepartments = async () => {
    try {
        const fetchedDepartment = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_department.findMany();
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 200;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = "Success";
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.data = fetchedDepartment;
    }
    catch (e) {
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = e.message;
    }
    return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
};


/***/ }),

/***/ "./src/api/departments/resolvers.ts":
/*!******************************************!*\
  !*** ./src/api/departments/resolvers.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "departmentResolver": () => (/* binding */ departmentResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_getAllDepartments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/getAllDepartments */ "./src/api/departments/Queries/getAllDepartments.ts");


const departmentResolver = {
    Query: {
        getAllDepartments: async () => (0,_Queries_getAllDepartments__WEBPACK_IMPORTED_MODULE_1__.getAllDepartments)()
    },
    Mutation: {},
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/departments/typedefs.ts":
/*!*****************************************!*\
  !*** ./src/api/departments/typedefs.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "departmentTypedef": () => (/* binding */ departmentTypedef)
/* harmony export */ });
const departmentTypedef = `
    type Department{
        departmentid:Int
        name:String
        status:Boolean
        create_at:DateTime
        updated_at:DateTime
    }

    type getDepartmentResponse{
        code:Int
        message:String
        data:[Department]
    }

    type Query {
        getAllDepartments: getDepartmentResponse
    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/emailNotification/Mutations/triggerEmailFromSF.ts":
/*!*******************************************************************!*\
  !*** ./src/api/emailNotification/Mutations/triggerEmailFromSF.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "triggerEmail": () => (/* binding */ triggerEmail)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");



var StageName;
(function (StageName) {
    StageName["MEETING_SCHEDULED"] = "Meeting Scheduled";
    StageName["MEETING_CONFIRMED"] = "Meeting Confirmed";
    StageName["CONVERTED"] = "Converted";
    StageName["MEETING_DONE"] = "Meeting Done";
    StageName["PROPOSAL_SENT"] = "Proposal Sent";
    StageName["FOLLOW_UP"] = "Follow Up";
    StageName["DISCUSSION"] = "Discussion";
    StageName["AWAITING_CLOSURE"] = "Awaiting Closure";
    StageName["CLOSED_WON"] = "Closed Won";
    StageName["CLOSED_LOST"] = "Closed Lost";
})(StageName || (StageName = {}));
var SlugName;
(function (SlugName) {
    SlugName["NOTIFYLEADSTAGE"] = "notify_lead_stage";
    SlugName["NOTIFYLEADCONVERTED"] = "notify_lead_converted";
    SlugName["NOTIFYOPPORTUNITYSTAGE"] = "notify_opportunity_stage";
    SlugName["NOTIFYCLOSEDWON"] = "notify_closed_won";
    SlugName["NOTIFYCLOSEDLOST"] = "notify_closed_lost";
})(SlugName || (SlugName = {}));
const triggerEmail = async (root, args, context) => {
    var _a;
    try {
        const { leadsfid, stagename, opportunitysfid } = args;
        let lead, opportunity, designer, studioManager, cc;
        let leadUrl, opportunityUrl;
        if (leadsfid) {
            lead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({ where: { sfid: leadsfid } });
            if (lead.design_user__c) {
                designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                    where: { salesforceuserid: lead.design_user__c },
                });
            }
            leadUrl = process.env.upcomingLeadsUrl + leadsfid + "&leadid=" + lead.id;
        }
        if (opportunitysfid) {
            opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
                where: { sfid: opportunitysfid },
            });
            lead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({ where: { sfid: opportunity.lead_id__c } });
            if (opportunity.design_user__c) {
                designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                    where: { salesforceuserid: opportunity.design_user__c },
                });
            }
            opportunityUrl = process.env.completedLeadsUrl + opportunity.lead_id__c + "&oppourtunityId=" + opportunitysfid + "&leadid=" + lead.id;
        }
        if (designer) {
            studioManager = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({
                where: { userid: designer.reportingmanager },
            });
        }
        let slugname;
        switch (stagename) {
            case StageName.MEETING_SCHEDULED:
            case StageName.MEETING_CONFIRMED:
                slugname = SlugName.NOTIFYLEADSTAGE;
                break;
            case StageName.CONVERTED:
                slugname = SlugName.NOTIFYLEADCONVERTED;
                break;
            case StageName.MEETING_DONE:
            case StageName.PROPOSAL_SENT:
            case StageName.FOLLOW_UP:
            case StageName.DISCUSSION:
            case StageName.AWAITING_CLOSURE:
                slugname = SlugName.NOTIFYOPPORTUNITYSTAGE;
                break;
            case StageName.CLOSED_WON:
                slugname = SlugName.NOTIFYCLOSEDWON;
                cc = studioManager === null || studioManager === void 0 ? void 0 : studioManager.designcafeemail;
                break;
            case StageName.CLOSED_LOST:
                slugname = SlugName.NOTIFYCLOSEDLOST;
                break;
        }
        if (designer && designer.designcafeemail) {
            const notificationTemplate = await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.callExternalAPIWithPost)("https://cms.designcafe.com/graphqlm", (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.queryForFetchingRemindersTemplate)(slugname));
            console.log(notificationTemplate);
            if (notificationTemplate) {
                const data = (_a = notificationTemplate === null || notificationTemplate === void 0 ? void 0 : notificationTemplate.data) === null || _a === void 0 ? void 0 : _a.reminders.data[0].attributes;
                if (data.emailActivate) {
                    const to = designer.designcafeemail;
                    const subject = data.label;
                    const content = data.email_template;
                    const emailContent = content
                        .replace("$Designer", designer === null || designer === void 0 ? void 0 : designer.firstname)
                        .replace("$leadurl", leadUrl)
                        .replace("$opportunityurl", opportunityUrl)
                        .replace("$customer", opportunity === null || opportunity === void 0 ? void 0 : opportunity.name)
                        .replace("$opportunityname", opportunity === null || opportunity === void 0 ? void 0 : opportunity.name);
                    await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__.triggerEmailNotification)(to, subject, emailContent, cc);
                }
            }
            return { code: 200, message: "Email sent successfully" };
        }
        else {
            return { code: 400, message: "No designer found to send email" };
        }
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/emailNotification/resolver.ts":
/*!***********************************************!*\
  !*** ./src/api/emailNotification/resolver.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trigerEmailResolver": () => (/* binding */ trigerEmailResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Mutations_triggerEmailFromSF__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mutations/triggerEmailFromSF */ "./src/api/emailNotification/Mutations/triggerEmailFromSF.ts");


const trigerEmailResolver = {
    Mutation: {
        triggerEmail: async (parent, _args, context) => (0,_Mutations_triggerEmailFromSF__WEBPACK_IMPORTED_MODULE_1__.triggerEmail)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/emailNotification/typedef.ts":
/*!**********************************************!*\
  !*** ./src/api/emailNotification/typedef.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "triggerEmailTypedef": () => (/* binding */ triggerEmailTypedef)
/* harmony export */ });
const triggerEmailTypedef = `

type emailResponse { 
    code:Int
    message: String
}

type Mutation {
    triggerEmail(leadsfid:String,stagename:String,opportunitysfid:String):emailResponse
}

scalar DateTime
`;


/***/ }),

/***/ "./src/api/experienceCenter/mutations.ts":
/*!***********************************************!*\
  !*** ./src/api/experienceCenter/mutations.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addExperienceCenter": () => (/* binding */ addExperienceCenter),
/* harmony export */   "updateExperienceCenter": () => (/* binding */ updateExperienceCenter)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../prismaConfig */ "./src/prismaConfig.ts");

const addExperienceCenter = async (root, args, context) => {
    let experienceCenterResponseObj;
    const { name, odoo_id, centerhead, city, ectype, address } = args;
    try {
        const EC = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.create({
            data: {
                name,
                odoo_id,
                created_at: new Date(),
                updated_at: new Date(),
                ectype,
                address,
                centerhead,
                city
            },
        });
        const experienceCenter = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findMany({
            where: { centerid: EC.centerid },
            include: {
                users: true,
                cities: true
            }
        });
        let ExperienceCenter = await getExperienceCenter(experienceCenter);
        ExperienceCenter = ExperienceCenter.Data;
        experienceCenterResponseObj = { code: 200, message: "success", data: ExperienceCenter };
        return experienceCenterResponseObj;
    }
    catch (error) {
        experienceCenterResponseObj = { code: 400, message: error.message };
        return experienceCenterResponseObj;
    }
};
const updateExperienceCenter = async (root, args, context) => {
    let experienceCenterResponseObj;
    const { name, centerid, odoo_id, centerhead, city, ectype, address } = args;
    try {
        const EC = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.update({
            data: {
                name,
                odoo_id,
                updated_at: new Date(),
                ectype,
                address,
                centerhead,
                city
            }, where: { centerid: centerid }
        });
        const experienceCenter = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findMany({
            where: { centerid: EC.centerid },
            include: {
                users: true,
                cities: true
            }
        });
        let ExperienceCenter = await getExperienceCenter(experienceCenter);
        ExperienceCenter = ExperienceCenter.Data;
        experienceCenterResponseObj = { code: 200, message: "success", data: ExperienceCenter };
        return experienceCenterResponseObj;
    }
    catch (error) {
        experienceCenterResponseObj = { code: 400, message: error.message };
        return experienceCenterResponseObj;
    }
};
const getExperienceCenter = async (experienceCenter) => {
    return {
        Data: experienceCenter.map((experiencecenter) => {
            return Object.assign(Object.assign({}, experiencecenter), { city: experiencecenter.cities, centerhead: experiencecenter.users });
        })
    };
};


/***/ }),

/***/ "./src/api/experienceCenter/queries.ts":
/*!*********************************************!*\
  !*** ./src/api/experienceCenter/queries.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getExperienceCenterById": () => (/* binding */ getExperienceCenterById),
/* harmony export */   "getExperienceCenters": () => (/* binding */ getExperienceCenters)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../prismaConfig */ "./src/prismaConfig.ts");

const getExperienceCenters = async () => {
    let experienceCenterResponseObj;
    try {
        const experienceCenters = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findMany({
            include: {
                cities: true,
                users: true
            }
        });
        let ExperienceCenters = await getExperienceCenter(experienceCenters);
        ExperienceCenters = ExperienceCenters.Data;
        experienceCenterResponseObj = { code: 200, message: "success", data: ExperienceCenters };
        return experienceCenterResponseObj;
    }
    catch (error) {
        experienceCenterResponseObj = { code: 400, message: error.message };
        return experienceCenterResponseObj;
    }
};
const getExperienceCenterById = async (root, args, context) => {
    let experienceCenterResponseObj;
    try {
        const experienceCenter = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findMany({
            where: { centerid: args.centerid }, include: {
                cities: true,
                users: true
            }
        });
        let ExperienceCenter = await getExperienceCenter(experienceCenter);
        ExperienceCenter = ExperienceCenter.Data;
        experienceCenterResponseObj = { code: 200, message: "success", data: ExperienceCenter };
        return experienceCenterResponseObj;
    }
    catch (error) {
        experienceCenterResponseObj = { code: 400, message: error.message };
        return experienceCenterResponseObj;
    }
};
const getExperienceCenter = async (experienceCenter) => {
    return {
        Data: experienceCenter.map((experiencecenter) => {
            return Object.assign(Object.assign({}, experiencecenter), { city: experiencecenter.cities, centerhead: experiencecenter.users });
        })
    };
};


/***/ }),

/***/ "./src/api/experienceCenter/resolver.ts":
/*!**********************************************!*\
  !*** ./src/api/experienceCenter/resolver.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "experienceCenterResolver": () => (/* binding */ experienceCenterResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./queries */ "./src/api/experienceCenter/queries.ts");
/* harmony import */ var _mutations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mutations */ "./src/api/experienceCenter/mutations.ts");



const experienceCenterResolver = {
    Query: {
        allExperienceCenters: async () => (0,_queries__WEBPACK_IMPORTED_MODULE_1__.getExperienceCenters)(),
        getExperienceCenterById: async (parent, _args, context) => (0,_queries__WEBPACK_IMPORTED_MODULE_1__.getExperienceCenterById)(parent, _args, context),
    },
    Mutation: {
        addExperienceCenter: async (parent, _args, context) => (0,_mutations__WEBPACK_IMPORTED_MODULE_2__.addExperienceCenter)(parent, _args, context),
        updateExperienceCenter: async (parent, _args, context) => (0,_mutations__WEBPACK_IMPORTED_MODULE_2__.updateExperienceCenter)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/experienceCenter/typedef.ts":
/*!*********************************************!*\
  !*** ./src/api/experienceCenter/typedef.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "experienceCenterTypedef": () => (/* binding */ experienceCenterTypedef)
/* harmony export */ });
const experienceCenterTypedef = `
    type ExperienceCenters {
        centerid: Int
        name:String
        odoo_id:String
        ectype: String
        address: String
        city: Cities
        centerhead: Users
        created_at:DateTime
        updated_at:DateTime
    }

    type Query {
        allExperienceCenters: ExperienceCenterResponse
        getExperienceCenterById(centerid:Int): ExperienceCenterResponse
    }
    type ExperienceCenterResponse { 
        code:Int
        message: String
        data:[ExperienceCenters!]!
    }
   
    type Mutation{
        addExperienceCenter(name:String,
            odoo_id:String,
            centerhead:Int,
            city: Int,
            ectype: String,
            address: String,
            created_at:DateTime,
            updated_at:DateTime): ExperienceCenterResponse

        updateExperienceCenter(centerid: Int,
            name:String,
            odoo_id:String,
            centerhead:Int,
            city: Int,
            ectype: String,
            address: String,
            created_at:DateTime,
            updated_at:DateTime): ExperienceCenterResponse
    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/homescreenWidgets/Mutation/mutation.ts":
/*!********************************************************!*\
  !*** ./src/api/homescreenWidgets/Mutation/mutation.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "cardStatus": () => (/* binding */ cardStatus)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _projects_Smartsheet_SmartSheetServices__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../projects/Smartsheet/SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _projects_Smartsheet_Queries_GetMileStonesDetails__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../projects/Smartsheet/Queries/GetMileStonesDetails */ "./src/api/projects/Smartsheet/Queries/GetMileStonesDetails.ts");




const cardStatus = async (root, args, context) => {
    let cardStatusResponseObj;
    let input, flags = {}, userDetails = {}, chmname, chmdata, salesmanagerdetails, proposalaccept, projectdetails, paymentrequest, paymentrequeststatus, dccode, SmartsheetId, CurrentStatus, LastUpdated, ProjectValue, ProjectStartDate, ProjectLastDate, milestones, ProjectSignupDate, paymentrequestdata;
    try {
        const fetchedUser = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(context, "CD");
        const cardDetails = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
            where: { sfid: fetchedUser.opportunityid },
        });
        const leadData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({
            where: { mobilephone: fetchedUser.customerphone },
        });
        if (cardDetails !== null) {
            salesmanagerdetails = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findFirst({
                where: { sfid: cardDetails.ownerid },
            });
            dccode = cardDetails.customer_id__c;
        }
        proposalaccept = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({
            where: { opportunityid: fetchedUser.opportunityid },
            orderBy: { id: "desc" },
        });
        let paymentcount;
        projectdetails = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: { customerid: fetchedUser.customerid },
        });
        if (projectdetails !== undefined && projectdetails !== null) {
            paymentrequest = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentrequests.findMany({
                where: { clientid: projectdetails.projectid, status: "Pending" },
            });
            paymentrequeststatus = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentrequests.findFirst({
                where: { clientid: projectdetails.projectid },
            });
            paymentcount = paymentrequest.length;
            console.log("requestsum", paymentcount);
            SmartsheetId = projectdetails.smartsheetid;
            CurrentStatus = projectdetails.currentmilestone;
            LastUpdated = projectdetails.updatedate;
            ProjectSignupDate = projectdetails.signupdate;
            ProjectValue = projectdetails.totalprojectvalue;
            ProjectStartDate = projectdetails.createdate;
            ProjectLastDate = projectdetails.expectedhandoverdate;
            milestones = projectdetails.milestones;
            if (projectdetails.chmid !== null) {
                chmdata = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                    where: { userid: projectdetails.chmid },
                });
                const mName = chmdata.middlename ? chmdata.middlename : "";
                const fName = chmdata.firstname ? chmdata.firstname : "";
                const lName = chmdata.lastname ? chmdata.lastname : "";
                chmname = `${fName} ${mName} ${lName} is your project account manager, please raise your concern and we will get it resolved.`;
            }
            else {
                chmname = "Please raise your concern here and we will get it resolved.";
            }
        }
        if (paymentrequeststatus !== null && paymentrequeststatus !== undefined) {
            paymentrequestdata = paymentrequeststatus.status;
        }
        const bookingformstatus = fetchedUser.bookingformstatus;
        userDetails = {
            User_Details: {
                userName: `${fetchedUser.firstname} ${fetchedUser.lastname}`,
                dccode: dccode,
                Smartsheet_Id: SmartsheetId,
                CurrentStatus: CurrentStatus,
                Last_Updated: LastUpdated,
                Project_Value: ProjectValue,
                Project_Start_Date: ProjectStartDate,
                Project_Last_Date: ProjectLastDate,
                Payment_Status: paymentrequestdata,
                Project_Signup_Date: ProjectSignupDate,
            },
        };
        flags = {
            Meeting_Scheduled: "Meeting_Scheduled",
            Proposal_Sent: "Proposal_Sent",
            After_Proposal_has_been_accepted: "After_Proposal_has_been_accepted",
            Project_Signup_Till_Handover_Completion: "Project_Signup_Till_Handover_Completion",
        };
        if (leadData !== null && leadData.status === "Meeting Scheduled") {
            const ecAddress = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findFirst({
                where: { name: leadData.meeting_venue__c },
            });
            const managerPhoto = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findFirst({
                where: { sfid: leadData.ownerid },
            });
            input = {
                Meeting_Scheduled: {
                    meeting_schedule_card: {
                        title: leadData.status,
                        meeting_type__c: leadData.meeting_type__c,
                        createddate: leadData.createddate,
                        meeting_venue__c: leadData.meeting_venue__c,
                        EC_Address: ecAddress.address,
                    },
                    reuirement_schedule_card: {
                        title: "Next step! Help us know you better",
                        description: "You’re all signed up . Time to get stuff done. What’s Next? Help us understand your likes/dislikes by filling out this form.",
                        CTA: "Fill the form",
                        URL: "/requirement-form",
                    },
                    sales_manager_card: {
                        name: leadData.lead_owner_name__c,
                        number: managerPhoto.mobilephone,
                        email: leadData.lead_owner_email__c,
                        avatar: managerPhoto.fullphotourl,
                    },
                },
            };
        }
        else if (cardDetails !== null &&
            cardDetails !== undefined &&
            cardDetails.stagename === "Proposal Sent" &&
            proposalaccept !== null &&
            proposalaccept.status.toLowerCase() !== "accepted") {
            input = {
                Proposal_Details: {
                    proposal_card: {
                        title: "Proposal Received",
                        proposal_sent_date__c: cardDetails.proposal_sent_date__c,
                        status: proposalaccept.status.toLowerCase(),
                        description: "Take A Look ! You shared your home story: we made the design! View the design proposal to accept/reject. Tell us what you think?",
                        CTA: "View Proposal",
                        URL: "/proposal",
                    },
                    sales_manager_card: {
                        name: salesmanagerdetails.name,
                        number: salesmanagerdetails.mobilephone,
                        email: salesmanagerdetails.email,
                        avatar: salesmanagerdetails.fullphotourl,
                    },
                },
            };
        }
        else if (bookingformstatus !== null &&
            bookingformstatus.toLowerCase() === "accepted" &&
            paymentrequestdata !== null &&
            paymentrequestdata.toLowerCase() === "paid") {
            input = {
                Project_Signup_Till_Handover_Completion: {
                    Project_Card: {
                        Project_Value: projectdetails.totalprojectvalue,
                        Signup_Date: projectdetails.signupdate,
                        Handover_Date: projectdetails.expectedhandoverdate,
                        Which_milestone_is_active: projectdetails.currentmilestone,
                    },
                    Customer_Support_Card: {
                        title: `Need Help? ${fetchedUser.firstname} ${fetchedUser.lastname}`,
                        description: chmname,
                        CTA: "Raise ticket",
                        URL: "/support",
                    },
                },
            };
        }
        else if (proposalaccept !== null &&
            proposalaccept.status.toLowerCase() === "accepted") {
            if (paymentrequest !== null && paymentrequest !== undefined) {
                input = {
                    After_Proposal_has_been_accepted: {
                        five_percent_payment_card: {},
                        Booking_Form_Card: {},
                    },
                };
                let payment = {};
                let bookingForm = {};
                if (paymentcount > 0 && paymentcount < 2) {
                    payment = {
                        title: "5% payment card",
                        date_an_time_of_request: paymentrequest[0].invoicedate,
                        description: `We request you to make your  5% payment 
            for us to get started on your design process!`,
                        status: paymentrequest[0].status.toLowerCase(),
                        CTA: "Pay Rs." + paymentrequest[0].requestamount,
                        URL: "/payment",
                    };
                }
                if (paymentcount > 0 && paymentcount <= 2) {
                    let sumAmount = 0.0;
                    paymentrequest.forEach((item) => {
                        sumAmount += item.requestamount;
                    });
                    payment = {
                        title: "5% payment card",
                        date_an_time_of_request: paymentrequest[0].invoicedate,
                        description: "We request you to make your  5% payment for us to get started on your design process!",
                        status: "pending",
                        CTA: "Pay ₹" + sumAmount,
                        URL: "/payment",
                    };
                }
                if (fetchedUser.bookingformstatus !== null &&
                    fetchedUser.bookingformstatus.toLowerCase() !== "accepted") {
                    bookingForm = {
                        title: "Booking Form Card",
                        status: fetchedUser.bookingformstatus.toLowerCase(),
                        description: "Are you all set to start the project with us?",
                        CTA: "Review & Sign the Booking Form",
                        URL: "/booking-form",
                    };
                }
                input.After_Proposal_has_been_accepted.five_percent_payment_card =
                    payment;
                input.After_Proposal_has_been_accepted.Booking_Form_Card = bookingForm;
            }
            else {
                input = {
                    Presales_No_Card: {
                        information: {
                            title: "Information",
                            description: `Your side of the actions/activities are done. Next up, ${salesmanagerdetails.name} will reach out to you with the 5% Payment request following the Booking Form. In case there is a delay, use the call button below to speak to ${salesmanagerdetails.name}`,
                        },
                        sales_manager_card: {
                            name: salesmanagerdetails.name,
                            number: salesmanagerdetails.mobilephone,
                            email: salesmanagerdetails.email,
                            avatar: salesmanagerdetails.fullphotourl,
                        },
                    },
                };
            }
        }
        else {
            input = {
                Information: {
                    description: "The dashboard is currently being updated by the team, Please login after sometime.",
                },
            };
        }
        if (input !== {}) {
            cardStatusResponseObj = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
                data: {
                    cardstage: input,
                },
                where: {
                    customerid: fetchedUser.customerid,
                },
            });
        }
        var milestonedata;
        const type = "home";
        if (SmartsheetId !== undefined && SmartsheetId !== null) {
            const smartClient = await (0,_projects_Smartsheet_SmartSheetServices__WEBPACK_IMPORTED_MODULE_2__.getSmartSheetClient)();
            const sheetData = await smartClient.sheets.getSheet({ id: SmartsheetId });
            milestonedata = (0,_projects_Smartsheet_Queries_GetMileStonesDetails__WEBPACK_IMPORTED_MODULE_3__.getMileStoneData)(sheetData, milestones, type);
        }
        cardStatusResponseObj = {
            code: 200,
            message: "Successfully fetched card details",
            userDetails: userDetails,
            flags: flags,
            data: input,
            dynamic_Card: milestonedata,
        };
        return cardStatusResponseObj;
    }
    catch (error) {
        cardStatusResponseObj = { code: 400, message: error.message };
        return cardStatusResponseObj;
    }
};


/***/ }),

/***/ "./src/api/homescreenWidgets/resolver.ts":
/*!***********************************************!*\
  !*** ./src/api/homescreenWidgets/resolver.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "homescreenWgidgetResolver": () => (/* binding */ homescreenWgidgetResolver)
/* harmony export */ });
/* harmony import */ var _Mutation_mutation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Mutation/mutation */ "./src/api/homescreenWidgets/Mutation/mutation.ts");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_1__);


const homescreenWgidgetResolver = {
    Mutation: {
        cardStatus: (parent, _args, context) => (0,_Mutation_mutation__WEBPACK_IMPORTED_MODULE_0__.cardStatus)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_1__.DateTimeResolver
};


/***/ }),

/***/ "./src/api/homescreenWidgets/typedefs.ts":
/*!***********************************************!*\
  !*** ./src/api/homescreenWidgets/typedefs.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "homescreenWidgetTypedef": () => (/* binding */ homescreenWidgetTypedef)
/* harmony export */ });
const homescreenWidgetTypedef = `

type cardDetails {
    id : String!
    cardstage : JSON
}
type cardStatusResponseObj {
    code : Int,
    message : String
    userDetails : JSON
    flags : JSON
    data: JSON
    dynamic_Card: JSON
}
type Mutation{
    cardStatus : cardStatusResponseObj
}
scalar DateTime
`;


/***/ }),

/***/ "./src/api/leads/Mutations/acceptRejectLeads.ts":
/*!******************************************************!*\
  !*** ./src/api/leads/Mutations/acceptRejectLeads.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acceptRejectLeads": () => (/* binding */ acceptRejectLeads)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const getLeadDetailsFromId = async (leadSfId) => {
    if (leadSfId) {
        return _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({
            where: {
                sfid: leadSfId,
            },
        });
    }
    return null;
};
const updateBroadCastedLeads = async (dataToBeUpdated, leadSfId) => {
    console.log(dataToBeUpdated, leadSfId);
    return _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.update({
        data: dataToBeUpdated,
        where: { sfid: leadSfId },
    });
};
const acceptRejectLeads = async (_root, args, _context) => {
    const acceptRejectResponse = {
        code: 200,
        message: null,
        data: null,
    };
    try {
        const { isAccept, leadSfId } = args;
        const fetchedUser = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(_context, "DD");
        if (fetchedUser) {
            const leadFetchedBySfId = await getLeadDetailsFromId(leadSfId);
            if (leadFetchedBySfId) {
                const user = fetchedUser;
                const acceptRejectResult = await hanldeAcceptRejectByDesigners(isAccept, user, leadSfId, leadFetchedBySfId);
                acceptRejectResponse.code = 200;
                acceptRejectResponse.message = acceptRejectResult.message;
            }
            else {
                acceptRejectResponse.code = 400;
                acceptRejectResponse.message = "Lead Salesforce Id is not valid";
            }
        }
        else {
            acceptRejectResponse.code = 400;
            acceptRejectResponse.message = "No User found with given id";
        }
    }
    catch (e) {
        console.log(e);
        acceptRejectResponse.code = 400;
        acceptRejectResponse.message = e.message;
    }
    return acceptRejectResponse;
};
const hanldeAcceptRejectByDesigners = async (isAccept, user, leadSfId, leadFetchedBySfId) => {
    const acceptRejectResponse = {
        code: 200,
        message: null,
        data: null,
    };
    if (isAccept) {
        console.log(757575);
        if (!leadFetchedBySfId.design_user__c) {
            acceptRejectResponse.data = await updateBroadCastedLeads({
                broadcast_status__c: "1",
                design_user__c: user.salesforceuserid,
                has_designer_accepted__c: "Designer Accepted",
            }, leadSfId);
            console.log(85, acceptRejectResponse.data);
            acceptRejectResponse.message = `Lead ${leadFetchedBySfId.name} accepted successfully`;
        }
        else {
            acceptRejectResponse.message = "designer is already assigned";
        }
    }
    else {
        if (leadFetchedBySfId.broadcast_status__c === "0") {
            const leadRejectedBy = leadFetchedBySfId.rejected_by__c;
            const leadRejectedByArr = leadRejectedBy ? leadRejectedBy.split(",") : [];
            if (!leadRejectedByArr.includes(user.userid)) {
                leadRejectedByArr.push(user.userid);
                acceptRejectResponse.data = await updateBroadCastedLeads({
                    has_designer_accepted__c: "Designer Rejected",
                    rejected_by__c: leadRejectedByArr.toString(),
                }, leadSfId);
                acceptRejectResponse.message = `Lead ${leadFetchedBySfId.name} rejected by the designer,your studio manager has been notified`;
            }
        }
    }
    return acceptRejectResponse;
};


/***/ }),

/***/ "./src/api/leads/Mutations/assignDesignerToLeadsByStudioManger.ts":
/*!************************************************************************!*\
  !*** ./src/api/leads/Mutations/assignDesignerToLeadsByStudioManger.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assignDesigerToLeads": () => (/* binding */ assignDesigerToLeads)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");


const assignDesigerToLeads = async (_root, args, _context) => {
    let acceptRejectResponse = { code: 200, message: null, data: null };
    try {
        const { userId, leadSfId, designerToBeAssigned } = args;
        if (userId) {
            const fetchedUser = await (0,_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__.getUser)(userId);
            if (fetchedUser.length > 0) {
                const leadFetchedBySfId = await getLeadDetailsFromId(leadSfId);
                if (leadFetchedBySfId) {
                    acceptRejectResponse = await handleAcceptByStudioManagersOrAdmins(designerToBeAssigned, leadSfId);
                }
                else {
                    acceptRejectResponse.code = 400;
                    acceptRejectResponse.message = "Lead Salesforce Id is not valid";
                }
            }
            else {
                acceptRejectResponse.code = 400;
                acceptRejectResponse.message = "No User found with given id";
            }
        }
        else {
            acceptRejectResponse.code = 400;
            acceptRejectResponse.message = "No User Id Provided";
        }
    }
    catch (e) {
        acceptRejectResponse.code = 400;
        acceptRejectResponse.message = e.message;
    }
    return acceptRejectResponse;
};
const handleAcceptByStudioManagersOrAdmins = async (designerToBeAssigned, leadSfId) => {
    const acceptRejectResponse = { code: 200, message: null, data: null };
    if (designerToBeAssigned || (designerToBeAssigned === null || designerToBeAssigned === void 0 ? void 0 : designerToBeAssigned.length) > 0) {
        acceptRejectResponse.data = await updateBroadCastedLeads({
            broadcast_status__c: 3,
            design_user__c: designerToBeAssigned,
            has_designer_accepted__c: "Designer Assigned, Acceptance Pending"
        }, leadSfId);
    }
    else {
        acceptRejectResponse.code = 400;
        acceptRejectResponse.message = "Invalid Designer Id Provided";
    }
    return acceptRejectResponse;
};
const getLeadDetailsFromId = async (leadSfId) => {
    if (leadSfId) {
        return _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({
            where: {
                sfid: leadSfId
            }
        });
    }
    return null;
};
const updateBroadCastedLeads = async (dataToBeUpdated, leadSfId) => {
    console.log(dataToBeUpdated, leadSfId);
    return _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.update({
        data: dataToBeUpdated,
        where: { sfid: leadSfId },
    });
};


/***/ }),

/***/ "./src/api/leads/Mutations/assignTeamToLead.ts":
/*!*****************************************************!*\
  !*** ./src/api/leads/Mutations/assignTeamToLead.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assignTeamToLead": () => (/* binding */ assignTeamToLead)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_2__);
var __asyncValues = (undefined && undefined.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};



const assignTeamToLead = async (_parent, args, _context) => {
    const assignTeamResponse = { code: 200, message: null, data: null };
    const { leadId } = args;
    const teams = [];
    const fetchedLeads = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({
        where: {
            sfid: leadId,
        },
    });
    if (fetchedLeads.status === "Meeting Scheduled" ||
        fetchedLeads.status === "Meeting Confirmed") {
        if (!fetchedLeads.design_user__c && !fetchedLeads.designer_team_name__c) {
            if (fetchedLeads === null || fetchedLeads === void 0 ? void 0 : fetchedLeads.meeting_venue__c) {
                const fetchedExperienceCenter = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findFirst({
                    where: {
                        name: fetchedLeads === null || fetchedLeads === void 0 ? void 0 : fetchedLeads.meeting_venue__c,
                    },
                });
                if (fetchedExperienceCenter) {
                    const experienceCenterId = fetchedExperienceCenter.centerid;
                    const fetchedAssignedTeamsIdToExperienccenter = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams_experiencecenters.findMany({
                        where: { centerid: experienceCenterId },
                        include: {
                            team: true,
                        },
                    });
                    if ((fetchedAssignedTeamsIdToExperienccenter === null || fetchedAssignedTeamsIdToExperienccenter === void 0 ? void 0 : fetchedAssignedTeamsIdToExperienccenter.length) > 0) {
                        fetchedAssignedTeamsIdToExperienccenter.forEach((team) => {
                            teams.push(team.team);
                        });
                        const roundRobinData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_roundrobin.findFirst({
                            where: {
                                experiencecenterid: experienceCenterId,
                            },
                        });
                        const teamNameAssignedToLead = await roundRobinLogic(roundRobinData, teams, experienceCenterId, leadId);
                        assignTeamResponse.message = `Lead Successfully assigned to ${teamNameAssignedToLead}`;
                        const teamwhatsapp = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findFirst({ where: { name: teamNameAssignedToLead } });
                        await callwhatsappnotification(teamwhatsapp, leadId);
                    }
                    else {
                        assignTeamResponse.code = 400;
                        assignTeamResponse.message =
                            "No Teams found for this particular experience center";
                    }
                }
                else {
                    assignTeamResponse.code = 400;
                    assignTeamResponse.message =
                        "No Experience center assigned to this lead";
                }
            }
            else {
                assignTeamResponse.code = 400;
                assignTeamResponse.message = "Lead Not Found";
            }
        }
        else {
            assignTeamResponse.code = 200;
            assignTeamResponse.message = "Lead already Broadcasted";
        }
    }
    else {
        assignTeamResponse.code = 200;
        assignTeamResponse.message = "Lead is not Meeting Scheduled stage";
    }
    return assignTeamResponse;
};
const roundRobinLogic = async (roundRobinData, teams, experienceCenterId, leadId) => {
    let teamNameToBeAssignedToTheLead;
    let teamIdToBeAssignedToTheLead;
    if (roundRobinData) {
        const latestTeamIdAssignedToEC = roundRobinData.teamid;
        const indexOfTheTeamLatestAssignedToLead = teams.findIndex((team) => team.id === latestTeamIdAssignedToEC);
        if (teams.length === indexOfTheTeamLatestAssignedToLead + 1) {
            teamNameToBeAssignedToTheLead = teams[0].name;
            teamIdToBeAssignedToTheLead = teams[0].id;
        }
        else {
            teamNameToBeAssignedToTheLead =
                teams[indexOfTheTeamLatestAssignedToLead + 1].name;
            teamIdToBeAssignedToTheLead =
                teams[indexOfTheTeamLatestAssignedToLead + 1].id;
        }
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_roundrobin.update({
            where: {
                roundrobinid: roundRobinData.roundrobinid,
            },
            data: {
                teamid: teamIdToBeAssignedToTheLead,
            },
        });
    }
    else {
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_roundrobin.create({
            data: {
                experiencecenterid: experienceCenterId,
                teamid: teams[0].id,
            },
        });
        teamNameToBeAssignedToTheLead = teams[0].name;
    }
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.update({
        where: {
            sfid: leadId,
        },
        data: {
            designer_team_name__c: teamNameToBeAssignedToTheLead,
            broadcast_status__c: "0",
        },
    });
    return teamNameToBeAssignedToTheLead;
};
const callwhatsappnotification = async (teamwhatsapp, leadId) => {
    var e_1, _a, e_2, _b, e_3, _c;
    var _d;
    console.log("here");
    const usertobebroadcasted = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.findMany({ where: { teamid: teamwhatsapp.id } });
    console.log("user", usertobebroadcasted);
    const profiles = [
        { profile_name: "Inhouse Designer" },
        { profile_name: "Design Partner" },
        { profile_name: "Associate Studio Manager" }
    ];
    let whereConditionForProfiles = {};
    whereConditionForProfiles = {
        OR: profiles,
    };
    const profileIDtobebroadcasted = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findMany({ where: whereConditionForProfiles });
    const profileID = [];
    try {
        for (var profileIDtobebroadcasted_1 = __asyncValues(profileIDtobebroadcasted), profileIDtobebroadcasted_1_1; profileIDtobebroadcasted_1_1 = await profileIDtobebroadcasted_1.next(), !profileIDtobebroadcasted_1_1.done;) {
            const element = profileIDtobebroadcasted_1_1.value;
            profileID.push(element.profileid);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (profileIDtobebroadcasted_1_1 && !profileIDtobebroadcasted_1_1.done && (_a = profileIDtobebroadcasted_1.return)) await _a.call(profileIDtobebroadcasted_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    console.log(profileID);
    const userID = [];
    try {
        for (var usertobebroadcasted_1 = __asyncValues(usertobebroadcasted), usertobebroadcasted_1_1; usertobebroadcasted_1_1 = await usertobebroadcasted_1.next(), !usertobebroadcasted_1_1.done;) {
            const element = usertobebroadcasted_1_1.value;
            if (element.userid) {
                userID.push(element.userid);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (usertobebroadcasted_1_1 && !usertobebroadcasted_1_1.done && (_b = usertobebroadcasted_1.return)) await _b.call(usertobebroadcasted_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    if (userID.length > 0) {
        const userstofetch = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findMany({ where: { userid: { in: userID }, profileid: { in: profileID }, iseligibleforleadmeetings: true } });
        console.log(userstofetch);
        try {
            for (var userstofetch_1 = __asyncValues(userstofetch), userstofetch_1_1; userstofetch_1_1 = await userstofetch_1.next(), !userstofetch_1_1.done;) {
                const element = userstofetch_1_1.value;
                const leadtofetch = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({ where: { sfid: leadId } });
                const reminderTemplateForLeadBroadcast = await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.callExternalAPIWithPost)("https://cms.designcafe.com/graphqlm", (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.queryForFetchingRemindersTemplate)("notify_lead_broadcast"));
                if (reminderTemplateForLeadBroadcast) {
                    const data = (_d = reminderTemplateForLeadBroadcast === null || reminderTemplateForLeadBroadcast === void 0 ? void 0 : reminderTemplateForLeadBroadcast.data) === null || _d === void 0 ? void 0 : _d.reminders.data[0].attributes;
                    console.log(data);
                    const slug = data.slug;
                    const to = element.phonenumber;
                    console.log("phonenumber", to);
                    const link = process.env.leadDetailsUrl + leadtofetch.sfid + "&leadid=" + leadtofetch.id;
                    const url = "https://app.yellowmessenger.com/api/engagements/notifications/v2/push";
                    if (data.whatsappActive) {
                        console.log("whatsapp");
                        const whatsappresponse = await triggerWhatsappNotification(to, link, slug, userstofetch, leadtofetch, url);
                        console.log("whatsappresponse", whatsappresponse);
                    }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (userstofetch_1_1 && !userstofetch_1_1.done && (_c = userstofetch_1.return)) await _c.call(userstofetch_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
};
const triggerWhatsappNotification = async (to, link, slug, userstofetch, leadtofetch, url) => {
    console.log("trigger");
    const reqBody = JSON.stringify({
        userDetails: {
            number: "91" + to,
        },
        notification: {
            type: "whatsapp",
            sender: "916366910437",
            templateId: "new_lead_details",
            params: {
                "1": leadtofetch.name,
                "2": leadtofetch.willingness_for_meeting__c,
                "3": leadtofetch.meeting_venue__c,
                "4": leadtofetch.meeting_type__c,
                "5": leadtofetch.approx_budget__c,
                "6": leadtofetch.propertyaddress__c,
                "7": link,
            },
        },
    });
    try {
        const res = await superagent__WEBPACK_IMPORTED_MODULE_2___default().post(url)
            .query("bot=x1647421621135")
            .set("Content-Type", "application/json")
            .set("x-api-key", process.env.kyellowMessengerXAuthToken)
            .send(reqBody);
        console.log("res.body", res.body);
        return res.body;
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/leads/Mutations/editRequirements.ts":
/*!*****************************************************!*\
  !*** ./src/api/leads/Mutations/editRequirements.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "editRequirements": () => (/* binding */ editRequirements)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _customers_requirementForm_Mutations_editForm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../customers/requirementForm/Mutations/editForm */ "./src/api/customers/requirementForm/Mutations/editForm.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_4__);





const editRequirements = async (root, args, context) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
    let editRequirementsResponseObj;
    const { requirementdetails, leadid } = args;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticate)(context, "DD");
        await (0,_customers_requirementForm_Mutations_editForm__WEBPACK_IMPORTED_MODULE_3__.validateInput)(requirementdetails);
        const floorPlanReq = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.floor_plan;
        const fetchLead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({ where: { id: leadid } });
        if (!fetchLead) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_4___default())(400, "lead not found");
        }
        floorPlanReq.id = fetchLead.sfid;
        const response = await getFloorPlanLocation(floorPlanReq, fetchLead, user);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.update({
            data: {
                home_type__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.home_type__c,
                area__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.area__c.toString(),
                scope_of_work__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.scope_of_work__c,
                civil_work__c: (requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.civil_work__c) === "Yes" ? true : false,
                site_service_needed_for__c: (_a = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.site_service_needed_for__c) === null || _a === void 0 ? void 0 : _a.join(";"),
                interior_work_needed_for__c: (_b = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.interior_work_needed_for__c) === null || _b === void 0 ? void 0 : _b.join(";"),
                requirement_details__c: (_c = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.requirement_details__c) === null || _c === void 0 ? void 0 : _c.join(";"),
                property_usage__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.property_usage__c,
                where_are_you_currently_located__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.where_are_you_currently_located__c,
                when_would_you_like_to_have_the_home__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.when_would_you_like_to_have_the_home__c,
                which_language_are_you_most_comfortable__c: (_d = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.which_language_are_you_most_comfortable__c) === null || _d === void 0 ? void 0 : _d.join(";"),
                if_other_languages_please_specify__c: (_e = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.if_other_languages_please_specify__c) === null || _e === void 0 ? void 0 : _e.join(";"),
                who_will_be_staying_in_the_house__c: (_f = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.who_will_be_staying_in_the_house__c) === null || _f === void 0 ? void 0 : _f.join(";"),
                gender_of_first_kid__c: (requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details)
                    ? (_g = requirementdetails.kids_details[0]) === null || _g === void 0 ? void 0 : _g.gender
                    : null,
                gender_of_second_kid__c: (requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details)
                    ? (_h = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details[1]) === null || _h === void 0 ? void 0 : _h.gender
                    : null,
                gender_of_third_kid__c: (requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details)
                    ? (_j = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details[2]) === null || _j === void 0 ? void 0 : _j.gender
                    : null,
                gender_of_fourth_kid__c: (requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details)
                    ? (_k = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details[3]) === null || _k === void 0 ? void 0 : _k.gender
                    : null,
                age_of_first_kid__c: (requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details)
                    ? (_m = (_l = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details[0]) === null || _l === void 0 ? void 0 : _l.age) === null || _m === void 0 ? void 0 : _m.toString()
                    : null,
                age_of_second_kid__c: (requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details)
                    ? (_p = (_o = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details[1]) === null || _o === void 0 ? void 0 : _o.age) === null || _p === void 0 ? void 0 : _p.toString()
                    : null,
                age_of_third_kid__c: (requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details)
                    ? (_r = (_q = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details[2]) === null || _q === void 0 ? void 0 : _q.age) === null || _r === void 0 ? void 0 : _r.toString()
                    : null,
                age_of_fourth_kid__c: (requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details)
                    ? (_t = (_s = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.kids_details[3]) === null || _s === void 0 ? void 0 : _s.age) === null || _t === void 0 ? void 0 : _t.toString()
                    : null,
                do_you_have_pets__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.do_you_have_pets__c,
                live__c: (_u = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.live__c) === null || _u === void 0 ? void 0 : _u.join(";"),
                others_for_live__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.others_for_live__c,
                work__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.work__c,
                eat__c: (_v = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.eat__c) === null || _v === void 0 ? void 0 : _v.join(";"),
                play__c: (_w = requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.play__c) === null || _w === void 0 ? void 0 : _w.join(";"),
                others_for_play__c: requirementdetails === null || requirementdetails === void 0 ? void 0 : requirementdetails.others_for_play__c,
                floor_plan_attachment_id__c: response
                    ? response.id.toString()
                    : fetchLead.floor_plan_attachment_id__c,
            },
            where: { id: leadid },
        });
        editRequirementsResponseObj = {
            code: 200,
            message: "Requirement Form Updated Successfully",
        };
        return editRequirementsResponseObj;
    }
    catch (error) {
        editRequirementsResponseObj = { code: 400, message: error.message };
        return editRequirementsResponseObj;
    }
};
const getFloorPlanLocation = async (floorPlanReq, lead, user) => {
    var _a;
    let res, location, respone;
    if (floorPlanReq.documents[0].data.match(/^(?:[A-Za-z\d+/]{4})*(?:[A-Za-z\d+/]{3}=|[A-Za-z\d+/]{2}==)?$/)) {
        const attachmentReq = {
            key: floorPlanReq.documents[0].filename,
            contentType: floorPlanReq.documents[0].Content_Type,
            base64: floorPlanReq.documents[0].data,
            ispreorpost: 2,
            user: user.userid,
            leadid: lead.sfid,
        };
        respone = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__.UploadFileOnS3)(attachmentReq);
        location = respone.location;
        res = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__.uploadFloorPlanAtSalesForce)(floorPlanReq);
        if (((_a = res === null || res === void 0 ? void 0 : res.status) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "error") {
            return { code: 400, message: "Error Uploading Requirement Form" };
        }
    }
    else {
        location = floorPlanReq.documents[0].data;
    }
    return respone;
};


/***/ }),

/***/ "./src/api/leads/Mutations/updateDesigner.ts":
/*!***************************************************!*\
  !*** ./src/api/leads/Mutations/updateDesigner.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateDesigner": () => (/* binding */ updateDesigner)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");
/* harmony import */ var _domain_enumerations_DesingerAssignStatus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/enumerations/DesingerAssignStatus */ "./src/domain/enumerations/DesingerAssignStatus.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../domain/enumerations/ProfileTypeEnumUtil */ "./src/domain/enumerations/ProfileTypeEnumUtil.ts");





const updateDesigner = async (root, args, context) => {
    var _a;
    let updateDesignerResponseObj;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_3__.authenticate)(context, "DD");
        const { designerId, leadSfId, opportunitySfId } = args;
        const fetchedUser = await (0,_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__.getUser)(designerId);
        let user;
        if (fetchedUser.length > 0) {
            user = fetchedUser[0];
        }
        else {
            updateDesignerResponseObj = {
                code: 400,
                message: "No Designer found with given id",
            };
            return updateDesignerResponseObj;
        }
        let teamAssignedToUser, name;
        if (user.profileid === _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.STUDIO_MANAGER_DP ||
            user.profileid === _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.IN_HOUSE_DESIGNER ||
            user.profileid === _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.ASSOCIATE_STUDIO_MANAGER ||
            user.profileid === _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.STUDIO_MANAGER ||
            user.profileid === _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_4__.ProfileTypeEnumCode.DESIGN_PARTNER) {
            teamAssignedToUser = user.teams ? user.teams[0].name : null;
            const middleName = user.middlename ? user.middlename.trim() : "";
            const lastName = user.lastname ? user.lastname.trim() : "";
            name = `${(_a = user.firstname) === null || _a === void 0 ? void 0 : _a.trim()}${middleName ? " " + middleName + " " : " "}${lastName}`;
            console.log(56, name);
        }
        else {
            updateDesignerResponseObj = {
                code: 400,
                message: "Invalid Designer Id Provided",
            };
            return updateDesignerResponseObj;
        }
        if (leadSfId) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.update({
                where: {
                    sfid: leadSfId,
                },
                data: {
                    design_user__c: user.salesforceuserid,
                    design_user_name__c: name,
                    designer_team_name__c: teamAssignedToUser,
                    has_designer_accepted__c: _domain_enumerations_DesingerAssignStatus__WEBPACK_IMPORTED_MODULE_2__["default"].PENDING,
                    broadcast_status__c: "3"
                },
            });
        }
        else if (opportunitySfId) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.update({
                where: {
                    sfid: opportunitySfId,
                },
                data: {
                    design_user__c: user.salesforceuserid,
                    design_user_name__c: name,
                    studio_name__c: teamAssignedToUser,
                },
            });
        }
        updateDesignerResponseObj = { code: 200, message: "success" };
        return updateDesignerResponseObj;
    }
    catch (error) {
        updateDesignerResponseObj = { code: 400, message: error.message };
        return updateDesignerResponseObj;
    }
};


/***/ }),

/***/ "./src/api/leads/Mutations/uploadFilesInLead.ts":
/*!******************************************************!*\
  !*** ./src/api/leads/Mutations/uploadFilesInLead.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "uploadFilesInLeads": () => (/* binding */ uploadFilesInLeads)
/* harmony export */ });
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const uploadFilesInLeads = async (root, args, context) => {
    let uploadFilesResponseObj;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(context, "DD");
        const { leadid, opportunityid, base64, filekey, contentType } = args;
        const attachment = {
            key: filekey,
            contentType,
            base64,
            userid: user.userid,
            ispreorpost: 0,
            leadid: leadid,
            opportunityid: opportunityid,
        };
        const toS3 = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_0__.UploadFileOnS3)(attachment);
        let responseObj = {
            filename: filekey,
            Content_Type: contentType,
            data: toS3.location,
        };
        uploadFilesResponseObj = {
            code: 200,
            message: "success",
            data: responseObj,
        };
        return uploadFilesResponseObj;
    }
    catch (error) {
        uploadFilesResponseObj = { code: 200, message: error.message };
        return uploadFilesResponseObj;
    }
};


/***/ }),

/***/ "./src/api/leads/Mutations/uploadLeadFiles.ts":
/*!****************************************************!*\
  !*** ./src/api/leads/Mutations/uploadLeadFiles.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "uploadLeadFiles": () => (/* binding */ uploadLeadFiles)
/* harmony export */ });
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");

const uploadLeadFiles = async (root, args, context) => {
    let uploadFilesResponseObj;
    try {
        const { leadAttachment, leadid, opportunityid } = args;
        let toS3;
        const responseArr = [];
        if (leadAttachment.length) {
            await Promise.all(leadAttachment.map(async (element) => {
                const attachment = {
                    key: element.filename,
                    contentType: element.Content_Type,
                    base64: element.base64,
                    ispreorpost: 0,
                    leadid: leadid,
                    opportunityid: opportunityid
                };
                toS3 = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_0__.UploadFileOnS3)(attachment);
                element.base64 = toS3.location;
                responseArr.push(element);
            }));
        }
        uploadFilesResponseObj = { code: 200, message: "success", data: responseArr };
        return uploadFilesResponseObj;
    }
    catch (error) {
        uploadFilesResponseObj = { code: 200, message: error.message };
        return uploadFilesResponseObj;
    }
};


/***/ }),

/***/ "./src/api/leads/Queries/getBroadCastLeadsForUser.ts":
/*!***********************************************************!*\
  !*** ./src/api/leads/Queries/getBroadCastLeadsForUser.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBrodcastLeadsForUser": () => (/* binding */ getBrodcastLeadsForUser)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");



const getBrodcastLeadsForUser = async (_root, _args, _context) => {
    var _a, _b, _c, _d;
    const broadcastLeadResponse = { code: 200, message: "success", data: null };
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(_context, "DD");
        if (user) {
            const fetcheduser = await (0,_api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_2__.getUser)(user.userid);
            console.log("fetcheduser", fetcheduser[0]);
            let whereCondition = {};
            const fetchedProfile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findFirst({
                where: {
                    profileid: fetcheduser[0].profileid,
                },
            });
            console.log(21, fetchedProfile.access_level);
            switch (fetchedProfile.access_level) {
                case 0:
                    if (fetcheduser[0].iseligibleforleadmeetings) {
                        whereCondition = {
                            design_user__c: null,
                            status: "Meeting Scheduled",
                            broadcast_status__c: "0",
                            OR: (_a = fetcheduser[0].teams) === null || _a === void 0 ? void 0 : _a.map((teamAssignedToUser) => {
                                return { designer_team_name__c: teamAssignedToUser.name };
                            }),
                            AND: {
                                OR: [
                                    {
                                        NOT: {
                                            rejected_by__c: {
                                                contains: fetcheduser[0].userid.toString(),
                                            },
                                        },
                                    },
                                    { rejected_by__c: null },
                                ],
                            },
                        };
                    }
                    else {
                        broadcastLeadResponse.code = 400;
                        broadcastLeadResponse.message =
                            "You are not eligible for conducting meetings";
                        return broadcastLeadResponse;
                    }
                    break;
                case 1:
                    whereCondition = {
                        OR: (_b = fetcheduser[0].teams) === null || _b === void 0 ? void 0 : _b.map((team) => {
                            return { designer_team_name__c: team.name };
                        }),
                        broadcast_status__c: "0",
                        design_user__c: null,
                        status: "Meeting Scheduled",
                    };
                    break;
                case 2:
                    whereCondition = {
                        OR: (_c = fetcheduser[0].experiencecenters) === null || _c === void 0 ? void 0 : _c.map((expCenter) => {
                            return { meeting_venue__c: expCenter.name };
                        }),
                        broadcast_status__c: "0",
                        design_user__c: null,
                        status: "Meeting Scheduled",
                    };
                    break;
                case 3:
                    whereCondition = {
                        OR: (_d = fetcheduser[0].cities) === null || _d === void 0 ? void 0 : _d.map((city) => {
                            return { region__c: city.name };
                        }),
                        broadcast_status__c: "0",
                        design_user__c: null,
                        status: "Meeting Scheduled",
                    };
                    break;
                case 4:
                    whereCondition = {
                        broadcast_status__c: "0",
                        design_user__c: null,
                        status: "Meeting Scheduled",
                    };
                    break;
                default:
                    broadcastLeadResponse.code = 400;
                    broadcastLeadResponse.message = "Profile not set for given user";
                    return broadcastLeadResponse;
            }
            console.log(48, JSON.stringify(whereCondition));
            const broadcastedLeads = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({
                where: whereCondition,
            });
            console.log(81818181, broadcastedLeads.length);
            broadcastLeadResponse.data = [...broadcastedLeads];
        }
        else {
            broadcastLeadResponse.code = 400;
            broadcastLeadResponse.message = "No User found with given id";
        }
    }
    catch (e) {
        broadcastLeadResponse.code = 400;
        broadcastLeadResponse.message = e.message;
        console.log(e);
    }
    return broadcastLeadResponse;
};


/***/ }),

/***/ "./src/api/leads/Queries/getLeadAttachments.ts":
/*!*****************************************************!*\
  !*** ./src/api/leads/Queries/getLeadAttachments.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getLeadAttachments": () => (/* binding */ getLeadAttachments)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);


const getLeadAttachments = async (root, args, context) => {
    let getFilesResponseObj;
    try {
        let data;
        if (args.type === 0) {
            if (!args.leadid) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "lead id is required");
            }
            console.log("lead files/presales");
            data = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findMany({
                where: { leadid: args.leadid, ispreorpost: 0, opportunityid: null },
            });
            const fetchedLead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({ where: { sfid: args.leadid } });
            if (!fetchedLead) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "lead not found");
            }
            if (fetchedLead.floor_plan_attachment_id__c) {
                const floorPlan = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findFirst({ where: { id: Number(fetchedLead.floor_plan_attachment_id__c) } });
                data.push(floorPlan);
            }
        }
        else if (args.type === 1) {
            if (!args.opportunityid) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "opportunity id is required");
            }
            console.log("opportunity files/presales");
            let leadid;
            if (!args.leadid) {
                const opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findUnique({
                    where: { sfid: args.opportunityid },
                });
                if (!opportunity) {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "opportunity not found");
                }
                leadid = opportunity.lead_id__c;
            }
            else {
                leadid = args.leadid;
            }
            const leadFiles = await getLeadFilesForOpportunity(leadid);
            const opportunityFiles = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findMany({
                where: { opportunityid: args.opportunityid, ispreorpost: 0 }
            });
            data = leadFiles.concat(opportunityFiles);
        }
        data = await getUploadedBy(data);
        getFilesResponseObj = { code: 200, message: "success", data: data };
        return getFilesResponseObj;
    }
    catch (error) {
        getFilesResponseObj = { code: 400, message: error.message };
        return getFilesResponseObj;
    }
};
const getUploadedBy = async (data) => {
    let user, customer;
    if (data.length > 0) {
        await Promise.all(data.map(async (element) => {
            if (element.user) {
                user = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({ where: { userid: element.user } });
                element.uploadedby = user.firstname;
            }
            else if (element.customer) {
                customer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findUnique({ where: { customerid: element.customer } });
                element.uploadedby = customer.firstname;
            }
        }));
    }
    return data;
};
const getLeadFilesForOpportunity = async (leadid) => {
    let leadFiles;
    if (leadid) {
        leadFiles = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findMany({
            where: { leadid: leadid, ispreorpost: 0 }
        });
    }
    else {
        leadFiles = [];
    }
    return leadFiles;
};


/***/ }),

/***/ "./src/api/leads/Queries/getLeadDetailsById.ts":
/*!*****************************************************!*\
  !*** ./src/api/leads/Queries/getLeadDetailsById.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getLeadDetailsById": () => (/* binding */ getLeadDetailsById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const getLeadDetailsById = async (parent, args, context) => {
    const { leadid } = args;
    const getLeadByIdResponse = { code: 200, message: null, data: null };
    const fetchedLeadById = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({
        where: {
            sfid: leadid
        }
    });
    getLeadByIdResponse.code = fetchedLeadById ? 200 : 400;
    getLeadByIdResponse.message = fetchedLeadById ? null : "No lead found for the given leadid";
    getLeadByIdResponse.data = fetchedLeadById ? fetchedLeadById : null;
    return getLeadByIdResponse;
};


/***/ }),

/***/ "./src/api/leads/Queries/getMyLeads.ts":
/*!*********************************************!*\
  !*** ./src/api/leads/Queries/getMyLeads.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMyLeads": () => (/* binding */ getMyLeads)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");



const getMyLeads = async (_root, args, _context) => {
    var _a;
    const myLeadResponse = { code: 200, message: "success", data: null };
    try {
        const { searchText, filterPreset, sortByMeetingScheduled, sortByName } = args;
        let user;
        try {
            user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(_context, "DD");
        }
        catch (error) {
            myLeadResponse.code = 401;
            myLeadResponse.message = error.message;
        }
        if (user) {
            const fetcheduser = await (0,_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_2__.getUser)(user.userid);
            const fetchedProfile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findFirst({
                where: {
                    profileid: fetcheduser[0].profileid,
                },
            });
            console.log(21, fetchedProfile.access_level);
            let whereCondition = {};
            const statusQuery = [
                { status: "Meeting Scheduled" },
                { status: "Meeting Confirmed" },
            ];
            const searchCondition = [
                {
                    name: { contains: searchText ? searchText : "", mode: "insensitive" },
                },
                { mobilephone: { contains: searchText ? searchText : "" } },
            ];
            if (user.salesforceuserid || user.profileid === 8) {
                switch (fetchedProfile.access_level) {
                    case 0:
                        whereCondition = {
                            AND: {
                                OR: statusQuery,
                                AND: {
                                    OR: searchCondition,
                                    AND: createFilterConditions(args),
                                },
                            },
                            design_user__c: user.salesforceuserid,
                        };
                        break;
                    case 1:
                        whereCondition = {
                            AND: {
                                OR: (_a = fetcheduser[0].teams) === null || _a === void 0 ? void 0 : _a.map((team) => {
                                    return {
                                        designer_team_name__c: team.name,
                                    };
                                }),
                                AND: {
                                    OR: statusQuery,
                                    AND: {
                                        OR: searchCondition,
                                        AND: createFilterConditions(args),
                                    },
                                },
                            },
                        };
                        whereCondition.NOT = {
                            design_user__c: null,
                        };
                        break;
                    case 2:
                        whereCondition = {};
                        whereCondition.AND = {
                            OR: fetcheduser[0].experiencecenters.map((expCenter) => {
                                return {
                                    meeting_venue__c: expCenter.name,
                                };
                            }),
                            AND: {
                                OR: statusQuery,
                                AND: {
                                    OR: searchCondition,
                                    AND: createFilterConditions(args),
                                },
                            },
                        };
                        whereCondition.NOT = {
                            design_user__c: null,
                        };
                        break;
                    case 3:
                        whereCondition = {};
                        whereCondition.AND = {
                            OR: fetcheduser[0].cities.map((city) => {
                                return {
                                    region__c: city.name,
                                };
                            }),
                            AND: {
                                OR: statusQuery,
                                AND: {
                                    OR: searchCondition,
                                    AND: createFilterConditions(args),
                                },
                            },
                        };
                        whereCondition.NOT = {
                            design_user__c: null,
                        };
                        break;
                    case 4:
                        whereCondition = {
                            OR: searchCondition,
                            NOT: {
                                design_user__c: null,
                            },
                            AND: {
                                OR: statusQuery,
                                AND: createFilterConditions(args),
                            },
                        };
                        break;
                    default:
                        myLeadResponse.code = 400;
                        myLeadResponse.message = "Profile not set for given user";
                        return myLeadResponse;
                }
                switch (filterPreset) {
                    case 1:
                        whereCondition.design_user__c = null;
                        break;
                    case 2:
                        break;
                    case 3:
                        whereCondition.AND.AND.OR = { status: "Meeting Scheduled" };
                        break;
                    case 4:
                        whereCondition.AND.AND.OR = { status: "Meeting Confirmed" };
                        break;
                    default:
                        break;
                }
                const orderByArr = [];
                if (sortByMeetingScheduled) {
                    orderByArr.push({
                        willingness_for_meeting__c: sortByMeetingScheduled,
                    });
                }
                if (sortByName) {
                    orderByArr.push({ name: sortByName });
                }
                console.log(9494, JSON.stringify(whereCondition));
                const myLeads = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({
                    where: whereCondition,
                    orderBy: orderByArr,
                });
                myLeadResponse.data = [...myLeads];
                console.log(143, myLeads.length);
            }
            else {
                myLeadResponse.code = 200;
                myLeadResponse.data = [];
                myLeadResponse.message =
                    "No salesforce id tagged to this particular user";
            }
        }
        else {
            myLeadResponse.code = 400;
            myLeadResponse.message = "No User found with given id";
        }
    }
    catch (e) {
        console.log(e);
        myLeadResponse.message = e.message;
        myLeadResponse.data = null;
    }
    return myLeadResponse;
};
const createFilterConditions = (args) => {
    const { fromDate, toDate, teamNames, designerNames, citys, experienceCenters, } = args;
    const filterConditions = {};
    const orCondition = [];
    if (teamNames) {
        teamNames.forEach((teamName) => {
            orCondition.push({
                designer_team_name__c: { contains: teamName, mode: "insensitive" },
            });
        });
    }
    filterConditions.AND = orCondition;
    if (designerNames) {
        designerNames.forEach((designerName) => {
            orCondition.push({
                design_user_name__c: { contains: designerName, mode: "insensitive" },
            });
        });
    }
    filterConditions.AND = orCondition;
    if (citys) {
        citys.forEach((cityName) => {
            orCondition.push({
                region__c: { contains: cityName, mode: "insensitive" },
            });
        });
    }
    filterConditions.AND = orCondition;
    if (experienceCenters) {
        experienceCenters.forEach((experienceCenter) => {
            orCondition.push({
                meeting_venue__c: { contains: experienceCenter, mode: "insensitive" },
            });
        });
    }
    filterConditions.AND = orCondition;
    console.log(fromDate, toDate);
    if (fromDate && toDate) {
        orCondition.push({
            willingness_for_meeting__c: {
                gte: fromDate,
                lte: toDate,
            },
        });
    }
    filterConditions.AND = orCondition;
    console.log("filterConditions", JSON.stringify(filterConditions));
    return filterConditions;
};


/***/ }),

/***/ "./src/api/leads/Queries/getRequirements.ts":
/*!**************************************************!*\
  !*** ./src/api/leads/Queries/getRequirements.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRequirements": () => (/* binding */ getRequirements)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);



const getRequirements = async (root, args, context) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    let requirementFormResponseObj;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(context, "DD");
        const kidsArr = [];
        let obj;
        let fetchedLead;
        if (args.leadid) {
            fetchedLead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findFirst({ where: { id: args.leadid } });
            if (!fetchedLead) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "lead not found");
            }
        }
        else if (args.opportunityid) {
            const opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findUnique({
                where: { sfid: args.opportunityid },
            });
            if (!opportunity) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "opportunity not found");
            }
            const leadid = opportunity.lead_id__c;
            fetchedLead = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findUnique({ where: { sfid: leadid } });
        }
        if (fetchedLead.gender_of_first_kid__c || fetchedLead.age_of_first_kid__c) {
            obj = {
                gender: fetchedLead.gender_of_first_kid__c,
                age: fetchedLead.age_of_first_kid__c,
            };
            kidsArr.push(obj);
        }
        if (fetchedLead.gender_of_second_kid__c ||
            fetchedLead.age_of_second_kid__c) {
            obj = {
                gender: fetchedLead.gender_of_second_kid__c,
                age: fetchedLead.age_of_second_kid__c,
            };
            kidsArr.push(obj);
        }
        if (fetchedLead.gender_of_third_kid__c || fetchedLead.age_of_third_kid__c) {
            obj = {
                gender: fetchedLead.gender_of_third_kid__c,
                age: fetchedLead.age_of_third_kid__c,
            };
            kidsArr.push(obj);
        }
        if (fetchedLead.gender_of_fourth_kid__c ||
            fetchedLead.age_of_fourth_kid__c) {
            obj = {
                gender: fetchedLead.gender_of_fourth_kid__c,
                age: fetchedLead.age_of_fourth_kid__c,
            };
            kidsArr.push(obj);
        }
        const getLeadFloorPlan = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findFirst({
            where: { id: Number(fetchedLead.floor_plan_attachment_id__c) },
        });
        console.log(987, getLeadFloorPlan);
        const requirementdetails = {
            home_type__c: fetchedLead.home_type__c,
            area__c: fetchedLead.area__c,
            scope_of_work__c: fetchedLead.scope_of_work__c,
            interior_work_needed_for__c: (_a = fetchedLead.interior_work_needed_for__c) === null || _a === void 0 ? void 0 : _a.split(";"),
            where_are_you_currently_located__c: fetchedLead.where_are_you_currently_located__c,
            when_would_you_like_to_have_the_home__c: fetchedLead.when_would_you_like_to_have_the_home__c,
            which_language_are_you_most_comfortable__c: (_b = fetchedLead.which_language_are_you_most_comfortable__c) === null || _b === void 0 ? void 0 : _b.split(";"),
            if_other_languages_please_specify__c: (_c = fetchedLead.if_other_languages_please_specify__c) === null || _c === void 0 ? void 0 : _c.split(";"),
            who_will_be_staying_in_the_house__c: (_d = fetchedLead.who_will_be_staying_in_the_house__c) === null || _d === void 0 ? void 0 : _d.split(";"),
            kids_details: kidsArr,
            do_you_have_pets__c: fetchedLead.do_you_have_pets__c,
            live__c: (_e = fetchedLead.live__c) === null || _e === void 0 ? void 0 : _e.split(";"),
            others_for_live__c: fetchedLead.others_for_live__c,
            work__c: fetchedLead.work__c,
            eat__c: (_f = fetchedLead.eat__c) === null || _f === void 0 ? void 0 : _f.split(";"),
            play__c: (_g = fetchedLead.play__c) === null || _g === void 0 ? void 0 : _g.split(";"),
            others_for_play__c: fetchedLead.others_for_play__c,
            civil_work__c: fetchedLead.civil_work__c ? "Yes" : "No",
            requirement_details__c: (_h = fetchedLead.requirement_details__c) === null || _h === void 0 ? void 0 : _h.split(";"),
            property_usage__c: fetchedLead.property_usage__c,
            site_service_needed_for__c: (_j = fetchedLead.site_service_needed_for__c) === null || _j === void 0 ? void 0 : _j.split(";"),
            floor_plan: {
                id: getLeadFloorPlan === null || getLeadFloorPlan === void 0 ? void 0 : getLeadFloorPlan.leadid,
                documents: [
                    {
                        filename: getLeadFloorPlan === null || getLeadFloorPlan === void 0 ? void 0 : getLeadFloorPlan.filekey,
                        Content_Type: getLeadFloorPlan === null || getLeadFloorPlan === void 0 ? void 0 : getLeadFloorPlan.contenttype,
                        data: getLeadFloorPlan === null || getLeadFloorPlan === void 0 ? void 0 : getLeadFloorPlan.location,
                    },
                ],
            },
        };
        console.log("requirementdetails", requirementdetails);
        const Data = {
            requirementformdetails: requirementdetails,
        };
        requirementFormResponseObj = { code: 200, message: "success", data: Data };
        return requirementFormResponseObj;
    }
    catch (error) {
        requirementFormResponseObj = { code: 400, message: error.message };
        return requirementFormResponseObj;
    }
};


/***/ }),

/***/ "./src/api/leads/resolver.ts":
/*!***********************************!*\
  !*** ./src/api/leads/resolver.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "leadsResolver": () => (/* binding */ leadsResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_getBroadCastLeadsForUser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/getBroadCastLeadsForUser */ "./src/api/leads/Queries/getBroadCastLeadsForUser.ts");
/* harmony import */ var _Mutations_acceptRejectLeads__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutations/acceptRejectLeads */ "./src/api/leads/Mutations/acceptRejectLeads.ts");
/* harmony import */ var _Mutations_assignTeamToLead__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mutations/assignTeamToLead */ "./src/api/leads/Mutations/assignTeamToLead.ts");
/* harmony import */ var _Queries_getLeadDetailsById__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Queries/getLeadDetailsById */ "./src/api/leads/Queries/getLeadDetailsById.ts");
/* harmony import */ var _Queries_getMyLeads__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Queries/getMyLeads */ "./src/api/leads/Queries/getMyLeads.ts");
/* harmony import */ var _Queries_getRequirements__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Queries/getRequirements */ "./src/api/leads/Queries/getRequirements.ts");
/* harmony import */ var _Mutations_editRequirements__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Mutations/editRequirements */ "./src/api/leads/Mutations/editRequirements.ts");
/* harmony import */ var _Mutations_updateDesigner__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Mutations/updateDesigner */ "./src/api/leads/Mutations/updateDesigner.ts");
/* harmony import */ var _Mutations_uploadLeadFiles__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Mutations/uploadLeadFiles */ "./src/api/leads/Mutations/uploadLeadFiles.ts");
/* harmony import */ var _Mutations_uploadFilesInLead__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Mutations/uploadFilesInLead */ "./src/api/leads/Mutations/uploadFilesInLead.ts");
/* harmony import */ var _Queries_getLeadAttachments__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Queries/getLeadAttachments */ "./src/api/leads/Queries/getLeadAttachments.ts");
/* harmony import */ var _Mutations_assignDesignerToLeadsByStudioManger__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Mutations/assignDesignerToLeadsByStudioManger */ "./src/api/leads/Mutations/assignDesignerToLeadsByStudioManger.ts");













const leadsResolver = {
    Query: {
        getLeadDetailsById: async (parent, _args, context) => (0,_Queries_getLeadDetailsById__WEBPACK_IMPORTED_MODULE_4__.getLeadDetailsById)(parent, _args, context),
        getBroadcastLeadsForUser: async (parent, _args, context) => (0,_Queries_getBroadCastLeadsForUser__WEBPACK_IMPORTED_MODULE_1__.getBrodcastLeadsForUser)(parent, _args, context),
        getMyLeads: async (parent, _args, context) => (0,_Queries_getMyLeads__WEBPACK_IMPORTED_MODULE_5__.getMyLeads)(parent, _args, context),
        getRequirements: async (parent, _args, context) => (0,_Queries_getRequirements__WEBPACK_IMPORTED_MODULE_6__.getRequirements)(parent, _args, context),
        getLeadAttachments: async (parent, _args, context) => (0,_Queries_getLeadAttachments__WEBPACK_IMPORTED_MODULE_11__.getLeadAttachments)(parent, _args, context),
    },
    Mutation: {
        acceptRejectLeads: async (parent, _args, context) => (0,_Mutations_acceptRejectLeads__WEBPACK_IMPORTED_MODULE_2__.acceptRejectLeads)(parent, _args, context),
        assignTeamsToLead: async (parent, _args, context) => (0,_Mutations_assignTeamToLead__WEBPACK_IMPORTED_MODULE_3__.assignTeamToLead)(parent, _args, context),
        editRequirements: async (parent, _args, context) => (0,_Mutations_editRequirements__WEBPACK_IMPORTED_MODULE_7__.editRequirements)(parent, _args, context),
        uploadLeadFiles: async (parent, _args, context) => (0,_Mutations_uploadLeadFiles__WEBPACK_IMPORTED_MODULE_9__.uploadLeadFiles)(parent, _args, context),
        uploadFilesInLeads: async (parent, _args, context) => (0,_Mutations_uploadFilesInLead__WEBPACK_IMPORTED_MODULE_10__.uploadFilesInLeads)(parent, _args, context),
        updateDesigner: async (parent, _args, context) => (0,_Mutations_updateDesigner__WEBPACK_IMPORTED_MODULE_8__.updateDesigner)(parent, _args, context),
        assignDesigerToLeads: async (parent, _args, context) => (0,_Mutations_assignDesignerToLeadsByStudioManger__WEBPACK_IMPORTED_MODULE_12__.assignDesigerToLeads)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/leads/typedef.ts":
/*!**********************************!*\
  !*** ./src/api/leads/typedef.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "leadsTypedef": () => (/* binding */ leadsTypedef)
/* harmony export */ });
const leadsTypedef = `
    type Leads{
        sfid:String
        id:Int
        firstname:String
        lastname:String
        middlename:String
        mobilephone:String
        status:String
        dsa_code__c:String
        designer_team_name__c:String
        name:String
        region__c:String
        broadcast_status__c:String
        willingness_for_meeting__c: DateTime
        meeting_venue__c: String,
        design_user__c:String,
        has_designer_accepted__c:String
        meeting_type__c:String     
        approx_budget__c:String
        design_user_name__c:String
        email:String
        propertyaddress__c:String
        property_type__c:String
        rejected_by__c:String 
        client_s_budget__c:Float
        lead_owner_name__c:String
        home_type__c: String
    }

    type RequirementFormDD {
        id: Int
        requirementformdetails: JSON
        user: Int
        leadid: Int
        created_at: DateTime
        updated_at: DateTime
    }

    type LeadsResponse{
        code:Int
        message:String,
        data:[Leads]
    }

    type AcceptLeadsResponse{
        code:Int
        message:String,
        data:Leads
    }

    type LeadDetailsRepsone{
        code:Int
        message:String,
        data:Leads
    }

    type AssignTeamsToLeadResponse{
        code:Int
        message:String
    }
    type requirementFormDDResponse { 
        code:Int
        message: String
        data:RequirementFormDD
    }
    type updateDesignerResponse { 
        code:Int
        message: String
    }
    type uploadLeadFilesResponse { 
        code:Int
        message: String
        data:[JSON]
    }
    type uploadFilesResponse { 
        code:Int
        message: String
        data:JSON
    }

    type LeadFiles {
        id: Int
        filekey: String
        contenttype: String
        location: String
        leadid: String
        opportunityid: String
        uploadedby: String
        created_at: DateTime
    }
    type getLeadFilesResponse { 
        code:Int
        message: String
        data:[LeadFiles]
    }

    type Mutation{
        acceptRejectLeads(isAccept:Int,leadSfId:String):AcceptLeadsResponse
        assignDesigerToLeads(userId:Int,leadSfId:String,designerToBeAssigned:String):AcceptLeadsResponse
        assignTeamsToLead(leadId:String):AssignTeamsToLeadResponse
        editRequirements(requirementdetails:JSON!,leadid:Int!,requirementid:Int):requirementFormDDResponse
        updateDesigner(designerId:Int!,leadSfId:String):updateDesignerResponse
        uploadLeadFiles(leadAttachment:[JSON],leadid:String,opportunityid: String):uploadLeadFilesResponse
        uploadFilesInLeads(leadid:String, opportunityid:String, base64:String, filekey:String, contentType:String): uploadFilesResponse
    }

    type Query{
        getBroadcastLeadsForUser:LeadsResponse
        getLeadDetailsById(leadid:String):LeadDetailsRepsone
        getMyLeads(searchText:String,
                    filterPreset:Int,
                    fromDate:DateTime,
                    toDate:DateTime,
                    teamNames:[String],
                    designerNames:[String],
                    citys:[String],
                    experienceCenters:[String],
                    sortByMeetingScheduled:String,
                    sortByName:String):LeadsResponse
        getRequirements(leadid:Int,opportunityid:String):requirementFormDDResponse
        getLeadAttachments(leadid:String,opportunityid:String,type:Int!):getLeadFilesResponse

    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/opportunities/Mutation/assignDesignerToOpportunity.ts":
/*!***********************************************************************!*\
  !*** ./src/api/opportunities/Mutation/assignDesignerToOpportunity.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assignDesignerToOpportunity": () => (/* binding */ assignDesignerToOpportunity)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");


const assignDesignerToOpportunity = async (_root, args, _context) => {
    const { opportunitySFId, designerSFId } = args;
    try {
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.update({
            data: {
                design_user__c: designerSFId
            },
            where: {
                sfid: opportunitySFId
            }
        });
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 200;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = "Designer Assigned Successfully to the Opportunity";
    }
    catch (e) {
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = e.message;
    }
    return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
};


/***/ }),

/***/ "./src/api/opportunities/Queries/getMyOpportunities.ts":
/*!*************************************************************!*\
  !*** ./src/api/opportunities/Queries/getMyOpportunities.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMyOpportunities": () => (/* binding */ getMyOpportunities)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");



const getMyOpportunities = async (_parent, args, _context) => {
    var _a;
    const myOpportunitiesResponse = { code: 200, message: "success", data: null };
    try {
        const { searchText, filterPreset, sortByMeetingScheduled, sortByName } = args;
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(_context, "DD");
        if (user) {
            const fetcheduser = await (0,_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_2__.getUser)(user.userid);
            const fetchedProfile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_profile.findFirst({
                where: {
                    profileid: fetcheduser[0].profileid,
                },
            });
            let whereCondition = {};
            const searchCondition = [
                {
                    name: { contains: searchText ? searchText : "", mode: "insensitive" },
                },
                { mobile__c: { contains: searchText ? searchText : "" } },
            ];
            console.log(32, fetchedProfile.access_level);
            switch (fetchedProfile.access_level) {
                case 0:
                    whereCondition = {
                        design_user__c: user.salesforceuserid,
                        OR: searchCondition,
                        AND: createFilterConditions(args),
                    };
                    break;
                case 1:
                    whereCondition = {
                        AND: {
                            OR: (_a = fetcheduser[0].teams) === null || _a === void 0 ? void 0 : _a.map((team) => {
                                return {
                                    studio_name__c: team.name,
                                };
                            }),
                            AND: createFilterConditions(args),
                        },
                        OR: searchCondition,
                    };
                    break;
                case 2:
                    whereCondition = {
                        AND: {
                            OR: fetcheduser[0].experiencecenters.map((expCenter) => {
                                return {
                                    meeting_venue__c: expCenter.name,
                                };
                            }),
                            AND: createFilterConditions(args),
                        },
                        OR: searchCondition,
                    };
                    break;
                case 3:
                    whereCondition = {
                        AND: {
                            OR: fetcheduser[0].cities.map((city) => {
                                return {
                                    region__c: city.name,
                                };
                            }),
                            AND: createFilterConditions(args),
                        },
                        OR: searchCondition,
                    };
                    break;
                case 4:
                    whereCondition = {
                        OR: searchCondition,
                        AND: createFilterConditions(args),
                    };
                    break;
                default:
                    myOpportunitiesResponse.code = 400;
                    myOpportunitiesResponse.message = "Profile not set for given user";
                    return myOpportunitiesResponse;
            }
            switch (filterPreset) {
                case 1:
                    whereCondition.stagename = "Pending Quote Upload";
                    break;
                case 2:
                    whereCondition.stagename = "Meeting Done";
                    break;
                case 3:
                    whereCondition.stagename = "Proposal Sent";
                    break;
                case 4:
                    whereCondition.stagename = "Awaiting Closure";
                    break;
                case 5:
                    whereCondition.stagename = "Closed Won";
                    break;
                case 6:
                    whereCondition.stagename = "Closed Lost";
                    break;
                default:
                    break;
            }
            const orderByArr = [];
            if (sortByMeetingScheduled) {
                orderByArr.push({ createddate: sortByMeetingScheduled });
            }
            if (sortByName) {
                orderByArr.push({ name: sortByName });
            }
            console.log("whereCondition", JSON.stringify(whereCondition));
            const fetchedOpportunities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.opportunity.findMany({
                where: whereCondition,
                orderBy: orderByArr,
            });
            myOpportunitiesResponse.data = [...fetchedOpportunities];
            console.log(1111, fetchedOpportunities.length);
        }
        else {
            myOpportunitiesResponse.code = 400;
            myOpportunitiesResponse.message = "User Id Not Provided";
        }
    }
    catch (e) {
        myOpportunitiesResponse.code = 400;
        myOpportunitiesResponse.message = e.message;
        myOpportunitiesResponse.data = null;
    }
    return myOpportunitiesResponse;
};
const createFilterConditions = (args) => {
    const { fromDate, toDate, designerNames, stageNames, experienceCenters, regions, teams, } = args;
    const filterConditions = {};
    const orCondition = [];
    if (stageNames) {
        stageNames.forEach((stageName) => {
            orCondition.push({
                stagename: { contains: stageName },
            });
        });
    }
    filterConditions.AND = orCondition;
    if (teams) {
        teams.forEach((team) => {
            orCondition.push({
                studio_name__c: { contains: team, mode: "insensitive" },
            });
        });
    }
    filterConditions.AND = orCondition;
    if (designerNames) {
        designerNames.forEach((designerName) => {
            orCondition.push({
                design_user_name__c: { contains: designerName, mode: "insensitive" },
            });
        });
    }
    filterConditions.AND = orCondition;
    if (experienceCenters) {
        experienceCenters.forEach((experienceCenter) => {
            orCondition.push({
                meeting_venue__c: { contains: experienceCenter, mode: "insensitive" },
            });
        });
    }
    filterConditions.AND = orCondition;
    if (regions) {
        regions.forEach((region) => {
            orCondition.push({
                region__c: { contains: region, mode: "insensitive" },
            });
        });
    }
    filterConditions.AND = orCondition;
    if (fromDate && toDate) {
        orCondition.push({
            createddate: {
                gte: fromDate,
                lte: toDate,
            },
        });
    }
    filterConditions.AND = orCondition;
    return filterConditions;
};


/***/ }),

/***/ "./src/api/opportunities/Queries/getOpportunityById.ts":
/*!*************************************************************!*\
  !*** ./src/api/opportunities/Queries/getOpportunityById.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getOpportunityDetailsById": () => (/* binding */ getOpportunityDetailsById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");
/* harmony import */ var _users_Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../users/Queries/GetAllUsers */ "./src/api/users/Queries/GetAllUsers.ts");



const getOpportunityDetailsById = async (_root, args, _context) => {
    const { opportunityId } = args;
    try {
        const fetchedOpportunityDetails = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
            where: {
                sfid: opportunityId
            },
            include: {
                designerUser: {
                    include: {
                        users_city: {
                            include: { city: true },
                        },
                        users_team: {
                            include: { team: true },
                        },
                        users_experiencecenters: {
                            include: { center: true }
                        }
                    }
                }
            }
        });
        console.log(29, fetchedOpportunityDetails);
        if (fetchedOpportunityDetails) {
            const designUser = (0,_users_Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_2__.mapAllUsers)((fetchedOpportunityDetails === null || fetchedOpportunityDetails === void 0 ? void 0 : fetchedOpportunityDetails.designerUser) ? [fetchedOpportunityDetails === null || fetchedOpportunityDetails === void 0 ? void 0 : fetchedOpportunityDetails.designerUser] : []);
            if (designUser) {
                fetchedOpportunityDetails.designerUser = designUser[0];
            }
            _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 200;
            _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.data = fetchedOpportunityDetails;
        }
        else {
            _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
            _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = "No Opportunity found with the given id";
        }
    }
    catch (e) {
        console.log(e);
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = e.message;
    }
    return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
};


/***/ }),

/***/ "./src/api/opportunities/resolver.ts":
/*!*******************************************!*\
  !*** ./src/api/opportunities/resolver.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "opportunityResolver": () => (/* binding */ opportunityResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Mutation_assignDesignerToOpportunity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mutation/assignDesignerToOpportunity */ "./src/api/opportunities/Mutation/assignDesignerToOpportunity.ts");
/* harmony import */ var _Queries_getMyOpportunities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Queries/getMyOpportunities */ "./src/api/opportunities/Queries/getMyOpportunities.ts");
/* harmony import */ var _Queries_getOpportunityById__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Queries/getOpportunityById */ "./src/api/opportunities/Queries/getOpportunityById.ts");




const opportunityResolver = {
    Query: {
        getMyOpportunities: (parent, _args, context) => (0,_Queries_getMyOpportunities__WEBPACK_IMPORTED_MODULE_2__.getMyOpportunities)(parent, _args, context),
        getOpportunityDetailsById: (parent, _args, context) => (0,_Queries_getOpportunityById__WEBPACK_IMPORTED_MODULE_3__.getOpportunityDetailsById)(parent, _args, context)
    },
    Mutation: {
        assignDesignerToOpportunity: (parent, _args, context) => (0,_Mutation_assignDesignerToOpportunity__WEBPACK_IMPORTED_MODULE_1__.assignDesignerToOpportunity)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/opportunities/typedef.ts":
/*!******************************************!*\
  !*** ./src/api/opportunities/typedef.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "opportunityTypedef": () => (/* binding */ opportunityTypedef)
/* harmony export */ });
const opportunityTypedef = `
    type Opportunity{
        sfid:String
        id:Int
        name:String
        stagename:String
        team__c:String
        lead_id__c:String
        design_user__c:String
        design_user_name__c: String
        client_s_budget__c:Float
        signup_amount__c:Float
        amount:Float
        proposed_budget__c:Float
        studio_name__c:String
        mobile__c:String
        meeting_venue__c:String
        createddate:DateTime
        region__c:String
    }

    type GetOpportunityById{
        sfid:String
        name:String
        email__c:String
        mobile__c:String
        customer_id__c:String
        amount:Float
        stagename:String
        salesmanagername__c:String
        property_address__c:String
        home_type__c:String
        studio_name__c:String
        designer_user__c:String
        client_s_budget__c:String
        designerUser:Users
        region__c:String
        createddate:DateTime
    }

    type AssignDesignerToOpportunityResponse{
        code:Int
        message:String
    }

    type GetMyOpportunity{
        code:Int,
        message:String,
        data:[Opportunity]
    }

    type GetOpportunityDetailsByIdResponse{
        code:Int,
        message:String,
        data:GetOpportunityById
    }

    type Query{
        getMyOpportunities(
            searchText:String,
            filterPreset:Int,
            fromDate:DateTime,
            toDate:DateTime,
            designerNames:[String],
            stageNames:[String],
            experienceCenters:[String],
            regions:[String],
            teams:[String],
            sortByMeetingScheduled:String,
            sortByName:String):GetMyOpportunity
        
        getOpportunityDetailsById(opportunityId:String):GetOpportunityDetailsByIdResponse
    }

    type Mutation{
        assignDesignerToOpportunity(opportunitySFId:String,designerSFId:String):AssignDesignerToOpportunityResponse
    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/paymentMicroservice/authentication/Mutation/AuthenticationToken.ts":
/*!************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/authentication/Mutation/AuthenticationToken.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class AuthenticationToken extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    async authenticationTokenData(clientId) {
        return this.post('authenticate', {
            clientId
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuthenticationToken);


/***/ }),

/***/ "./src/api/paymentMicroservice/authentication/resolver.ts":
/*!****************************************************************!*\
  !*** ./src/api/paymentMicroservice/authentication/resolver.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "authenticationTokenReslover": () => (/* binding */ authenticationTokenReslover)
/* harmony export */ });
const authenticationTokenReslover = {
    Mutation: {
        AuthenticationToken: async (_, { clientId }, { dataSources }) => dataSources.AuthenticationToken.authenticationTokenData(clientId)
    },
};


/***/ }),

/***/ "./src/api/paymentMicroservice/authentication/typedef.ts":
/*!***************************************************************!*\
  !*** ./src/api/paymentMicroservice/authentication/typedef.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "authenticationTokenTypedef": () => (/* binding */ authenticationTokenTypedef)
/* harmony export */ });
const authenticationTokenTypedef = `
scalar JSON
type authenticationdata{
    statusCode:Int
    code:Int
    message:String
    accessToken:String
}
type Mutation {
    AuthenticationToken(clientId:String):authenticationdata
}
`;


/***/ }),

/***/ "./src/api/paymentMicroservice/customer/Mutations/UpdateCustomer.ts":
/*!**************************************************************************!*\
  !*** ./src/api/paymentMicroservice/customer/Mutations/UpdateCustomer.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class UpdateCustomer extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set('Authorization', this.context.headers.authorization);
        console.log(request.headers);
    }
    async updateCustomerData(args) {
        const { PAN, l10n_in_gst_treatment, GST, customerPhone, customerName, customerEmail, customerBillingAddress } = args.customer;
        return this.put('customer', {
            PAN,
            l10n_in_gst_treatment,
            GST,
            customerPhone,
            customerName,
            customerEmail,
            customerBillingAddress
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UpdateCustomer);


/***/ }),

/***/ "./src/api/paymentMicroservice/customer/Queries/getCustomerAddress.ts":
/*!****************************************************************************!*\
  !*** ./src/api/paymentMicroservice/customer/Queries/getCustomerAddress.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCustomerAddress": () => (/* binding */ getCustomerAddress)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");

const getCustomerAddress = async (root, args, context) => {
    let CustomerAddressResponseObj;
    try {
        const customer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({ where: { customerid: args.customerid } });
        const customerInfo = {
            customername: customer.firstname,
            customeremail: customer.customeremail,
            customerphone: customer.customerphone,
            pan: customer.pancardno,
            gst: customer.gstno
        };
        const address = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.findFirst({ where: { customerid: args.customerid, addresstype: 1 } });
        console.log("address", address);
        const billingAddress = {
            zip: address.zip,
            street: address.street,
            state: address.state,
            city: address.city,
            country: address.country
        };
        let shippingAddress = null;
        const CustomerSaddress = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.findFirst({ where: { addresstype: 2, customerid: args.customerid } });
        console.log(CustomerSaddress);
        if (CustomerSaddress) {
            shippingAddress = {
                zip: CustomerSaddress.zip,
                street: CustomerSaddress.street,
                state: CustomerSaddress.state,
                city: CustomerSaddress.city,
                country: CustomerSaddress.country
            };
        }
        CustomerAddressResponseObj = {
            code: 200, message: "success", customerInfo: customerInfo, billingAddress: billingAddress, shippingAddress: shippingAddress
        };
        return CustomerAddressResponseObj;
    }
    catch (error) {
        CustomerAddressResponseObj = { code: 400, message: error.message };
        return CustomerAddressResponseObj;
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/customer/resolver.ts":
/*!**********************************************************!*\
  !*** ./src/api/paymentMicroservice/customer/resolver.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "customerPaymentReslovers": () => (/* binding */ customerPaymentReslovers)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_getCustomerAddress__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/getCustomerAddress */ "./src/api/paymentMicroservice/customer/Queries/getCustomerAddress.ts");


const customerPaymentReslovers = {
    Mutation: {
        UpdateCustomer: async (_, args, { dataSources, req }) => dataSources.UpdateCustomer.updateCustomerData(args, req)
    },
    Query: {
        getCustomerAddress: async (parent, _args, context) => (0,_Queries_getCustomerAddress__WEBPACK_IMPORTED_MODULE_1__.getCustomerAddress)(parent, _args, context),
    },
    JSON: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.GraphQLJSON
};


/***/ }),

/***/ "./src/api/paymentMicroservice/customer/typedefs.ts":
/*!**********************************************************!*\
  !*** ./src/api/paymentMicroservice/customer/typedefs.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "customerPaymentTypedef": () => (/* binding */ customerPaymentTypedef)
/* harmony export */ });
const customerPaymentTypedef = `
scalar JSON

type customerdata{
    statusCode:Int
    message:String
    code:Int
}
input AddressToBeUpdated{
    zipOrPostalCode:String
    street:String
    state:String
    country:String
    city:String
}

type addressResponse{
    message:String
    code:Int
    customerInfo:JSON
    billingAddress:JSON
    shippingAddress:JSON
}

input CustomerToBeUpdated{
    PAN: String
    l10n_in_gst_treatment: String
    GST: String
    customerPhone: String
    customerName: String
    customerEmail: String
    customerBillingAddress: [AddressToBeUpdated]
}


type Mutation {
UpdateCustomer(customer:CustomerToBeUpdated):customerdata
}

type Query {
    getCustomerAddress(customerid:Int):addressResponse
}
`;


/***/ }),

/***/ "./src/api/paymentMicroservice/invoice/Mutation/CalculateInvoicenewflow.ts":
/*!*********************************************************************************!*\
  !*** ./src/api/paymentMicroservice/invoice/Mutation/CalculateInvoicenewflow.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CalculateInvoicenewflow": () => (/* binding */ CalculateInvoicenewflow)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_enumerations_PaymentCategoryEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/PaymentCategoryEnum */ "./src/domain/enumerations/PaymentCategoryEnum.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _domain_Requestdata_Invoicegenerationrequestmodel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../domain/Requestdata/Invoicegenerationrequestmodel */ "./src/domain/Requestdata/Invoicegenerationrequestmodel.ts");





const CalculateInvoicenewflow = async (root, args, context) => {
    const { category, clientid, milestoneName } = args;
    let baseAmount;
    const additionalCharge = 0;
    const defaultStatus = "Draft";
    const Invoice = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_odooinvoice.findFirst({
        where: {
            category: category,
            clientid: clientid,
            milestone: milestoneName,
        },
    });
    if (Invoice) {
        return {
            code: 200,
            message: "Invoice Already available",
            data: Invoice
        };
    }
    else {
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: {
                projectid: clientid
            }
        });
        const invoicecalculatedAmount = await calculateInvoiceAmount(category, milestoneName, project);
        baseAmount = Math.floor((invoicecalculatedAmount * 100) / 118);
        const payMiRequestObj = new _domain_Requestdata_Invoicegenerationrequestmodel__WEBPACK_IMPORTED_MODULE_4__["default"]();
        payMiRequestObj.milestone = milestoneName;
        payMiRequestObj.clientID = clientid;
        payMiRequestObj.category = category;
        payMiRequestObj.currentProjectValue = project.totalprojectvalue;
        payMiRequestObj.currentModularValue = project.projectmodularvalue;
        payMiRequestObj.currentSiteServicesValue = project.projectsiteservicesvalue;
        payMiRequestObj.baseAmount = baseAmount;
        payMiRequestObj.additionalCharge = additionalCharge;
        payMiRequestObj.status = defaultStatus;
        const paymiRes = await getPaymiConnection();
        const authToken = paymiRes.accessToken;
        console.log(payMiRequestObj);
        const url = process.env.apiEndpoint + "generateNewProjectInvoice";
        const payMiResponse = await superagent__WEBPACK_IMPORTED_MODULE_3___default().post(url)
            .send({ invoiceData: payMiRequestObj })
            .set("Content-Type", "application/json")
            .set("Authorization", authToken);
        console.log(payMiResponse.body);
        if (payMiResponse.body.statusCode !== 200) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, payMiResponse.body.message);
        }
        if (!payMiResponse.body.data.invoiceId) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, "Invalid Microservice response body");
        }
        return {
            code: 200,
            message: "Invoice amount generated successfully",
            data: invoicecalculatedAmount,
        };
    }
};
const calculateInvoiceAmount = async (category, mileStone, project) => {
    let totalAmount;
    if (category.toLowerCase() === _domain_enumerations_PaymentCategoryEnum__WEBPACK_IMPORTED_MODULE_1__["default"].MODULAR) {
        totalAmount = project.projectmodularvalue;
        let milestoneAmountValue;
        if (mileStone === "15%") {
            milestoneAmountValue = (totalAmount * 20) / 100;
        }
        else if (mileStone === "35%") {
            milestoneAmountValue = (totalAmount * 55) / 100;
        }
        else if (mileStone === "45%") {
            milestoneAmountValue = totalAmount;
        }
        else {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, "Modular MileStone Mismatch");
        }
        const invoiceAmount = await calculateFinalAmount(category, project);
        return milestoneAmountValue - invoiceAmount;
    }
    else if (category.toLowerCase() === _domain_enumerations_PaymentCategoryEnum__WEBPACK_IMPORTED_MODULE_1__["default"].SITE_SERVICE) {
        totalAmount = project.projectsiteservicesvalue;
        let milestoneAmountValue;
        if (mileStone === "45%") {
            milestoneAmountValue = (totalAmount * 50) / 100;
        }
        else if (mileStone === "50%") {
            milestoneAmountValue = totalAmount;
        }
        else {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, "Site Services MileStone Mismatch");
        }
        const invoiceAmount = await calculateFinalAmount(category, project);
        return milestoneAmountValue - invoiceAmount;
    }
    else {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, "Payment Category Mismatch");
    }
};
const calculateFinalAmount = async (category, project) => {
    let invoiceAmount = 0;
    const invoices = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_odooinvoice.findMany({
        where: {
            category: category,
            clientid: project.projectid,
        }
    });
    if (invoices) {
        for (const invoice of invoices) {
            console.log(invoice);
            invoiceAmount = invoiceAmount + invoice.invoiceamount;
        }
    }
    return invoiceAmount;
};
const getPaymiConnection = async () => {
    const finalUrl = process.env.apiEndpoint + "authenticate";
    console.log(finalUrl);
    const reqBody = {
        clientId: process.env.CDClientId
    };
    try {
        const res = await superagent__WEBPACK_IMPORTED_MODULE_3___default().post(finalUrl)
            .set("Content-Type", "application/json")
            .send(reqBody);
        return res.body;
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/invoice/Mutation/GenerateInvoicenewflow.ts":
/*!********************************************************************************!*\
  !*** ./src/api/paymentMicroservice/invoice/Mutation/GenerateInvoicenewflow.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class GenerateInvoicenewflow extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set('Authorization', this.context.headers.authorization);
    }
    async generateInvoiceNewFlowData(args) {
        const { invoiceData } = args;
        const { milestone, currentProjectValue, clientID, category, currentModularValue, currentSiteServicesValue, baseAmount, additionalCharge, status } = invoiceData;
        return this.post('generateNewProjectInvoice', {
            invoiceData: {
                milestone,
                currentProjectValue,
                clientID,
                category,
                currentModularValue,
                currentSiteServicesValue,
                baseAmount,
                additionalCharge,
                status
            }
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GenerateInvoicenewflow);


/***/ }),

/***/ "./src/api/paymentMicroservice/invoice/Mutation/GenerateInvoiceoldflow.ts":
/*!********************************************************************************!*\
  !*** ./src/api/paymentMicroservice/invoice/Mutation/GenerateInvoiceoldflow.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generateInvoiceOldFlow": () => (/* binding */ generateInvoiceOldFlow)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _domain_Requestdata_Microserviceinvoicerequestmodel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../domain/Requestdata/Microserviceinvoicerequestmodel */ "./src/domain/Requestdata/Microserviceinvoicerequestmodel.ts");





const generateInvoiceOldFlow = async (root, args, context) => {
    const { projectid, milestoneid, isRegenerate } = args;
    const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({ where: { id: projectid } });
    if (project.customerid === null) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, "Customer Information not found");
    }
    else {
        const milestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({ where: { id: milestoneid } });
        const customer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({ where: { customerid: project.customerid } });
        const address = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.findFirst({ where: { customerid: customer.customerid } });
        const billingAddressIn = new _domain_Requestdata_Microserviceinvoicerequestmodel__WEBPACK_IMPORTED_MODULE_4__.AddressModel();
        billingAddressIn.country = address.country;
        billingAddressIn.street = address.street;
        billingAddressIn.city = address.city;
        billingAddressIn.zipOrPostalCode = address.zip;
        billingAddressIn.shippingState = address.state;
        const shippingAddressIn = new _domain_Requestdata_Microserviceinvoicerequestmodel__WEBPACK_IMPORTED_MODULE_4__.AddressModel();
        shippingAddressIn.country = address.country;
        shippingAddressIn.street = address.street;
        shippingAddressIn.city = address.city;
        shippingAddressIn.zipOrPostalCode = address.zip;
        shippingAddressIn.shippingState = address.state;
        const microserviceRequestDataInvoice = new _domain_Requestdata_Microserviceinvoicerequestmodel__WEBPACK_IMPORTED_MODULE_4__["default"]();
        if (milestone.paymentvalue === "5%") {
            microserviceRequestDataInvoice.paymentName = `${milestone.paymentvalue} supply of interior works`;
        }
        else if (milestone.paymentvalue === "100%") {
            microserviceRequestDataInvoice.paymentName = "deep cleaning";
        }
        else {
            microserviceRequestDataInvoice.paymentName = `${milestone.paymentvalue} supply of works`;
        }
        microserviceRequestDataInvoice.customerName = customer.firstname;
        microserviceRequestDataInvoice.customerEmail = customer.customeremail;
        microserviceRequestDataInvoice.customerPhone = customer.customerphone;
        microserviceRequestDataInvoice.customerShippingAddress = shippingAddressIn;
        console.log(shippingAddressIn);
        microserviceRequestDataInvoice.customerBillingAddress = billingAddressIn;
        microserviceRequestDataInvoice.projectID = project.projectid;
        microserviceRequestDataInvoice.projectName = project.projectname;
        microserviceRequestDataInvoice.projectStatus = `${project.projectstatus}`;
        microserviceRequestDataInvoice.requestName = "GENERATE_INVOICE";
        if (milestone.paymentvalue === "5%") {
            microserviceRequestDataInvoice.paymentName = `${milestone.paymentvalue} supply of interior works`;
        }
        else if (milestone.paymentvalue === "100%") {
            microserviceRequestDataInvoice.paymentName = "deep cleaning";
        }
        else {
            microserviceRequestDataInvoice.paymentName = `${milestone.paymentvalue} supply of works`;
        }
        const experienceCenter = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findFirst({ where: { centerid: project.experiencecenterid } });
        microserviceRequestDataInvoice.applicationId = "DESIGNER_DASHBOARD";
        microserviceRequestDataInvoice.invoiceDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()().format("DD/MM/YYYY");
        microserviceRequestDataInvoice.projectValue = Number(project.projectvalue);
        microserviceRequestDataInvoice.amount = Number(milestone.modularamount);
        microserviceRequestDataInvoice.experienceCenter = experienceCenter.name;
        microserviceRequestDataInvoice.milestonePendingDue = Number(milestone.amountdue);
        if (milestone.invoicenumber) {
            microserviceRequestDataInvoice.invoiceNumber = milestone.invoicenumber;
        }
        microserviceRequestDataInvoice.invoiceNumber = "null";
        microserviceRequestDataInvoice.projectModularValue = Number(project.modularvalue);
        microserviceRequestDataInvoice.projectDecorValue = Number(project.decorvalue);
        microserviceRequestDataInvoice.projectSiteServicesValue = Number(project.siteservicevalue);
        if (Number(milestone.addonamount) > 0) {
            const addOnObj = new _domain_Requestdata_Microserviceinvoicerequestmodel__WEBPACK_IMPORTED_MODULE_4__.AddOnPaymentObject();
            addOnObj.amount = Number(milestone.addonamount);
            addOnObj.paymentName = "50% Addon Service";
            addOnObj.quantity = 1;
            microserviceRequestDataInvoice.extraPayments = [addOnObj];
        }
        if (isRegenerate) {
            microserviceRequestDataInvoice.requestName = "REGENERATE_INVOICE";
            microserviceRequestDataInvoice.invoiceNumber = milestone.invoicenumber;
            microserviceRequestDataInvoice.invoiceDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(milestone.invoicedate).format("DD/MM/YYYY");
        }
        microserviceRequestDataInvoice.paymentMilestoneID = milestoneid;
        const url = `${process.env.apiEndpoint}generateInvoice`;
        console.log(url);
        const invoice = await superagent__WEBPACK_IMPORTED_MODULE_3___default().post(url)
            .send({ invoiceData: microserviceRequestDataInvoice })
            .set("Content-Type", "application/json");
        console.log("============================================Invoice: ", JSON.stringify(invoice.body));
        if (invoice.body.statusCode !== 200) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, invoice.body.message);
        }
        if (!invoice.body.data.invoice) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, "Invalid Microservice response body");
        }
        const microserviceResponse = invoice.body.data.invoice;
        let totalExtraPayment = 0;
        if (microserviceResponse.extraPaymentsInvoiceBreakup) {
            microserviceResponse.extraPaymentsInvoiceBreakup.forEach((element) => {
                totalExtraPayment = totalExtraPayment + element.totalAmount;
            });
        }
        const updatedMilestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
            data: {
                invoicebaseamount: microserviceResponse.invoiceBreakUp.baseAmount,
                invoicenumber: microserviceResponse.invoiceNumber,
                invoicetotalamount: microserviceResponse.invoiceBreakUp.totalAmount + totalExtraPayment,
                invoicetotaltaxamount: microserviceResponse.invoiceBreakUp.totalTaxValue,
                invoicetotalcgstaxamount: microserviceResponse.invoiceBreakUp.CGST,
                invoicetotalsgsttaxamount: microserviceResponse.invoiceBreakUp.SGST,
                invoicetotaligsttaxamount: microserviceResponse.invoiceBreakUp.IGST,
                invoicedate: microserviceResponse.invoiceDate,
                invoiceurl: microserviceResponse.invoicePdf,
                paymentlink: invoice.body.data.invoice.paymentLink,
                paymentlinkid: invoice.body.data.invoice.paymentlinkid,
                rpayorderid: invoice.body.data.invoice.rpayorderid,
                receiptid: invoice.body.data.invoice.receiptid
            },
            where: { id: milestoneid }
        });
        return {
            data: updatedMilestone,
            message: "success",
            code: 200
        };
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/invoice/Mutation/UpdateInvoiceoldflow.ts":
/*!******************************************************************************!*\
  !*** ./src/api/paymentMicroservice/invoice/Mutation/UpdateInvoiceoldflow.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UpdateInvoiceOldFlow": () => (/* binding */ UpdateInvoiceOldFlow)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/Requestdata/Paymentmilestoneupdaterequestmodel */ "./src/domain/Requestdata/Paymentmilestoneupdaterequestmodel.ts");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_3__);




const UpdateInvoiceOldFlow = async (root, args, context) => {
    const { projectid, milestoneid, invoicedate, invoiceamount } = args;
    const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
        where: { id: projectid }
    });
    if (project.customerid === null) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, "Customer Information not found");
    }
    const customerid = project.customerid;
    const customer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
        where: { customerid: customerid }
    });
    const milestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({
        where: { id: milestoneid }
    });
    const billingadd = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.findFirst({
        where: { customerid: customerid }
    });
    const microserviceRequestDataResponse = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__.MicroserviceManualInvoiceRequestModel();
    microserviceRequestDataResponse.invoicenumber = milestone.invoicenumber;
    microserviceRequestDataResponse.customershippingaddress = customer.projectaddress;
    const billingAddress = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__.AddressModel();
    billingAddress.country = billingadd.country;
    billingAddress.street = billingadd.street;
    billingAddress.city = billingadd.city;
    billingAddress.ziporpostalcode = billingadd.zip;
    billingAddress.shippingstate = billingadd.state;
    microserviceRequestDataResponse.firstname = customer.firstname;
    microserviceRequestDataResponse.customeremail = customer.customeremail;
    microserviceRequestDataResponse.customerphone = customer.customerphone;
    microserviceRequestDataResponse.customerbillingaddress = billingAddress;
    microserviceRequestDataResponse.projectid = project.projectid;
    microserviceRequestDataResponse.projectname = project.projectname;
    microserviceRequestDataResponse.projectstatus = `${project.projectstatus}`;
    microserviceRequestDataResponse.requestname = "SAVE_INVOICE";
    let paymentName;
    if (milestone.paymentvalue === "5%") {
        paymentName = `${milestone.paymentvalue} supply of interior works`;
    }
    else if (milestone.paymentvalue === "100%") {
        paymentName = "deep cleaning";
    }
    else {
        paymentName = `${milestone.paymentvalue} supply of works`;
    }
    microserviceRequestDataResponse.paymentname = paymentName;
    microserviceRequestDataResponse.applicationid = "DESIGNER_DASHBOARD";
    microserviceRequestDataResponse.invoicedate = invoicedate;
    microserviceRequestDataResponse.projectvalue = Number(project.totalprojectvalue);
    microserviceRequestDataResponse.amount = Number(invoiceamount);
    microserviceRequestDataResponse.milestonependingdue =
        Number(invoiceamount) - Number(milestone.amountpaid);
    const milestonestatus = milestone.status;
    microserviceRequestDataResponse.paymentstatus = getPaymentStatusName(milestonestatus);
    microserviceRequestDataResponse.amountpaid = Number(milestone.amountpaid);
    microserviceRequestDataResponse.amountdue =
        Number(invoiceamount) - Number(milestone.amountpaid);
    const url = `${process.env.apiEndpoint}designer-dashboard/save-invoice-data`;
    console.log("MICRO SERVICE URL==========>>>>>", url);
    const invoice = await superagent__WEBPACK_IMPORTED_MODULE_3___default().post(url)
        .send(microserviceRequestDataResponse)
        .set("Content-Type", "application/json");
    if (invoice.body.statusCode !== 200) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, invoice.body.message);
    }
    const microserviceResponse = invoice.body.data;
    const totalAmount = microserviceResponse.invoicebreakup.totalamount;
    const milestoneDueAmount = Number(totalAmount) - Number(milestone.amountpaid) -
        Number(milestone.advanceamount);
    let isfreezed;
    let Status;
    if (milestoneDueAmount > 0) {
        isfreezed = false;
        Status = "PARTIALLY_PAID";
    }
    else {
        isfreezed = true;
        Status = "PAID";
    }
    if (Number(milestone.amountpaid) === 0) {
        Status = "PENDING";
    }
    const updatedMilestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
        data: {
            invoicebaseamount: microserviceResponse.invoicebreakup.baseamount,
            invoicetotalamount: microserviceResponse.invoicebreakup.totalamount,
            invoicetotaltaxamount: microserviceResponse.invoicebreakup.totaltaxvalue,
            invoicetotalcgstaxamount: microserviceResponse.invoicebreakup.cgst,
            invoicetotalsgsttaxamount: microserviceResponse.invoicebreakup.sgst,
            invoicetotaligsttaxamount: microserviceResponse.invoicebreakup.igst,
            invoicedate: microserviceResponse.invoicedate,
            totalpayableamount: microserviceResponse.invoicebreakup.totalamount,
            amountdue: milestoneDueAmount,
            isfreezed: isfreezed,
            status: Status
        },
        where: { id: milestoneid }
    });
    console.log(updatedMilestone);
    return {
        data: updatedMilestone,
        message: "success",
    };
};
const getPaymentStatusName = async (milestonestatus) => {
    let status;
    switch (milestonestatus) {
        case _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__.PaymentStatusEnum.PAID:
            status = "PAID";
            break;
        case _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__.PaymentStatusEnum.PARTIAL_PAYMENT:
            status = "PARTIALLY_PAID";
            break;
        case _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__.PaymentStatusEnum.PENDING:
            status = "PENDING";
            break;
    }
    return status;
};


/***/ }),

/***/ "./src/api/paymentMicroservice/invoice/Queries/getInvoicenewflow.ts":
/*!**************************************************************************!*\
  !*** ./src/api/paymentMicroservice/invoice/Queries/getInvoicenewflow.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getInvoiceNewFlow": () => (/* binding */ getInvoiceNewFlow)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");

const getInvoiceNewFlow = async (root, args, context) => {
    let invoiceResponseObj;
    try {
        const pr = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_odooinvoice.findMany({ where: { clientid: args.id } });
        invoiceResponseObj = { code: 200, message: "success", data: pr };
        return invoiceResponseObj;
    }
    catch (error) {
        invoiceResponseObj = { code: 400, message: error.message };
        return invoiceResponseObj;
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/invoice/resolvers.ts":
/*!**********************************************************!*\
  !*** ./src/api/paymentMicroservice/invoice/resolvers.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InvoiceResolver": () => (/* binding */ InvoiceResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Mutation_CalculateInvoicenewflow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mutation/CalculateInvoicenewflow */ "./src/api/paymentMicroservice/invoice/Mutation/CalculateInvoicenewflow.ts");
/* harmony import */ var _Mutation_GenerateInvoiceoldflow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutation/GenerateInvoiceoldflow */ "./src/api/paymentMicroservice/invoice/Mutation/GenerateInvoiceoldflow.ts");
/* harmony import */ var _Queries_getInvoicenewflow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Queries/getInvoicenewflow */ "./src/api/paymentMicroservice/invoice/Queries/getInvoicenewflow.ts");
/* harmony import */ var _Mutation_UpdateInvoiceoldflow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mutation/UpdateInvoiceoldflow */ "./src/api/paymentMicroservice/invoice/Mutation/UpdateInvoiceoldflow.ts");





const InvoiceResolver = {
    Mutation: {
        generateInvoiceOldFlow: async (parent, _args, context) => (0,_Mutation_GenerateInvoiceoldflow__WEBPACK_IMPORTED_MODULE_2__.generateInvoiceOldFlow)(parent, _args, context),
        GenerateInvoicenewflow: async (_, args, { dataSources, req }) => dataSources.GenerateInvoicenewflow.generateInvoiceNewFlowData(args, req),
        CalculateInvoicenewflow: async (parent, _args, context) => (0,_Mutation_CalculateInvoicenewflow__WEBPACK_IMPORTED_MODULE_1__.CalculateInvoicenewflow)(parent, _args, context),
        UpdateInvoiceOldFlow: async (parent, _args, context) => (0,_Mutation_UpdateInvoiceoldflow__WEBPACK_IMPORTED_MODULE_4__.UpdateInvoiceOldFlow)(parent, _args, context)
    },
    Query: {
        getInvoiceNewFlow: async (parent, _args, context) => (0,_Queries_getInvoicenewflow__WEBPACK_IMPORTED_MODULE_3__.getInvoiceNewFlow)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/paymentMicroservice/invoice/typedefs.ts":
/*!*********************************************************!*\
  !*** ./src/api/paymentMicroservice/invoice/typedefs.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InvoiceTypedef": () => (/* binding */ InvoiceTypedef)
/* harmony export */ });
const InvoiceTypedef = `
scalar JSON
input invoiceRequestData{
    milestone:String
    currentProjectValue:Float
    clientID: String
    category:String
    currentModularValue:Float
    currentSiteServicesValue:Float
    baseAmount:Float
    additionalCharge:Float
    status:String
}


type generateInvoiceoldflowResponse{
    message:String
    data:JSON
    code:Int
}

type generateNewInvoiceResponse{
    code:Int
    message: String
    data:JSON
}
type getInvoice{
    code:Int
    message: String
    data:JSON
}

type calculateInvoiceNewFlowData{
    code:Int
    message: String
    data:JSON
}
type updateInvoiceoldflow{
    data:JSON
    message: String
    code:Int
}

type Mutation{

    generateInvoiceOldFlow(
        projectid: Int
        milestoneid: Int
        isRegenerate:Boolean
    ):generateInvoiceoldflowResponse

    GenerateInvoicenewflow(invoiceData:invoiceRequestData):generateNewInvoiceResponse
    CalculateInvoicenewflow(
        category:String
        clientid:String
        milestoneName:String
    ):calculateInvoiceNewFlowData
    UpdateInvoiceOldFlow(
        projectid:String,
        milestoneid:Int,
        invoicedate:String,
        invoiceamount:Float
    ):updateInvoiceoldflow
}

type Query {
    getInvoiceNewFlow(id:String):getInvoice
}
scalar DateTime
`;


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentReceipt/Mutation/AddPaymentConformation.ts":
/*!***************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentReceipt/Mutation/AddPaymentConformation.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddPaymentConformation": () => (/* binding */ AddPaymentConformation)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/PaymentModeEnum */ "./src/domain/enumerations/PaymentModeEnum.ts");
/* harmony import */ var _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/Requestdata/Paymentmilestoneupdaterequestmodel */ "./src/domain/Requestdata/Paymentmilestoneupdaterequestmodel.ts");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shortid */ "shortid");
/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(shortid__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../utils/commonUtils */ "./src/utils/commonUtils.ts");








const AddPaymentConformation = async (root, args, context) => {
    let attachmentURL;
    const { transcationid, projectid, receivedamount, modeofpayment, receiveddate, attachment, milestoneid } = args;
    let addPaymentconformationResponseObj;
    const duplicateRecord = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts.findFirst({ where: { transactionid: transcationid } });
    console.log(duplicateRecord);
    if (!duplicateRecord) {
        if (modeofpayment === _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CASH &&
            Number(receivedamount) >= 200000) {
            console.log(92);
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, "Cash Payment not allowed for more than Rs 1,99,999");
        }
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({ where: { projectid: projectid } });
        console.log("project", project);
        const milestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({ where: { id: milestoneid } });
        const AddPaymentReceiptRequest = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_3__.AddPaymentReceiptRequestData();
        if (attachment) {
            const attachmentFile = {
                key: attachment.fileName,
                contentType: attachment.contentType,
                base64: attachment.fileBase64,
            };
            const fileObj = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_6__.UploadFileOnS3)(attachmentFile);
            AddPaymentReceiptRequest.supportingDocumentURL = fileObj.Location;
            AddPaymentReceiptRequest.awsSupportingDocumentURLKey = fileObj.key;
        }
        const customer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: { customerid: project.customerid }
        });
        console.log(customer);
        if (modeofpayment === _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CASH ||
            modeofpayment === _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].IMPS ||
            modeofpayment === _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].NEFT ||
            modeofpayment === _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CHEQUE) {
            const updatepaymentlinkargs = {
                project, milestone, customer,
                receivedamount, receiveddate, transcationid, modeofpayment, attachmentURL
            };
            const updatedPaymentLink = await captureManualPaymentOnMicroservice(updatepaymentlinkargs);
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                data: {
                    paymentlink: updatedPaymentLink
                },
                where: { id: milestoneid }
            });
        }
        let advanceForNextMilestone = 0;
        const updatedAmountPaidValue = Number(milestone.amountpaid) + Number(receivedamount);
        if (updatedAmountPaidValue > Number(milestone.totalpayableamount)) {
            advanceForNextMilestone = updatedAmountPaidValue - Number(milestone.totalpayableamount);
            console.log("advanceForNextMilestone", advanceForNextMilestone);
        }
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
            data: {
                amountpaid: Math.floor(updatedAmountPaidValue)
            },
            where: { id: milestoneid }
        });
        const updatedAmountDue = Number(milestone.totalpayableamount) - updatedAmountPaidValue - Number(milestone.advanceamount);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
            data: {
                amountdue: updatedAmountDue
            },
            where: { id: milestoneid }
        });
        if (updatedAmountDue <= 5) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                data: {
                    freezedmodular: milestone.modularamount,
                    isfreezed: true,
                    status: _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_3__.PaymentStatusEnum.PAID
                },
                where: { id: milestoneid }
            });
        }
        else {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                data: {
                    status: _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_3__.PaymentStatusEnum.PARTIAL_PAYMENT
                },
                where: { id: milestoneid }
            });
        }
        console.log(264264, project, project.achievedrevenuevalue);
        const projectUpdateModel = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_3__.ProjectUpdateRequestModel();
        const Id = shortid__WEBPACK_IMPORTED_MODULE_5___default().generate();
        const paymentId = Id;
        const res1 = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts.findFirst({
            where: { transactionid: transcationid }
        });
        console.log(res1);
        const res = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts.update({
            data: {
                paymentname: milestone.paymentvalue,
                receivedamount: receivedamount,
                paymentreceiveddate: receiveddate,
                paymentid: "PIO-" + paymentId,
                paymentmillestoneid: milestoneid,
                projectid: projectid,
                clientid: projectid
            },
            where: { id: res1.id }
        });
        console.log("paymentconformationdata", res);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            data: {
                achievedrevenuevalue: Math.floor(Number(project.achievedrevenuevalue) + Number(receivedamount)),
                pendingamountvalue: Math.floor(Number(project.totalprojectvalue) - Number(projectUpdateModel.achievedrevenuevalue)),
            },
            where: { projectid: projectid }
        });
        console.log(res.paymentid);
        console.log("----------paymentMilestoneRepository-------9");
        console.log("----------ADD ADVANCE TO NEXT MILESTONE----------10");
        if (advanceForNextMilestone > 0) {
            const nextMilestoneIndex = milestone.sequence + 1;
            console.log(340340, nextMilestoneIndex);
            let nextMilestoneID;
            if (project.paymentmilestonelist) {
                console.log("if");
                project.paymentmilestonelist.filter((o) => o.sequence === nextMilestoneIndex);
            }
            else {
                console.log("else");
                const getPaymentMileStoneList = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({ where: { projectid: project.id } });
                if (getPaymentMileStoneList && getPaymentMileStoneList.length > 0) {
                    getPaymentMileStoneList.filter((o) => o.sequence === nextMilestoneIndex);
                }
                else {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, 'No Payment Milestones found for this project');
                }
                console.log(345345, nextMilestoneID);
                if (nextMilestoneID) {
                    const nextMilestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({ where: { id: nextMilestoneID[0].id } });
                    const updatedNextMilestone = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_3__.MilestoneUpdateRequestModel();
                    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                        data: { advanceamount: Math.floor(Number(nextMilestone.advanceamount) + Number(advanceForNextMilestone)) },
                        where: { id: nextMilestoneID[0].id }
                    });
                    const amountDue = Math.floor(nextMilestone.totalpayableamount -
                        nextMilestone.amountpaid - parseInt(updatedNextMilestone.advanceamount, 10));
                    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                        data: { amountdue: amountDue },
                        where: { id: nextMilestoneID[0].id }
                    });
                    if (amountDue > 0) {
                        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                            data: {
                                status: _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_3__.PaymentStatusEnum.PARTIAL_PAYMENT,
                                isfreezed: false,
                                freezedmodular: 0
                            },
                            where: { id: nextMilestoneID[0].id }
                        });
                    }
                    else {
                        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                            data: {
                                status: _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_3__.PaymentStatusEnum.PAID,
                                isfreezed: true,
                                freezedmodular: nextMilestone.amountpaid
                            },
                            where: { id: nextMilestoneID[0].id }
                        });
                    }
                }
            }
        }
        await callAddPaymentReceiveNotification(project, receivedamount, receiveddate);
        addPaymentconformationResponseObj = { message: "success", data: res, code: 200 };
        return addPaymentconformationResponseObj;
    }
};
const captureManualPaymentOnMicroservice = async (updatepaymentlinkargs) => {
    const { project, milestone, customer, receivedamount, receiveddate, transcationid, modeofpayment, attachmentURL } = updatepaymentlinkargs;
    try {
        const manualPaymentData = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_3__.CaptureManualPaymentModel();
        console.log(project.projectid);
        manualPaymentData.projectId = project.projectid;
        manualPaymentData.projectName = project.projectname;
        manualPaymentData.invoiceNumber = milestone.invoicenumber;
        manualPaymentData.paymentId =
            milestone.paymentValue =  true ? `${milestone.paymentvalue} supply of interior works` : 0;
        manualPaymentData.amountPaid = Number(receivedamount);
        manualPaymentData.paymentReceivedDate = receiveddate;
        manualPaymentData.transactionId = transcationid;
        switch (modeofpayment) {
            case _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CASH:
                manualPaymentData.paymentMode = "CASH";
                break;
            case _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CHEQUE:
                manualPaymentData.paymentMode = "CHEQUE";
                break;
            case _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].IMPS:
                manualPaymentData.paymentMode = "IMPS";
                break;
            case _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].NEFT:
                manualPaymentData.paymentMode = "NEFT";
                break;
            case _domain_enumerations_PaymentModeEnum__WEBPACK_IMPORTED_MODULE_2__["default"].ONLINE:
                manualPaymentData.paymentMode = "ONLINE";
                break;
        }
        manualPaymentData.customerPhone = customer.customerphone;
        manualPaymentData.projectName = project.projectname;
        manualPaymentData.milestoneId = milestone.id;
        manualPaymentData.isFromDD = true;
        if (attachmentURL) {
            manualPaymentData.paymentReceipt = attachmentURL;
        }
        console.log("Customer:=----- ", customer);
        console.log("captureManualPaymentOnMicroservice Payment Request Data: ", manualPaymentData);
        const url = process.env.apiEndpoint + `captureManualPayment`;
        const paymentCapture = await superagent__WEBPACK_IMPORTED_MODULE_4___default().post(url)
            .send(manualPaymentData)
            .set("Content-Type", "application/json");
        console.log("============================================paymentCapture: ", JSON.stringify(paymentCapture.body));
        if (paymentCapture.body.statusCode !== 200) {
            console.log(611);
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, paymentCapture.body.message);
        }
        let updatedPaymentLink;
        if (paymentCapture.body &&
            paymentCapture.body.data &&
            paymentCapture.body.data.updatedPaymentLink) {
            updatedPaymentLink = paymentCapture.body.data.updatedPaymentLink;
            console.log("updatedPaymentlInk", updatedPaymentLink);
        }
        return updatedPaymentLink;
    }
    catch (error) {
        console.log(596, error);
        throw error;
    }
};
const callAddPaymentReceiveNotification = async (project, receivedamount, receiveddate) => {
    var _a;
    const notificationTemplate = await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_7__.callExternalAPIWithPost)("https://cmsandbox.herokuapp.com/graphqlm", (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_7__.queryForFetchingRemindersTemplate)("notify_payment_received"));
    if (notificationTemplate) {
        const data = (_a = notificationTemplate === null || notificationTemplate === void 0 ? void 0 : notificationTemplate.data) === null || _a === void 0 ? void 0 : _a.reminders.data[0].attributes;
        let toList;
        const ccList = [];
        if (data.emailActivate) {
            if (project) {
                if (project.designerid) {
                    const designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({ where: { userid: project.designerid } });
                    if (designer && designer.designcafeemail) {
                        ccList.push(designer.designcafeemail);
                    }
                }
                else {
                    ccList.push("lorenzo@designcafe.com");
                }
                ccList.push("ddadmin@designcafe.com");
                if (project.chmid) {
                    const pam = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({ where: { userid: project.chmid } });
                    if (pam && pam.designcafeemail) {
                        ccList.push(pam.designcafeemail);
                    }
                }
                if (project.experiencecenterid) {
                    const experienceCenter = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findUnique({ where: { centerid: project.experiencecenterid } });
                    if (experienceCenter) {
                        const financeEmailID = experienceCenter.financeteamemail;
                        toList = financeEmailID;
                    }
                }
                else {
                    toList.push("ddadmin@designcafe.com");
                }
            }
            const subject = data.label;
            const content = data.email_template;
            const emailContent = content
                .replace("$project name", project.projectname)
                .replace("$received amount", receivedamount)
                .replace("$clientid", project.projectid)
                .replace("$paymentdate", receiveddate);
            await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_6__.triggerEmailNotification)(toList, subject, emailContent, ccList);
        }
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentReceipt/Mutation/AddPaymentReceipts.ts":
/*!***********************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentReceipt/Mutation/AddPaymentReceipts.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class AddPaymentReceipts extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set("Authorization", this.context.headers.authorization);
    }
    async addpaymentReceiptData(args) {
        const { transactionId, receivedAmount, projectID, paymentRequests, paymentReceivedDate, paymentMode, siteServicesAmount, clientID, modularAmount, } = args;
        return this.post("createPaymentReceipt", {
            transactionId,
            receivedAmount,
            projectID,
            paymentRequests,
            paymentReceivedDate,
            paymentMode,
            siteServicesAmount,
            clientID,
            modularAmount,
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AddPaymentReceipts);


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentReceipt/Mutation/ClearPaymentConformation.ts":
/*!*****************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentReceipt/Mutation/ClearPaymentConformation.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClearPaymentConformation": () => (/* binding */ ClearPaymentConformation)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/Requestdata/Paymentmilestoneupdaterequestmodel */ "./src/domain/Requestdata/Paymentmilestoneupdaterequestmodel.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_3__);




const ClearPaymentConformation = async (root, args, context) => {
    const { milestoneid, projectid } = args;
    const clearpayment = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({
        where: { id: milestoneid },
    });
    if (!clearpayment) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, "No Payment Milestone Found");
    }
    if (!clearpayment.invoicenumber) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, "Cannot find Invoice Number");
    }
    const url = `${process.env.apiEndpoint}data-correction/payment-receipt?invoiceNumber=${clearpayment.invoicenumber}`;
    console.log("url", url);
    const invoice = await superagent__WEBPACK_IMPORTED_MODULE_3___default()["delete"](url)
        .set("Content-Type", "application/json");
    console.log("Invoice:-----", invoice.body);
    if (invoice && invoice.body && invoice.body.statusCode) {
        if (invoice.body.statusCode >= 200 && invoice.body.statusCode < 400) {
            await removePaymentDetails(projectid, clearpayment);
            try {
                await hitMicroserviceAgainToUpdateLatestData(projectid, milestoneid);
            }
            catch (e) {
                console.log("---hitMicroserviceAgainToUpdateLatestData -------   ERROR from MICROSERVICE:", e);
            }
        }
        else {
            console.log("throwing Error from status code");
            throw Error(invoice.body.message);
        }
    }
    return {
        code: 200,
        message: "Success",
    };
};
const removePaymentDetails = async (projectID, clearpaymentdata) => {
    if (clearpaymentdata.id) {
        console.log("2");
        const paymentreceiptdata = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts.findFirst({
            where: { paymentmillestoneid: clearpaymentdata.id },
        });
        const paymentid = paymentreceiptdata.id;
        await removeAllPaymentConfirmationsObjects(paymentid);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
            data: {
                amountpaid: 0,
                freezedmodular: 0,
                freezedsiteservice: 0,
                isfreezed: false,
                paymentid: null,
                status: _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__.PaymentStatusEnum.PENDING,
                amountdue: Number(clearpaymentdata.totalpayableamount) -
                    Number(clearpaymentdata.advanceamount),
            },
            where: { id: clearpaymentdata.id },
        });
        let nextPaymentValue = null;
        switch (clearpaymentdata.paymentvalue) {
            case "5%":
                nextPaymentValue = "15%";
                break;
            case "15%":
                nextPaymentValue = "35%";
                break;
            case "35%":
                nextPaymentValue = "45%";
                break;
        }
        console.log("nextPaymentValue", nextPaymentValue);
        if (nextPaymentValue) {
            const projectdata = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
                where: { projectid: projectID },
            });
            const id = projectdata.id;
            const nextPaymentMilestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({
                where: {
                    paymentvalue: nextPaymentValue,
                    projectid: id,
                },
            });
            console.log("nextPaymentMilestone", nextPaymentMilestone);
            const nextPaymentMilestoneID = nextPaymentMilestone.id;
            const nextPaymentMilestoneData = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__.ClearPaymentRequestModel();
            const Amountdue = Number(nextPaymentMilestone.amountdue) +
                Number(nextPaymentMilestone.advanceamount);
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                data: {
                    advanceamount: 0,
                    amountdue: Amountdue,
                    status: _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__.PaymentStatusEnum.PENDING,
                },
                where: { id: nextPaymentMilestoneID },
            });
            console.log("nextPaymentMilestoneUpdatedMilestone", nextPaymentMilestoneData);
        }
    }
};
const removeAllPaymentConfirmationsObjects = async (paymentid) => {
    console.log("1", paymentid);
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts["delete"]({
        where: { id: paymentid },
    });
};
const hitMicroserviceAgainToUpdateLatestData = async (projectid, milestoneid) => {
    const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
        where: { projectid: projectid },
    });
    if (!project.customerid) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, "Customer Information not found");
    }
    const customerid = project.customerid;
    const customer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
        where: { customerid: customerid },
    });
    const billingadd = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.findFirst({
        where: { customerid: customerid },
    });
    const milestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({
        where: {
            id: milestoneid,
        },
    });
    const microserviceRequestData = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__.MicroserviceManualInvoiceRequestModel();
    microserviceRequestData.invoiceNumber = milestone.invoicenumber;
    microserviceRequestData.customerShippingAddress = customer.projectaddress;
    const billingAddress = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__.AddressModel();
    billingAddress.country = billingadd.country;
    billingAddress.street = billingadd.street;
    billingAddress.city = billingadd.city;
    billingAddress.ziporpostalcode = billingadd.zip;
    billingAddress.shippingstate = billingadd.state;
    microserviceRequestData.customerName = customer.firstname;
    microserviceRequestData.customerEmail = customer.customeremail;
    microserviceRequestData.customerPhone = customer.customerphone;
    microserviceRequestData.customerBillingaddress = billingAddress;
    microserviceRequestData.projectID = project.projectid;
    microserviceRequestData.projectName = project.projectname;
    microserviceRequestData.projectStatus = `${project.projectstatus}`;
    microserviceRequestData.requestName = "SAVE_INVOICE";
    if (milestone.paymentvalue === "5%") {
        microserviceRequestData.paymentName = `${milestone.paymentvalue} supply of interior works`;
    }
    else if (milestone.paymentvalue === "100%") {
        microserviceRequestData.paymentName = "deep cleaning";
    }
    else {
        microserviceRequestData.paymentName = `${milestone.paymentvalue} supply of works`;
    }
    const experienceCenter = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findFirst({
        where: { centerid: project.experiencecenterid },
    });
    microserviceRequestData.applicationId = "DESIGNER_DASHBOARD";
    microserviceRequestData.experienceCenter = experienceCenter.name;
    microserviceRequestData.invoiceDate = milestone.invoicedate;
    microserviceRequestData.projectValue = Number(project.totalprojectvalue);
    microserviceRequestData.milestonePendingDue =
        Number(milestone.totalpayableamount) -
            Number(milestone.advanceamount) -
            Number(milestone.amountpaid);
    const milestonestatus = milestone.status;
    microserviceRequestData.paymentStatus = milestonestatus;
    microserviceRequestData.amountPaid = Number(milestone.amountpaid);
    microserviceRequestData.amountDue =
        Number(milestone.totalpayableamount) -
            Number(milestone.advanceamount) -
            Number(milestone.amountpaid);
    if (Number(milestone.addonamount) > 0) {
        const addOnObj = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__.AddOnPaymentObject();
        addOnObj.amount = Number(milestone.addonamount);
        addOnObj.paymentname = "50% Addon Service";
        addOnObj.quantity = 1;
        microserviceRequestData.extraPayments = [addOnObj];
    }
    console.log("microserviceRequestData:", microserviceRequestData);
    const url = `${process.env.apiEndpoint}designer-dashboard/save-invoice-data`;
    console.log("----------0", url);
    const invoice = await superagent__WEBPACK_IMPORTED_MODULE_3___default().post(url)
        .send(microserviceRequestData)
        .set("Content-Type", "application/json");
    console.log("============================================Invoice: ", JSON.stringify(invoice.body));
    if (invoice.body.statusCode !== 200) {
        console.log("invoice.body.message", invoice.body.message);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, invoice.body.message);
    }
};
const getPaymentStatusName = async (milestonestatus) => {
    let paymentstatus;
    switch (milestonestatus) {
        case _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__.PaymentStatusEnum.PAID:
            paymentstatus = "PAID";
            break;
        case _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__.PaymentStatusEnum.PARTIAL_PAYMENT:
            paymentstatus = "PARTIALLY_PAID";
            break;
        case _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_1__.PaymentStatusEnum.PENDING:
            paymentstatus = "PENDING";
            break;
    }
    return paymentstatus;
};


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentReceipt/Mutation/DeletePaymentreceipts.ts":
/*!**************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentReceipt/Mutation/DeletePaymentreceipts.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class DeletePaymentReceipts extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set('Authorization', this.context.headers.authorization);
    }
    async deletepaymentReceiptData(args) {
        const { paymentId } = args;
        return this.delete('deletePaymentReceipt', {
            paymentId,
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DeletePaymentReceipts);


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentReceipt/Mutation/UpdatePaymentConformation.ts":
/*!******************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentReceipt/Mutation/UpdatePaymentConformation.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UpdatePaymentConformation": () => (/* binding */ UpdatePaymentConformation)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/Requestdata/Paymentmilestoneupdaterequestmodel */ "./src/domain/Requestdata/Paymentmilestoneupdaterequestmodel.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");




const UpdatePaymentConformation = async (root, args, context) => {
    let updatePcResponseObj;
    const { milestoneid, projectid, receivedamount, modeofpayment, receiveddate, attachment, paymentid } = args;
    const paymentConfirmation = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts.findFirst({
        where: { paymentid: paymentid }
    });
    console.log(paymentConfirmation);
    if (!paymentConfirmation) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, "Invalid Payment Detail ID");
    }
    const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
        where: { projectid: projectid }
    });
    const milestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({
        where: { id: milestoneid }
    });
    const paymentConfirmationData = new _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__.AddPaymentReceiptRequestData();
    if (attachment) {
        const attachmentFile = {
            key: attachment.fileName,
            contentType: attachment.contentType,
            base64: attachment.fileBase64,
        };
        const fileObj = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.UploadFileOnS3)(attachmentFile);
        if (!fileObj) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, "Error uploading attachment");
        }
        paymentConfirmationData.supportingDocumentURL = fileObj.Location;
        paymentConfirmationData.awsSupportingDocumentURLKey = fileObj.key;
    }
    const amountDifference = Number(receivedamount) - Number(paymentConfirmation.receivedamount);
    console.log(amountDifference);
    let advanceForNextMilestone = 0;
    if (amountDifference !== 0) {
        const updatedAmountPaidValue = Number(milestone.amountpaid) + Number(amountDifference);
        if (updatedAmountPaidValue > Number(milestone.totalpayableamount)) {
            advanceForNextMilestone = updatedAmountPaidValue - Number(milestone.totalpayableamount);
        }
        const updatedAmountDue = Number(milestone.totalpayableamount) - updatedAmountPaidValue - Number(milestone.advanceamount);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
            data: {
                amountpaid: Math.floor(updatedAmountPaidValue),
                amountdue: Math.floor(updatedAmountDue)
            },
            where: { id: milestoneid }
        });
        if (updatedAmountDue <= 0) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                data: {
                    freezedmodular: updatedAmountPaidValue,
                    isfreezed: true,
                    status: _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__.PaymentStatusEnum.PAID
                },
                where: { id: milestoneid }
            });
        }
        else {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                data: {
                    status: _domain_Requestdata_Paymentmilestoneupdaterequestmodel__WEBPACK_IMPORTED_MODULE_2__.PaymentStatusEnum.PARTIAL_PAYMENT
                },
                where: { id: milestoneid }
            });
        }
        const achievedrevenuevalue = Math.floor(Number(project.achievedrevenuevalue) + Number(amountDifference));
        console.log(paymentConfirmation.id);
        const res = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts.update({
            data: {
                receivedamount: receivedamount,
                amountpaid: receivedamount,
                paymentmode: modeofpayment,
                paymentreceiveddate: receiveddate
            },
            where: { id: paymentConfirmation.id }
        });
        if (!res) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, "Error adding Payment");
        }
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            data: {
                achievedrevenuevalue: Math.floor(Number(project.achievedrevenuevalue) + Number(amountDifference)),
                pendingamountvalue: Math.floor(Number(project.totalprojectvalue) -
                    Number(achievedrevenuevalue))
            },
            where: { projectid: projectid }
        });
        if (advanceForNextMilestone > 0) {
            const nextMilestoneIndex = milestone.sequence + 1;
            const nextMilestoneID = project.paymentmilestonelist.filter((o) => o.sequence === nextMilestoneIndex);
            if (nextMilestoneID) {
                const nextMilestone = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({
                    where: { id: nextMilestoneID }
                });
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                    data: {
                        advanceamount: Math.floor(advanceForNextMilestone),
                        amountdue: Math.floor(Number(nextMilestone.totalpayableamount) - Number(nextMilestone.amountpaid) -
                            Number(advanceForNextMilestone)),
                    },
                    where: {
                        id: nextMilestoneID
                    }
                });
            }
        }
        console.log(res);
        updatePcResponseObj = {
            data: res,
            message: "success",
        };
    }
    return updatePcResponseObj;
};


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentReceipt/Mutation/UpdatePaymentReceipts.ts":
/*!**************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentReceipt/Mutation/UpdatePaymentReceipts.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class UpdatePaymentReceipts extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set('Authorization', this.context.headers.authorization);
    }
    async updatepaymentReceiptData(args) {
        const { transactionId, receivedAmount, projectID, paymentRequests, paymentReceivedDate, paymentMode, siteServicesAmount, clientID, modularAmount, appName, paymentId, status, odoo_payment_id, paymentReceipt, reason_for_rejection } = args;
        return this.put('updatePaymentReceipt', {
            transactionId,
            receivedAmount,
            projectID,
            paymentRequests,
            paymentReceivedDate,
            paymentMode,
            siteServicesAmount,
            clientID,
            modularAmount,
            appName,
            paymentId,
            status,
            odoo_payment_id,
            paymentReceipt,
            reason_for_rejection
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UpdatePaymentReceipts);


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentReceipt/Queries/getPaymentReceipt.ts":
/*!*********************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentReceipt/Queries/getPaymentReceipt.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPaymentReceipt": () => (/* binding */ getPaymentReceipt)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");

const getPaymentReceipt = async (root, args, context) => {
    let paymentReceiptResponseObj;
    try {
        const pr = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts.findMany({ where: { clientid: args.id } });
        paymentReceiptResponseObj = { code: 200, message: "success", data: pr };
        return paymentReceiptResponseObj;
    }
    catch (error) {
        paymentReceiptResponseObj = { code: 400, message: error.message };
        return paymentReceiptResponseObj;
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentReceipt/resolver.ts":
/*!****************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentReceipt/resolver.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paymentReceiptReslover": () => (/* binding */ paymentReceiptReslover)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_getPaymentReceipt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/getPaymentReceipt */ "./src/api/paymentMicroservice/paymentReceipt/Queries/getPaymentReceipt.ts");
/* harmony import */ var _Mutation_AddPaymentConformation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutation/AddPaymentConformation */ "./src/api/paymentMicroservice/paymentReceipt/Mutation/AddPaymentConformation.ts");
/* harmony import */ var _Mutation_UpdatePaymentConformation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mutation/UpdatePaymentConformation */ "./src/api/paymentMicroservice/paymentReceipt/Mutation/UpdatePaymentConformation.ts");
/* harmony import */ var _Mutation_ClearPaymentConformation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mutation/ClearPaymentConformation */ "./src/api/paymentMicroservice/paymentReceipt/Mutation/ClearPaymentConformation.ts");





const paymentReceiptReslover = {
    Mutation: {
        AddPaymentReceipts: async (_, args, { dataSources, req }) => dataSources.AddPaymentReceipts.addpaymentReceiptData(args, req),
        UpdatePaymentReceipts: async (_, args, { dataSources, req }) => dataSources.UpdatePaymentReceipts.updatepaymentReceiptData(args, req),
        DeletePaymentReceipts: async (_, args, { dataSources, req }) => dataSources.DeletePaymentReceipts.deletepaymentReceiptData(args, req),
        AddPaymentConformation: async (parent, _args, context) => (0,_Mutation_AddPaymentConformation__WEBPACK_IMPORTED_MODULE_2__.AddPaymentConformation)(parent, _args, context),
        UpdatePaymentConformation: async (parent, _args, context) => (0,_Mutation_UpdatePaymentConformation__WEBPACK_IMPORTED_MODULE_3__.UpdatePaymentConformation)(parent, _args, context),
        ClearPaymentConformation: async (parent, _args, context) => (0,_Mutation_ClearPaymentConformation__WEBPACK_IMPORTED_MODULE_4__.ClearPaymentConformation)(parent, _args, context),
    },
    Query: {
        getPaymentReceipt: async (parent, _args, context) => (0,_Queries_getPaymentReceipt__WEBPACK_IMPORTED_MODULE_1__.getPaymentReceipt)(parent, _args, context),
    },
    JSON: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.GraphQLJSON
};


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentReceipt/typedef.ts":
/*!***************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentReceipt/typedef.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paymentReceiptTypedef": () => (/* binding */ paymentReceiptTypedef)
/* harmony export */ });
const paymentReceiptTypedef = `
scalar JSON
type paymentreceiptdata{
    statusCode:Int
    message:String
    data:JSON
    code:Int
}

type paymentreceiptupdatedata{
    statusCode:Int
    message:String
    code:Int
}
type getpaymentreceipt{
    code:Int
    message: String
    data:JSON
}

type addpaymentconformation{
    data:JSON
    message: String
    code:Int
}

type deletepaymentconformation{
    code:Int,
    message:String
}

input AttachmentToBeUpdated{
    fileBase64:String,
    fileName:String,
    contentType:String

}

type Mutation {
    AddPaymentReceipts(
    transactionId:String,
    receivedAmount:Float,
    projectID:String,
    paymentRequests:[String],
    paymentReceivedDate:String,
    paymentMode:String,
    siteServicesAmount:Float,
    clientID:String,
    modularAmount:Float
):paymentreceiptdata

UpdatePaymentReceipts(
    transactionId:String,
        receivedAmount:Float,
        projectID:String,
        paymentRequests:[String],
        paymentReceivedDate:String,
        paymentMode:String,
        siteServicesAmount:Float,
        clientID:String,
        modularAmount:Float,
        appName:String,
        paymentId:String,
        status:String,
        odoo_payment_id:Int,
        paymentReceipt:String,
        reason_for_rejection:String
):paymentreceiptupdatedata

DeletePaymentReceipts(
    paymentId:String
):paymentreceiptupdatedata

AddPaymentConformation(
    transcationid:String,
    milestoneid:Int,
    projectid:String,
    receivedamount:Float,
    modeofpayment:Int,
    receiveddate:String,
    attachment:AttachmentToBeUpdated
):addpaymentconformation

UpdatePaymentConformation(
    milestoneid:Int,
    projectid:String,
    receivedamount:Float,
    modeofpayment:String,
    transactionid:String,
    receiveddate:String,
    paymentid:String,
    attachment:AttachmentToBeUpdated
):addpaymentconformation

ClearPaymentConformation(
    milestoneid:Int,
    projectid:String,
):deletepaymentconformation
}

type Query {
    getPaymentReceipt(id:String):getpaymentreceipt
}
`;


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentRequest/Mutations/AddPaymentRequests.ts":
/*!************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentRequest/Mutations/AddPaymentRequests.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class AddPaymentRequests extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set('Authorization', this.context.headers.authorization);
    }
    async addpaymentRequestData(args) {
        const { requestDate, category, requestAmount, description, clientID, status, appName } = args;
        return this.post('createPaymentRequest', {
            requestDate,
            category,
            requestAmount,
            description,
            clientID,
            status,
            appName,
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AddPaymentRequests);


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentRequest/Mutations/CalculatePaymentRequest.ts":
/*!*****************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentRequest/Mutations/CalculatePaymentRequest.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CalculatePaymentRequest": () => (/* binding */ CalculatePaymentRequest)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_enumerations_PaymentCategoryEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/PaymentCategoryEnum */ "./src/domain/enumerations/PaymentCategoryEnum.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);



const CalculatePaymentRequest = async (root, args, context) => {
    const { category, clientid, description, baseamount } = args;
    const PaymentRequest = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentrequests.findFirst({
        where: {
            category: category,
            clientid: clientid,
            description: description,
        },
    });
    if (PaymentRequest) {
        return {
            code: 200,
            message: "Already available",
            data: PaymentRequest
        };
    }
    else {
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: {
                clientid: clientid
            }
        });
        if (project == null) {
            return {
                code: 200,
                message: "No project found",
            };
        }
        const PRAmount = await calculatePRAmount(category, description, baseamount);
        return {
            code: 200,
            message: "Success",
            data: PRAmount
        };
    }
};
const calculatePRAmount = async (category, description, baseamount) => {
    let totalAmount;
    if (category.toLowerCase() === _domain_enumerations_PaymentCategoryEnum__WEBPACK_IMPORTED_MODULE_1__["default"].MODULAR) {
        console.log("Modular");
        totalAmount = baseamount;
        let milestoneAmountValue;
        if (description === "15% of Modular") {
            milestoneAmountValue = (totalAmount * 20) / 100;
        }
        else if (description === "35% of Modular") {
            milestoneAmountValue = (totalAmount * 55) / 100;
        }
        else if (description === "45% of Modular") {
            milestoneAmountValue = totalAmount;
        }
        else {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, "Modular Milestone Mismatch");
        }
        return milestoneAmountValue;
    }
    else if (category.toLowerCase() === _domain_enumerations_PaymentCategoryEnum__WEBPACK_IMPORTED_MODULE_1__["default"].SITE_SERVICE) {
        totalAmount = baseamount;
        let milestoneAmountValue;
        if (description === "45% of Site Service") {
            milestoneAmountValue = (totalAmount * 50) / 100;
        }
        else if (description === "50% of Site Service") {
            milestoneAmountValue = totalAmount;
        }
        else {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(201, "Site Services Milestone Mismatch");
        }
        return milestoneAmountValue;
    }
    else {
        return {
            code: 201,
            message: "Payment category Mismatch",
        };
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentRequest/Mutations/DeletePaymentRequests.ts":
/*!***************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentRequest/Mutations/DeletePaymentRequests.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class DeletePaymentRequests extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set('Authorization', this.context.headers.authorization);
    }
    async deletepaymentRequestData(requestID) {
        return this.delete('deletePaymentRequest', {
            requestID,
        }, {
            body: requestID
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DeletePaymentRequests);


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentRequest/Mutations/UpdatePaymentRequests.ts":
/*!***************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentRequest/Mutations/UpdatePaymentRequests.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class UpdatePaymentRequests extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set('Authorization', this.context.headers.authorization);
    }
    async updatepaymentRequestData(args) {
        const { requestID, requestDate, category, requestAmount, description, clientID, status, appName } = args;
        return this.put('updatePaymentRequest', {
            requestID,
            requestDate,
            category,
            requestAmount,
            description,
            clientID,
            status,
            appName,
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UpdatePaymentRequests);


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentRequest/Queries/GetPaymentRequest.ts":
/*!*********************************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentRequest/Queries/GetPaymentRequest.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPaymentRequest": () => (/* binding */ getPaymentRequest)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");

const getPaymentRequest = async (root, args, context) => {
    let paymentRequestResponseObj;
    try {
        const pr = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentrequests.findMany({ where: { clientid: args.id } });
        paymentRequestResponseObj = { code: 200, message: "success", data: pr };
        return paymentRequestResponseObj;
    }
    catch (error) {
        paymentRequestResponseObj = { code: 400, message: error.message };
        return paymentRequestResponseObj;
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentRequest/resolver.ts":
/*!****************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentRequest/resolver.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paymentRequestReslover": () => (/* binding */ paymentRequestReslover)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_GetPaymentRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/GetPaymentRequest */ "./src/api/paymentMicroservice/paymentRequest/Queries/GetPaymentRequest.ts");
/* harmony import */ var _Mutations_CalculatePaymentRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutations/CalculatePaymentRequest */ "./src/api/paymentMicroservice/paymentRequest/Mutations/CalculatePaymentRequest.ts");



const paymentRequestReslover = {
    Mutation: {
        AddPaymentRequests: async (_, args, { dataSources, req }) => dataSources.AddPaymentRequests.addpaymentRequestData(args, req),
        UpdatePaymentRequests: async (_, args, { dataSources, req }) => dataSources.UpdatePaymentRequests.updatepaymentRequestData(args, req),
        DeletePaymentRequests: async (_, { requestID }, { dataSources, req }) => dataSources.DeletePaymentRequests.deletepaymentRequestData(requestID, req),
        CalculatePaymentRequest: async (parent, _args, context) => (0,_Mutations_CalculatePaymentRequest__WEBPACK_IMPORTED_MODULE_2__.CalculatePaymentRequest)(parent, _args, context),
    },
    Query: {
        getPaymentRequest: async (parent, _args, context) => (0,_Queries_GetPaymentRequest__WEBPACK_IMPORTED_MODULE_1__.getPaymentRequest)(parent, _args, context),
    },
    JSON: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.GraphQLJSON
};


/***/ }),

/***/ "./src/api/paymentMicroservice/paymentRequest/typedef.ts":
/*!***************************************************************!*\
  !*** ./src/api/paymentMicroservice/paymentRequest/typedef.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paymentRequestTypedef": () => (/* binding */ paymentRequestTypedef)
/* harmony export */ });
const paymentRequestTypedef = `
scalar JSON
type paymentrequestdata{
    statusCode:Int
    message:String
    data:JSON
    code:Int
}
type paymentrequestUpdatedata{
    statusCode:Int
    message:String
    code:Int
}


type getpaymentrequest{
    code:Int
    message: String
    data:JSON
}

type calculatepaymentrequest{
    code:Int
    message: String
    data:JSON
}

type Mutation {
    AddPaymentRequests(
        requestDate:String,
        category:String,
        requestAmount:Float,
        description:String,
        clientID:String,
        status:String,
        appName:String
    ):paymentrequestdata,

    UpdatePaymentRequests(
        requestID:String,
        requestDate:String,
        category:String,
        requestAmount:Float,
        description:String,
        clientID:String,
        status:String,
        appName:String
    ):paymentrequestUpdatedata,

    DeletePaymentRequests(
    requestID:String,
    ):paymentrequestUpdatedata,

    CalculatePaymentRequest(
        category:String
        clientid:String
       description:String
       baseamount:Float
       ):calculatepaymentrequest
    }

    type Query {
        getPaymentRequest(id:String):getpaymentrequest
    }
`;


/***/ }),

/***/ "./src/api/paymentMicroservice/project/Mutations/UpdateProjectAddress.ts":
/*!*******************************************************************************!*\
  !*** ./src/api/paymentMicroservice/project/Mutations/UpdateProjectAddress.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateProject": () => (/* binding */ updateProject)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_2__);



const updateProject = async (root, args, context) => {
    const { clientid, shippingAddressCountry, shippingAddressShippingState, shippingAddressStreet1, shippingAddressStreet2, shippingAddressCity, shippingAddressZipOrPostalCode } = args;
    const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
        where: { projectid: clientid },
    });
    console.log(project);
    if (!project) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Project not found");
    }
    let shippingStreet;
    if (args.shippingAddressStreet1) {
        shippingStreet = args.shippingAddressStreet1.concat(" ", shippingAddressStreet2);
    }
    else {
        shippingStreet = shippingAddressStreet1;
    }
    const ProjectUpdateRequestToMicroservice = {
        shippingAddressCountry: shippingAddressCountry,
        shippingAddressShippingState: shippingAddressShippingState,
        shippingAddressCity: shippingAddressCity,
        shippingAddressStreet: shippingStreet,
        shippingAddressZipOrPostalCode: shippingAddressZipOrPostalCode,
        clientId: clientid
    };
    const updateProjectCapture = await postUpdateProjectToMicroservice(ProjectUpdateRequestToMicroservice);
    console.log("updateProjectCapture", updateProjectCapture.body);
    if (updateProjectCapture.body.statusCode !== 200) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, updateProjectCapture.body.message);
    }
    const customerid = project.customerid;
    if (project) {
        const findaddress = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.findFirst({ where: { customerid: customerid, addresstype: 2 } });
        const updateadrress = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.update({
            where: {
                addressid: findaddress.addressid,
            },
            data: {
                zip: shippingAddressZipOrPostalCode,
                street: shippingStreet,
                state: shippingAddressShippingState,
                city: shippingAddressCity,
                country: shippingAddressCountry
            }
        });
        console.log(updateadrress);
    }
    return {
        statusCode: 200,
        message: "Shipping address  successfully"
    };
};
const postUpdateProjectToMicroservice = async (ProjectUpdateRequestToMicroservice) => {
    const paymiRes = await getPaymiConnection();
    const authToken = paymiRes.accessToken;
    const finalUrl = `${process.env.apiEndpoint}project`;
    console.log(finalUrl);
    try {
        return await superagent__WEBPACK_IMPORTED_MODULE_2___default().put(finalUrl)
            .send(ProjectUpdateRequestToMicroservice)
            .set("Content-Type", "application/json")
            .set("Authorization", authToken);
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};
const getPaymiConnection = async () => {
    const finalUrl = process.env.apiEndpoint + "authenticate";
    console.log(finalUrl);
    const reqBody = {
        clientId: process.env.CDClientId
    };
    try {
        const res = await superagent__WEBPACK_IMPORTED_MODULE_2___default().post(finalUrl)
            .set("Content-Type", "application/json")
            .send(reqBody);
        return res.body;
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/project/Queries/Getpaymentmilestonedetails.ts":
/*!***********************************************************************************!*\
  !*** ./src/api/paymentMicroservice/project/Queries/Getpaymentmilestonedetails.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPaymentMilestoneDetail": () => (/* binding */ getPaymentMilestoneDetail)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");

const getPaymentMilestoneDetail = async (root, args, context) => {
    let pmResponseObj;
    try {
        const pmdetail = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findFirst({ where: { id: args.id } });
        const payentConfirmationsList = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts.findMany({
            where: {
                paymentmillestoneid: args.id
            }
        });
        pmResponseObj = { code: 200, message: "success", payentConfirmationsList: payentConfirmationsList, pmdetail: pmdetail };
        return pmResponseObj;
    }
    catch (error) {
        pmResponseObj = { code: 400, message: error.message };
        return pmResponseObj;
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/project/Queries/Getpaymentmilestonelist.ts":
/*!********************************************************************************!*\
  !*** ./src/api/paymentMicroservice/project/Queries/Getpaymentmilestonelist.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPaymentMilestoneList": () => (/* binding */ getPaymentMilestoneList)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");

const getPaymentMilestoneList = async (root, args, context) => {
    let pmResponseObj;
    try {
        const pmlist = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findMany({ where: { projectid: args.projectid } });
        pmResponseObj = { code: 200, message: "success", data: pmlist };
        return pmResponseObj;
    }
    catch (error) {
        pmResponseObj = { code: 400, message: error.message };
        return pmResponseObj;
    }
};


/***/ }),

/***/ "./src/api/paymentMicroservice/project/resolver.ts":
/*!*********************************************************!*\
  !*** ./src/api/paymentMicroservice/project/resolver.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProjectPaymentReslovers": () => (/* binding */ ProjectPaymentReslovers)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_Getpaymentmilestonelist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/Getpaymentmilestonelist */ "./src/api/paymentMicroservice/project/Queries/Getpaymentmilestonelist.ts");
/* harmony import */ var _Queries_Getpaymentmilestonedetails__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Queries/Getpaymentmilestonedetails */ "./src/api/paymentMicroservice/project/Queries/Getpaymentmilestonedetails.ts");
/* harmony import */ var _Mutations_UpdateProjectAddress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mutations/UpdateProjectAddress */ "./src/api/paymentMicroservice/project/Mutations/UpdateProjectAddress.ts");




const ProjectPaymentReslovers = {
    Mutation: {
        updateProject: async (parent, _args, context) => (0,_Mutations_UpdateProjectAddress__WEBPACK_IMPORTED_MODULE_3__.updateProject)(parent, _args, context),
    },
    Query: {
        getPaymentMilestoneList: async (parent, _args, context) => (0,_Queries_Getpaymentmilestonelist__WEBPACK_IMPORTED_MODULE_1__.getPaymentMilestoneList)(parent, _args, context),
        getPaymentMilestoneDetail: async (parent, _args, context) => (0,_Queries_Getpaymentmilestonedetails__WEBPACK_IMPORTED_MODULE_2__.getPaymentMilestoneDetail)(parent, _args, context),
    },
    JSON: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.GraphQLJSON
};


/***/ }),

/***/ "./src/api/paymentMicroservice/project/typedef.ts":
/*!********************************************************!*\
  !*** ./src/api/paymentMicroservice/project/typedef.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProjectaymentTypedef": () => (/* binding */ ProjectaymentTypedef)
/* harmony export */ });
const ProjectaymentTypedef = `
scalar JSON

type projectupdatedata{
    statusCode:Int
    message:String
}

type getpmlistResponse{
    code:Int
    message: String
    data:JSON
}
type getpmdetailresponse{
    code:Int
    message: String
    payentConfirmationsList:JSON
    pmdetail:JSON
}

type Mutation {

updateProject(
    clientid:String,
    shippingAddressCountry:String,
    shippingAddressShippingState:String,
    shippingAddressStreet1:String,
    shippingAddressStreet2:String,
    shippingAddressCity:String,
    shippingAddressZipOrPostalCode:String
):projectupdatedata
}

type Query {
    getPaymentMilestoneList(projectid:Int):getpmlistResponse
    getPaymentMilestoneDetail(id:Int):getpmdetailresponse
}

`;


/***/ }),

/***/ "./src/api/paymentMicroservice/razorpay/Mutation/RazorpayGeneratePaymentLink.ts":
/*!**************************************************************************************!*\
  !*** ./src/api/paymentMicroservice/razorpay/Mutation/RazorpayGeneratePaymentLink.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class RazorpayGeneratePaymentLink extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set('Authorization', this.context.headers.authorization);
    }
    async paymentLinkData(args) {
        const { amount, description, reference_id, name, email, client_id, requestID, appName } = args;
        return this.post('razorpayGenearteLink', {
            amount,
            description,
            reference_id,
            name,
            email,
            client_id,
            requestID,
            appName
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RazorpayGeneratePaymentLink);


/***/ }),

/***/ "./src/api/paymentMicroservice/razorpay/Mutation/RazorpayWebhook.ts":
/*!**************************************************************************!*\
  !*** ./src/api/paymentMicroservice/razorpay/Mutation/RazorpayWebhook.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

class RazorpayWebhook extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.apiEndpoint;
    }
    willSendRequest(request) {
        request.headers.set('Authorization', this.context.headers.authorization);
    }
    async webhookData(args) {
        const { razorpay_payment_link_id, razorpay_payment_link_reference_id, razorpay_payment_link_status, razorpay_signature, appName, razorpay_payment_id } = args;
        return this.post('webhook', {
            razorpay_payment_link_id,
            razorpay_payment_link_reference_id,
            razorpay_payment_link_status,
            razorpay_signature,
            appName,
            razorpay_payment_id,
        });
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RazorpayWebhook);


/***/ }),

/***/ "./src/api/paymentMicroservice/razorpay/resolvers.ts":
/*!***********************************************************!*\
  !*** ./src/api/paymentMicroservice/razorpay/resolvers.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RazorpayReslovers": () => (/* binding */ RazorpayReslovers)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);

const RazorpayReslovers = {
    Mutation: {
        RazorpayGeneratePaymentLink: async (_, args, { dataSources, req }) => dataSources.RazorpayGeneratePaymentLink.paymentLinkData(args, req),
        RazorpayWebhook: async (_, args, { dataSources, req }) => dataSources.RazorpayWebhook.webhookData(args, req),
    },
    JSON: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.GraphQLJSON
};


/***/ }),

/***/ "./src/api/paymentMicroservice/razorpay/typedefs.ts":
/*!**********************************************************!*\
  !*** ./src/api/paymentMicroservice/razorpay/typedefs.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RazorpayTypedef": () => (/* binding */ RazorpayTypedef)
/* harmony export */ });
const RazorpayTypedef = `
scalar JSON

type generatelinkdata{
    statusCode:Int
    message:String
    code:Int
    response:JSON
}
type webhookdata{
    statusCode:Int
    message:String
    code:Int
}

type Mutation {
    RazorpayGeneratePaymentLink(
        amount:Float,
        description:String,
        reference_id:String,
        name:String,
        email:String,
        client_id:String,
        requestID:[String],
        appName:String
):generatelinkdata

RazorpayWebhook(
    razorpay_payment_link_id:String,
        razorpay_payment_link_reference_id:String,
        razorpay_payment_link_status:String,
        razorpay_signature:String,
        appName:String,
        razorpay_payment_id:String,
):webhookdata
}

`;


/***/ }),

/***/ "./src/api/profiles/Mutations/addmutations.ts":
/*!****************************************************!*\
  !*** ./src/api/profiles/Mutations/addmutations.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addProfile": () => (/* binding */ addProfile)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const addProfile = async (root, args, context) => {
    let profileResponseObj;
    const { profile_name, status, permissions } = args;
    try {
        const createprofile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.create({
            data: {
                profile_name,
                status,
                permissions: permissions,
                created_date: new Date(),
                updated_at: new Date()
            },
        });
        profileResponseObj = { code: 200, message: "success", data: createprofile };
        return profileResponseObj;
    }
    catch (error) {
        profileResponseObj = { code: 400, message: error.message };
        return profileResponseObj;
    }
};


/***/ }),

/***/ "./src/api/profiles/Mutations/updatemutations.ts":
/*!*******************************************************!*\
  !*** ./src/api/profiles/Mutations/updatemutations.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateProfile": () => (/* binding */ updateProfile)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const updateProfile = async (root, args, context) => {
    let profileResponseObj;
    const { profileid, profile_name, status, permissions, created_date, updated_at } = args;
    try {
        const updateprofile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.update({
            data: {
                profile_name: profile_name,
                status: status,
                permissions: permissions,
                created_date: created_date,
                updated_at: updated_at,
            },
            where: {
                profileid: profileid,
            },
        });
        profileResponseObj = { code: 200, message: "success", data: updateprofile };
        return profileResponseObj;
    }
    catch (error) {
        profileResponseObj = { code: 400, message: error.message };
        return profileResponseObj;
    }
};


/***/ }),

/***/ "./src/api/profiles/Queries/getAllProfiles.ts":
/*!****************************************************!*\
  !*** ./src/api/profiles/Queries/getAllProfiles.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAllProfiles": () => (/* binding */ getAllProfiles)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const getAllProfiles = async () => {
    let profileResponseObj;
    try {
        const profiles = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findMany();
        profileResponseObj = { code: 200, message: "success", data: profiles };
        return profileResponseObj;
    }
    catch (error) {
        profileResponseObj = { code: 400, message: error.message };
        return profileResponseObj;
    }
};


/***/ }),

/***/ "./src/api/profiles/Queries/getProfileById.ts":
/*!****************************************************!*\
  !*** ./src/api/profiles/Queries/getProfileById.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getProfileById": () => (/* binding */ getProfileById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const getProfileById = async (root, args, context) => {
    let profileResponseObj;
    try {
        const profiles = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findMany({ where: { profileid: args.profileid } });
        profileResponseObj = { code: 200, message: "success", data: profiles };
        return profileResponseObj;
    }
    catch (error) {
        profileResponseObj = { code: 400, message: error.message };
        return profileResponseObj;
    }
};


/***/ }),

/***/ "./src/api/profiles/resolver.ts":
/*!**************************************!*\
  !*** ./src/api/profiles/resolver.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "profilesResolver": () => (/* binding */ profilesResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Mutations_addmutations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mutations/addmutations */ "./src/api/profiles/Mutations/addmutations.ts");
/* harmony import */ var _Mutations_updatemutations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutations/updatemutations */ "./src/api/profiles/Mutations/updatemutations.ts");
/* harmony import */ var _Queries_getAllProfiles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Queries/getAllProfiles */ "./src/api/profiles/Queries/getAllProfiles.ts");
/* harmony import */ var _Queries_getProfileById__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Queries/getProfileById */ "./src/api/profiles/Queries/getProfileById.ts");





const profilesResolver = {
    Mutation: {
        addProfile: async (parent, _args, context) => (0,_Mutations_addmutations__WEBPACK_IMPORTED_MODULE_1__.addProfile)(parent, _args, context),
        updateProfile: async (parent, _args, context) => (0,_Mutations_updatemutations__WEBPACK_IMPORTED_MODULE_2__.updateProfile)(parent, _args, context),
    },
    Query: {
        getAllProfiles: async () => (0,_Queries_getAllProfiles__WEBPACK_IMPORTED_MODULE_3__.getAllProfiles)(),
        getProfileById: async (parent, _args, context) => (0,_Queries_getProfileById__WEBPACK_IMPORTED_MODULE_4__.getProfileById)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
    JSON: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.GraphQLJSON
};


/***/ }),

/***/ "./src/api/profiles/typedef.ts":
/*!*************************************!*\
  !*** ./src/api/profiles/typedef.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "profilesTypedef": () => (/* binding */ profilesTypedef)
/* harmony export */ });
const profilesTypedef = `
scalar JSON
type Profiles {
    profileid: Int
    profile_name: String
    status: Boolean
    permissions:JSON
    created_date: DateTime
    updated_at: DateTime
}

type profileResponse {
    code:Int
    message: String
    data:Profiles
}

type getprofileResponse{
    code:Int
    message: String
    data:[Profiles]
}

type Query {
    getAllProfiles:getprofileResponse
    getProfileById(profileid:Int):getprofileResponse
}
type Mutation{
    addProfile(
        profile_name:String,
        status:Boolean,
        permissions:JSON,
        created_date:DateTime,
        updated_at:DateTime): profileResponse

        updateProfile(
            profileid:Int!
            profile_name:String,
            status:Boolean,
            permissions:JSON,
            created_date:DateTime,
            updated_at:DateTime): profileResponse

}
scalar DateTime

`;


/***/ }),

/***/ "./src/api/projectMom/Comments/Mutations/CreateComment.ts":
/*!****************************************************************!*\
  !*** ./src/api/projectMom/Comments/Mutations/CreateComment.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMomComment": () => (/* binding */ createMomComment)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");



const createMomComment = async (root, args, context) => {
    let momCommentsResponse;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticateDdCd)(context);
        const { momid, commentdetails, addedby, attachment } = args;
        let toS3;
        const momComment = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_mom_comments.create({
            data: {
                momid,
                commentdetails,
                addedby,
                createdate: new Date(),
                isshow: true
            },
        });
        console.log(123, momComment);
        if (attachment != null) {
            if (attachment.length) {
                await Promise.all(attachment.map(async (element) => {
                    const attachedFile = {
                        key: element.filename,
                        contentType: element.Content_Type,
                        base64: element.base64,
                        commentid: momComment.id
                    };
                    toS3 = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__.UploadFileOnS3)(attachedFile);
                    element.data = toS3.location;
                }));
            }
        }
        const commentObject = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_mom_comments.findMany({
            where: { id: momComment.id },
            include: {
                attachments: true
            }
        });
        momCommentsResponse = { code: 200, message: "success", data: commentObject };
        return momCommentsResponse;
    }
    catch (error) {
        momCommentsResponse = { code: 400, message: error.message };
        return momCommentsResponse;
    }
};


/***/ }),

/***/ "./src/api/projectMom/Comments/Mutations/DeleteComment.ts":
/*!****************************************************************!*\
  !*** ./src/api/projectMom/Comments/Mutations/DeleteComment.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deleteMomComment": () => (/* binding */ deleteMomComment)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const deleteMomComment = async (_root, args, _context) => {
    let momCommentsResponse;
    const { id, deletedby } = args;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticateDdCd)(_context);
        const momComment = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_mom_comments.update({
            data: {
                id,
                deletedby,
                deleteddate: new Date(),
                isshow: false
            }, where: { id: id }
        });
        const commentObject = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_mom_comments.findMany({
            where: { id: momComment.id }
        });
        momCommentsResponse = { code: 200, message: "success", data: commentObject };
        return momCommentsResponse;
    }
    catch (error) {
        momCommentsResponse = { code: 400, message: error.message };
        return momCommentsResponse;
    }
};


/***/ }),

/***/ "./src/api/projectMom/Comments/Mutations/UpdateComment.ts":
/*!****************************************************************!*\
  !*** ./src/api/projectMom/Comments/Mutations/UpdateComment.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateMomComment": () => (/* binding */ updateMomComment)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");



const updateMomComment = async (root, args, context) => {
    let momCommentsResponse;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticateDdCd)(context);
        let toS3;
        const { id, commentdetails, attachment } = args;
        if (attachment != null) {
            if (attachment.length) {
                await Promise.all(attachment.map(async (element) => {
                    const attachedFile = {
                        key: element.filename,
                        contentType: element.Content_Type,
                        base64: element.base64,
                        commentid: momComment.id
                    };
                    toS3 = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__.UploadFileOnS3)(attachedFile);
                    element.data = toS3.location;
                }));
            }
        }
        const momComment = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_mom_comments.update({
            data: { id, commentdetails, updatedate: new Date() },
            where: { id: id }
        });
        const commentObject = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_mom_comments.findMany({
            where: { id: momComment.id }
        });
        momCommentsResponse = { code: 200, message: "success", data: commentObject };
        return momCommentsResponse;
    }
    catch (error) {
        momCommentsResponse = { code: 400, message: error.message };
        return momCommentsResponse;
    }
};


/***/ }),

/***/ "./src/api/projectMom/Comments/Queries/GetCommentById.ts":
/*!***************************************************************!*\
  !*** ./src/api/projectMom/Comments/Queries/GetCommentById.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCommentById": () => (/* binding */ getCommentById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const getCommentById = async (root, args, context) => {
    let momCommentsResponse;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticateDdCd)(context);
        const momComment = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_mom_comments.findMany({
            where: { id: args.id, isshow: true }, include: {
                attachments: true
            }
        });
        momCommentsResponse = { code: 200, message: "success", data: momComment };
        return momCommentsResponse;
    }
    catch (error) {
        momCommentsResponse = { code: 400, message: error.message };
        return momCommentsResponse;
    }
};


/***/ }),

/***/ "./src/api/projectMom/Comments/resolver.ts":
/*!*************************************************!*\
  !*** ./src/api/projectMom/Comments/resolver.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "momCommentResolver": () => (/* binding */ momCommentResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Comments_Mutations_CreateComment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Comments/Mutations/CreateComment */ "./src/api/projectMom/Comments/Mutations/CreateComment.ts");
/* harmony import */ var _Comments_Mutations_UpdateComment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Comments/Mutations/UpdateComment */ "./src/api/projectMom/Comments/Mutations/UpdateComment.ts");
/* harmony import */ var _Comments_Mutations_DeleteComment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Comments/Mutations/DeleteComment */ "./src/api/projectMom/Comments/Mutations/DeleteComment.ts");
/* harmony import */ var _Comments_Queries_GetCommentById__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Comments/Queries/GetCommentById */ "./src/api/projectMom/Comments/Queries/GetCommentById.ts");





const momCommentResolver = {
    Query: {
        getCommentById: async (parent, _args, context) => (0,_Comments_Queries_GetCommentById__WEBPACK_IMPORTED_MODULE_4__.getCommentById)(parent, _args, context),
    },
    Mutation: {
        createMomComment: async (parent, _args, context) => (0,_Comments_Mutations_CreateComment__WEBPACK_IMPORTED_MODULE_1__.createMomComment)(parent, _args, context),
        updateMomComment: async (parent, _args, context) => (0,_Comments_Mutations_UpdateComment__WEBPACK_IMPORTED_MODULE_2__.updateMomComment)(parent, _args, context),
        deleteMomComment: async (parent, _args, context) => (0,_Comments_Mutations_DeleteComment__WEBPACK_IMPORTED_MODULE_3__.deleteMomComment)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/projectMom/Comments/typedef.ts":
/*!************************************************!*\
  !*** ./src/api/projectMom/Comments/typedef.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "momCommentsTypedef": () => (/* binding */ momCommentsTypedef)
/* harmony export */ });
const momCommentsTypedef = `

    type Attachments{
        id : Int!
        filekey : String
        contenttype : String
        location : String
        commentid : Int
        momid: Int
    }
    type MomComments{
        id : Int!
        momid : Int
        commentdetails : String
        addedby : String
        deletedby : String
        createdate : DateTime
        deleteddate : DateTime
        updatedate : DateTime
        isshow : Boolean
        attachments : [Attachments]
    }
    
    type MomCommentsResponse{
        code:Int
        message:String,
        data:[MomComments]
    }
    type Mutation{
        createMomComment(
            momid : Int!
            commentdetails : String
            addedby : String
            attachment : JSON): MomCommentsResponse 

        updateMomComment(
            id : Int
            commentdetails : String
            attachment : JSON): MomCommentsResponse
            
        deleteMomComment(
            id : Int
            deletedby : String): MomCommentsResponse
    }

    type Query{
        getCommentById(id:Int): MomCommentsResponse
    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/projectMom/Mutations/CreateMom.ts":
/*!***************************************************!*\
  !*** ./src/api/projectMom/Mutations/CreateMom.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createMom": () => (/* binding */ createMom)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const createMom = async (root, args, context) => {
    let momResponse;
    try {
        const { projectid, milestoneid, status } = args;
        const projectMom = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_mom.create({
            data: {
                projectid, milestoneid, status
            },
        });
        const projectMOmObject = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_mom.findMany({
            where: { id: projectMom.id },
            include: {
                momComments: true
            }
        });
        momResponse = { code: 200, message: "success", data: projectMOmObject };
        return momResponse;
    }
    catch (error) {
        momResponse = { code: 400, message: error.message };
        return momResponse;
    }
};


/***/ }),

/***/ "./src/api/projectMom/Mutations/UpdateMom.ts":
/*!***************************************************!*\
  !*** ./src/api/projectMom/Mutations/UpdateMom.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateMom": () => (/* binding */ updateMom)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");




const updateMom = async (root, args, context) => {
    let momResponse;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticate)(context, "DD");
        const { id, designerid, meetingname, meetingagenda, meetingdescription, meetingdate, attachment, status, } = args;
        let toS3;
        if (attachment != null) {
            if (attachment.length) {
                await Promise.all(attachment.map(async (element) => {
                    const attachedFile = {
                        key: element.filename,
                        contentType: element.Content_Type,
                        base64: element.base64,
                        userid: user.userid,
                        momid: id,
                    };
                    toS3 = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__.UploadFileOnS3)(attachedFile);
                    element.data = toS3.location;
                }));
            }
        }
        let sentondate;
        if (status === "Shared") {
            sentondate = new Date();
        }
        const projectMom = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_mom.update({
            data: {
                designerid,
                meetingname,
                meetingagenda,
                meetingdescription,
                meetingdate,
                status,
                sentondate,
            },
            where: { id: id },
        });
        console.log(projectMom);
        const projectMOmObject = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_mom.findMany({
            where: { id: projectMom.id },
            include: {
                attachments: true,
                momComments: true,
            },
        });
        if (status === "Shared") {
            let selectedMilestone;
            const mom = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_mom.findFirst({ where: { id: id } });
            const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
                where: { id: mom.projectid },
            });
            let milestonedetails = [], milestonechecklist = [];
            const milestones = project.milestones;
            milestonedetails = milestones["attributes"].milestone_details;
            milestonedetails.forEach(async (milestone) => {
                milestonechecklist = milestone.milestone_checklist;
                milestonechecklist.forEach(async (fetchedmilestone) => {
                    if (fetchedmilestone.length !== 0 &&
                        fetchedmilestone["checklist_string"] === meetingname) {
                        fetchedmilestone.is_checked = true;
                        selectedMilestone = milestone;
                    }
                });
            });
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                data: { milestones: milestones },
                where: { id: project.id },
            });
            await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__.checkAndMarkMilestonesOnSmartsheet)(project.id, selectedMilestone);
        }
        momResponse = { code: 200, message: "success", data: projectMOmObject };
        return momResponse;
    }
    catch (error) {
        momResponse = { code: 400, message: error.message };
        return momResponse;
    }
};


/***/ }),

/***/ "./src/api/projectMom/Queries/getMomById.ts":
/*!**************************************************!*\
  !*** ./src/api/projectMom/Queries/getMomById.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMomById": () => (/* binding */ getMomById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const getMomById = async (root, args, context) => {
    let momResponse;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticateDdCd)(context);
        const projectMom = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_mom.findMany({
            where: { id: args.id },
            include: {
                attachments: true,
                momComments: true,
            }
        });
        const momComments = projectMom[0].momComments;
        let momComment;
        await Promise.all(momComments.map(async (element) => {
            momComment = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_mom_comments.findMany({
                where: { id: element.id, isshow: true }, include: {
                    attachments: true
                }
            });
            element["attachments"] = momComment[0].attachments;
        }));
        momResponse = { code: 200, message: "success", data: projectMom };
        return momResponse;
    }
    catch (error) {
        momResponse = { code: 400, message: error.message };
        return momResponse;
    }
};


/***/ }),

/***/ "./src/api/projectMom/Queries/getMomByProject.ts":
/*!*******************************************************!*\
  !*** ./src/api/projectMom/Queries/getMomByProject.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMomByProjectId": () => (/* binding */ getMomByProjectId)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const getMomByProjectId = async (root, args, context) => {
    let momResponse;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticateDdCd)(context);
        const projectMom = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_mom.findMany({
            where: { projectid: args.projectid, status: args.status },
            include: {
                attachments: true,
                momComments: true
            }
        });
        let attachmentscount = 0;
        await Promise.all(projectMom.map((momattachments) => {
            const attachments = momattachments.attachments;
            if (attachments.length !== 0) {
                attachments.map((attachement) => {
                    if (Object.keys(attachement).length) {
                        attachmentscount++;
                    }
                });
            }
        }));
        console.log(76, attachmentscount);
        momResponse = { code: 200, message: "success", data: projectMom, attachmentscount: attachmentscount };
        return momResponse;
    }
    catch (error) {
        momResponse = { code: 400, message: error.message };
        return momResponse;
    }
};


/***/ }),

/***/ "./src/api/projectMom/resolver.ts":
/*!****************************************!*\
  !*** ./src/api/projectMom/resolver.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "projectMomResolver": () => (/* binding */ projectMomResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Mutations_UpdateMom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mutations/UpdateMom */ "./src/api/projectMom/Mutations/UpdateMom.ts");
/* harmony import */ var _Mutations_CreateMom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutations/CreateMom */ "./src/api/projectMom/Mutations/CreateMom.ts");
/* harmony import */ var _Queries_getMomById__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Queries/getMomById */ "./src/api/projectMom/Queries/getMomById.ts");
/* harmony import */ var _Queries_getMomByProject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Queries/getMomByProject */ "./src/api/projectMom/Queries/getMomByProject.ts");





const projectMomResolver = {
    Query: {
        getMomById: async (parent, _args, context) => (0,_Queries_getMomById__WEBPACK_IMPORTED_MODULE_3__.getMomById)(parent, _args, context),
        getMomByProjectId: async (parent, _args, context) => (0,_Queries_getMomByProject__WEBPACK_IMPORTED_MODULE_4__.getMomByProjectId)(parent, _args, context),
    },
    Mutation: {
        createMom: async (parent, _args, context) => (0,_Mutations_CreateMom__WEBPACK_IMPORTED_MODULE_2__.createMom)(parent, _args, context),
        updateMom: async (parent, _args, context) => (0,_Mutations_UpdateMom__WEBPACK_IMPORTED_MODULE_1__.updateMom)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/projectMom/typedef.ts":
/*!***************************************!*\
  !*** ./src/api/projectMom/typedef.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "projectMomTypedef": () => (/* binding */ projectMomTypedef)
/* harmony export */ });
const projectMomTypedef = `
type ProjectMoms{
    id : Int!
    projectid : Int
    milestoneid : Int
    designerid : Int
    meetingname : String
    meetingagenda : String
    meetingdescription : String
    meetingdate : DateTime
    status : String
    sentondate : DateTime
    attachments: [Attachments]
    momComments : [MomComments]
    }

    type MomResponse{
        code:Int
        message:String,
        data:[ProjectMoms]
        attachmentscount: Int
    }
    type Mutation{
        createMom(
            
            projectid : Int,
            milestoneid : Int,
            status : String): MomResponse
    
        updateMom(
            id : Int!,
            designerid : Int,
            meetingname : String,
            meetingagenda : String,
            meetingdescription : String,
            meetingdate : DateTime,
            attachment : JSON,
            status : String): MomResponse
    }

    type Query{
        getMomById(id:Int!): MomResponse
        getMomByProjectId(projectid:Int!,status:String): MomResponse
    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/projects/Mutations/AddMilestoneFiles.ts":
/*!*********************************************************!*\
  !*** ./src/api/projects/Mutations/AddMilestoneFiles.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addMilestoneFiles": () => (/* binding */ addMilestoneFiles),
/* harmony export */   "getApprovalStatus": () => (/* binding */ getApprovalStatus)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_enumerations_FileCheckListEnums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/enumerations/FileCheckListEnums */ "./src/domain/enumerations/FileCheckListEnums.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");





const addMilestoneFiles = async (root, args, context) => {
    const { projectid, filename, filekey, fileurl, contenttype, uploadedby, comments, } = args;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticate)(context, "DD");
        let selectedMilestone;
        const fileCheckListName = await validateAndGetChecklistName(filename);
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: { id: projectid },
        });
        if (!project) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Project not found");
        }
        let milestonedetails = [], milestonechecklist = [], fileschecklist = [];
        const milestones = project.milestones;
        milestonedetails = milestones["attributes"].milestone_details;
        milestonedetails.forEach(async (milestone) => {
            milestonechecklist = milestone.milestone_checklist;
            milestonechecklist.forEach(async (fetchedmilestone) => {
                if (filename === _domain_enumerations_FileCheckListEnums__WEBPACK_IMPORTED_MODULE_1__.FileCheckListName.SURVEY_DRAWINGS ||
                    filename === _domain_enumerations_FileCheckListEnums__WEBPACK_IMPORTED_MODULE_1__.FileCheckListName.SITE_IMAGES ||
                    filename === _domain_enumerations_FileCheckListEnums__WEBPACK_IMPORTED_MODULE_1__.FileCheckListName.DESIGN_PRESENTATION) {
                    if (fetchedmilestone.length !== 0 &&
                        fetchedmilestone["checklist_string"] === fileCheckListName) {
                        fetchedmilestone.is_checked = true;
                        selectedMilestone = milestone;
                    }
                }
            });
        });
        fileschecklist = milestones["attributes"].files_checklist;
        fileschecklist.forEach(async (file) => {
            if (file.length !== 0 && file["checklist_string"] === filename) {
                file.filekey = filekey;
                file.fileurl = fileurl;
                file.contentType = contenttype;
                file.uploadedby = uploadedby;
                file.uploadedon = new Date();
                const res = getApprovalStatus(file.approval_from_customer);
                file.approvalstatus = res.status;
                file.sentondate = res.sentOnDate;
                file.created_at = new Date();
                file.updated_at = new Date();
                file.comments = comments;
            }
        });
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            data: { milestones: milestones },
            where: { id: projectid },
        });
        if (selectedMilestone) {
            await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_4__.checkAndMarkMilestonesOnSmartsheet)(projectid, selectedMilestone);
        }
        return { code: 200, message: "success" };
    }
    catch (error) {
        return { code: 400, message: error.message };
    }
};
const validateAndGetChecklistName = async (checklistNameInReq) => {
    return (0,_domain_enumerations_FileCheckListEnums__WEBPACK_IMPORTED_MODULE_1__.getFileChecklistName)(checklistNameInReq);
};
const getApprovalStatus = (approvalRequiredstatus) => {
    let status, sentOnDate;
    if (approvalRequiredstatus) {
        status = "Pending Approval";
        sentOnDate = new Date();
    }
    else {
        status = null;
        sentOnDate = null;
    }
    return { status, sentOnDate };
};


/***/ }),

/***/ "./src/api/projects/Mutations/AddProject.ts":
/*!**************************************************!*\
  !*** ./src/api/projects/Mutations/AddProject.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addProject": () => (/* binding */ addProject)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _Smartsheet_Mutations_UpdateDesigner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Smartsheet/Mutations/UpdateDesigner */ "./src/api/projects/Smartsheet/Mutations/UpdateDesigner.ts");
/* harmony import */ var _Smartsheet_Mutations_UpdateSurvey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Smartsheet/Mutations/UpdateSurvey */ "./src/api/projects/Smartsheet/Mutations/UpdateSurvey.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");
/* harmony import */ var _Smartsheet_Mutations_CreateSmartsheet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Smartsheet/Mutations/CreateSmartsheet */ "./src/api/projects/Smartsheet/Mutations/CreateSmartsheet.ts");
/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shortid */ "shortid");
/* harmony import */ var shortid__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(shortid__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _domain_services_template_EmailTemplate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../domain/services/template/EmailTemplate */ "./src/domain/services/template/EmailTemplate.ts");








const addProject = async (_root, args, _context) => {
    var _a, _b;
    const projectCreationResponse = { code: 200, message: "success", data: null };
    const { projectid, projectname, totalprojectvalue, signupdate, customerid, designerid, salesmanagerid, chmid, designstudioid, modularbaseamount, projectmodularvalue, modulardiscount, siteservicebaseamount, projectsiteservicesvalue, siteservicediscount, signupamount, signupstate, experiencecenterid, cityid, projectaddressid, cmmname, expectedhandoverdate, currentmilestone, projectphase, hasdesigneraccepted, hasdesigerresponded, hometype, initialsignupvalue, decorvalue, quoteid, projectrating, includepmfee, milestonetype, odooid, odoo_delivery_address_id, isnewpaymentproject, opportunityid, template, isimosproject, modularamountgst, siteserviceamountgst, modularabsolutediscount, modularpmfee, siteservicegst, siteservicepdflink, modularamountgstvalue, sitepmfee, siteservicediscountvalue, quotelink, proposalpdflink, salesmanagername } = args;
    try {
        const projectTemplates = await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__.callExternalAPIWithPost)("https://cms.designcafe.com/graphqlm", _utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__.queryForFetchingTemplate);
        const surveyExecId = await getSurveyExecutiveId(experiencecenterid);
        const projectAlreadyExist = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: {
                projectid: projectid,
            },
        });
        if (projectAlreadyExist) {
            return { code: 400, message: "Project already exists" };
        }
        if (projectTemplates) {
            const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.create({
                data: {
                    projectid,
                    milestones: (_a = projectTemplates === null || projectTemplates === void 0 ? void 0 : projectTemplates.data) === null || _a === void 0 ? void 0 : _a.projectTemplates.data[0],
                    projectname,
                    projectstatus: "draft",
                    totalprojectvalue,
                    createdate: new Date(),
                    updatedate: new Date(),
                    signupdate,
                    customerid,
                    designerid,
                    salesmanagerid,
                    chmid,
                    surveyexecutiveid: surveyExecId,
                    designstudioid,
                    modularbaseamount,
                    projectmodularvalue,
                    modulardiscount,
                    siteservicebaseamount,
                    projectsiteservicesvalue,
                    siteservicediscount,
                    signupamount,
                    signupstate,
                    experiencecenterid,
                    cityid,
                    projectaddressid,
                    cmmname,
                    expectedhandoverdate,
                    currentmilestone,
                    projectphase,
                    hasdesigneraccepted,
                    hasdesigerresponded,
                    hometype,
                    initialsignupvalue,
                    decorvalue,
                    quoteid,
                    projectrating,
                    includepmfee,
                    milestonetype,
                    odooid,
                    odoo_delivery_address_id,
                    isnewpaymentproject,
                    opportunityid,
                    template,
                    isimosproject,
                    modularamountgst,
                    siteserviceamountgst,
                    modularabsolutediscount,
                    modularpmfee,
                    siteservicegst,
                    siteservicepdflink,
                    modularamountgstvalue,
                    sitepmfee,
                    siteservicediscountvalue,
                    quotelink,
                    proposalpdflink,
                    salesmanagername
                },
            });
            if (project) {
                await addMOM((_b = projectTemplates === null || projectTemplates === void 0 ? void 0 : projectTemplates.data) === null || _b === void 0 ? void 0 : _b.projectTemplates.data[0], project.id);
                const smartSheetProjectResponse = await addProjectOnSmartSheet(project, args);
                if (smartSheetProjectResponse.code !== 200) {
                    projectCreationResponse.code = 400;
                    projectCreationResponse.message = smartSheetProjectResponse.message;
                    return projectCreationResponse;
                }
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                    where: {
                        id: project.id,
                    },
                    data: {
                        smartsheetid: smartSheetProjectResponse.sheetId.toString(),
                    },
                });
                if (projectCreationResponse.code === 200) {
                    const profile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findFirst({
                        where: { profile_name: "CHM Executive" },
                    });
                    let fetchUser = [];
                    const fetchTeam = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.findFirst({
                        where: { userid: args.designerid },
                    });
                    fetchUser = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.findMany({
                        where: { teamid: fetchTeam.teamid },
                        select: { userid: true },
                    });
                    var fetchedUser = fetchUser;
                    let getUserProfile;
                    for (var i = 0; i < fetchedUser.length; i++) {
                        if (fetchedUser[i].userid !== null) {
                            getUserProfile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                                where: { userid: fetchedUser[i].userid },
                            });
                            if (getUserProfile.profileid === profile.profileid) {
                                await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                                    where: { id: project.id },
                                    data: { chmid: getUserProfile.userid },
                                });
                            }
                        }
                    }
                }
                await AssignDesignerEmaili(smartSheetProjectResponse.sheetId.toString(), designerid);
                await AssignSurveyEmaili(smartSheetProjectResponse.sheetId.toString(), project.surveyexecutiveid);
                const addPaymentRequestResponse = await add5PercentPaymentRequestObject(projectmodularvalue, projectsiteservicesvalue, args.projectid, opportunityid);
                if (addPaymentRequestResponse.code !== 200) {
                    projectCreationResponse.code = 400;
                    projectCreationResponse.message = addPaymentRequestResponse.message;
                    return projectCreationResponse;
                }
                const quotesForProjects = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({
                    where: {
                        opportunityid: opportunityid,
                        latest_quote__c: true,
                    },
                });
                if (quotesForProjects) {
                    let roomList;
                    if (quotesForProjects.dc_room_list__c) {
                        roomList = getRoomListArray(quotesForProjects.dc_room_list__c);
                    }
                    const quoteData = {
                        quotename: quotesForProjects.name,
                        modularvalue: quotesForProjects.modular_amount__c,
                        siteservice: quotesForProjects.site_services_amount__c,
                        modulardiscount: quotesForProjects.modular_discount__c,
                        modularabsolutediscount: quotesForProjects.modular_fixed_discount__c,
                        siteserviceabsolutediscount: quotesForProjects.site_service_fixed_discount__c,
                        siteservicediscount: quotesForProjects.site_services_discount__c,
                        islatestquote: quotesForProjects.latest_quote__c,
                        salesforcequoteid: quotesForProjects.sfid,
                        opportunityid: quotesForProjects.opportunityid,
                        proposalpdf: quotesForProjects.proposal_pdf__c,
                        decorvalue: quotesForProjects.decor_amount__c,
                        modularpdflocation: quotesForProjects.quote_link__c,
                        siteservicepdflocation: quotesForProjects.site_services_pdf__c,
                        customername: quotesForProjects.customer_name__c,
                        roomlist: roomList,
                        modularxml: quotesForProjects.dc_modular_xml__c,
                        siteservicexml: quotesForProjects.dc_site_services_xml__c,
                    };
                    const projectQuote = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.create({
                        data: quoteData,
                    });
                    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                        where: {
                            id: project.id,
                        },
                        data: {
                            quoteid: projectQuote.id,
                        },
                    });
                }
                else {
                    projectCreationResponse.code = 400;
                    projectCreationResponse.message =
                        "Project Created But No Quote Found For the given Opportunity Id";
                }
            }
            projectCreationResponse.data = project;
        }
        else {
            projectCreationResponse.code = 400;
            projectCreationResponse.message = "Not able to set project template";
        }
    }
    catch (error) {
        console.log(error);
        projectCreationResponse.code = 400;
        projectCreationResponse.message = error.message;
    }
    return projectCreationResponse;
};
const getRoomListArray = (roomsArray) => {
    const stringifyRoomlist = JSON.parse(JSON.stringify(roomsArray).replace(/&quot;/g, '\\"'));
    return JSON.parse(stringifyRoomlist);
};
const addProjectOnSmartSheet = async (project, args) => {
    const fetchedDesignerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({
        where: {
            userid: args.designerid,
        },
        include: {
            users_city: {
                include: { city: true },
            },
            users_experiencecenters: {
                include: { center: true },
            },
            users_team: {
                include: { team: true },
            },
        },
    });
    console.log(224, args.customerid);
    const fetchedCustomerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findUnique({
        where: {
            customerid: args.customerid,
        },
        include: {
            addresses: true,
        },
    });
    let propertyAddress;
    if (fetchedCustomerData.addresses.length > 0) {
        const { street, city, state, zip, country } = fetchedCustomerData.addresses[0];
        propertyAddress = `${street} ${city} ${state} ${zip} ${country}`;
    }
    const customerName = getCustomerName(fetchedCustomerData);
    const smartSheetPayload = {
        projectId: project.id,
        clientName: customerName,
        clientId: args.projectid,
        projectSignupValue: args.signupamount,
        designerName: `${fetchedDesignerData.firstname} ${fetchedDesignerData.lastname}`,
        designStudio: `${fetchedDesignerData.users_team[0].team.name}`,
        salesOwner: "",
        clientEmail: fetchedCustomerData.customeremail,
        clientContact: `${fetchedCustomerData.customerphone}`,
        propertyName: "",
        propertyAddress: propertyAddress ? propertyAddress : null,
        status: "Draft",
        signupDate: new Date().toISOString().split("T")[0],
    };
    console.log(336, smartSheetPayload);
    return (0,_Smartsheet_Mutations_CreateSmartsheet__WEBPACK_IMPORTED_MODULE_4__.createSmartSheet)(null, smartSheetPayload, null);
};
const add5PercentPaymentRequestObject = async (projectmodularvalue, projectsiteservicesvalue, clientId, opportunityid) => {
    try {
        const paymentRequestArr = [
            {
                requestdate: new Date().toISOString().split("T")[0],
                category: "Modular",
                requestid: `PR-${shortid__WEBPACK_IMPORTED_MODULE_5___default().generate()}`,
                requestamount: projectmodularvalue
                    ? (5 / 100) * projectmodularvalue
                    : 0,
                description: "5% of Modular",
                clientid: clientId,
                status: "Pending",
                appname: "DD",
            },
        ];
        const paymentRequestArrForSF = [
            {
                category__c: "Modular",
                request_id__c: `PR-${shortid__WEBPACK_IMPORTED_MODULE_5___default().generate()}`,
                request_amount__c: projectmodularvalue
                    ? (5 / 100) * projectmodularvalue
                    : 0,
                description__c: "5% of Modular",
                client_id__c: clientId,
                status__c: "Pending",
                opportunity__c: opportunityid,
            },
        ];
        if (projectsiteservicesvalue) {
            paymentRequestArr.push({
                requestdate: new Date().toISOString().split("T")[0],
                category: "Site Services",
                requestid: `PR-${shortid__WEBPACK_IMPORTED_MODULE_5___default().generate()}`,
                requestamount: projectsiteservicesvalue
                    ? (5 / 100) * projectsiteservicesvalue
                    : 0,
                description: "5% of Site Service",
                clientid: clientId,
                status: "Pending",
                appname: "DD",
            });
            paymentRequestArrForSF.push({
                category__c: "Site Services",
                request_id__c: `PR-${shortid__WEBPACK_IMPORTED_MODULE_5___default().generate()}`,
                request_amount__c: projectsiteservicesvalue
                    ? (5 / 100) * projectsiteservicesvalue
                    : 0,
                description__c: "5% of Site Service",
                client_id__c: clientId,
                status__c: "Pending",
                opportunity__c: opportunityid,
            });
        }
        const addedPaymentRequestData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentrequests.createMany({
            data: paymentRequestArr,
        });
        const addedPaymentRequestDataSF = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.request_payment__c.createMany({
            data: paymentRequestArrForSF,
        });
        if (addedPaymentRequestData && addedPaymentRequestDataSF) {
            await callPaymentRequestNotification(clientId);
            return {
                code: 200,
                message: "Payment Request Successfully Added",
                data: paymentRequestArr,
            };
        }
        else {
            return {
                code: 400,
                message: addedPaymentRequestData
                    ? "Payment Request Not Added on SF"
                    : "Payment Request Not Added",
            };
        }
    }
    catch (e) {
        console.log(e.message);
        return { code: 400, message: e.message, data: null };
    }
};
const addMOM = async (milestones, projectId) => {
    const momLabelList = [];
    milestones["attributes"]["milestone_details"].forEach((item) => {
        if (item["milestone_checklist"].length > 0) {
            const momMilestoneObj = item.milestone_checklist.filter((checklist) => checklist.checklist_string.includes("MOM"));
            if (momMilestoneObj.length > 0) {
                momLabelList.push(momMilestoneObj[0].checklist_string);
            }
        }
    });
    if (momLabelList.length > 0) {
        const momPayloadArr = [];
        momLabelList.forEach((momLabel) => {
            momPayloadArr.push({
                projectid: projectId,
                meetingname: momLabel,
                meetingagenda: momLabel,
                status: "Draft",
            });
        });
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_mom.createMany({
            data: momPayloadArr,
        });
    }
};
const AssignSurveyEmaili = async (smartsheetid, surveyexecutiveid) => {
    if (surveyexecutiveid) {
        const survey = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({
            where: { userid: surveyexecutiveid },
        });
        if (survey) {
            const updateSurveyPayload = {
                smartSheetId: smartsheetid,
                surveyExecutiveEmail: survey.designcafeemail,
            };
            await (0,_Smartsheet_Mutations_UpdateSurvey__WEBPACK_IMPORTED_MODULE_2__.updateSurvey)(null, updateSurveyPayload, null);
        }
    }
};
const AssignDesignerEmaili = async (smartsheetid, designerid) => {
    if (designerid) {
        const designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({
            where: { userid: designerid },
        });
        if (designer) {
            const updateDesignerPayload = {
                smartSheetId: smartsheetid,
                designerEmail: designer.designcafeemail,
            };
            await (0,_Smartsheet_Mutations_UpdateDesigner__WEBPACK_IMPORTED_MODULE_1__.updateDesignerEmail)(null, updateDesignerPayload, null);
        }
    }
};
const getSurveyExecutiveId = async (experiencecenterid) => {
    const fetchedSurveyExecutives = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findMany({
        where: {
            profileid: 15,
        },
        include: {
            users_experiencecenters: {
                include: { center: true },
            },
        },
    });
    const surveyExecutives = [];
    if (fetchedSurveyExecutives.length > 0) {
        await Promise.all(fetchedSurveyExecutives.map((surveyExecutive) => {
            surveyExecutive.users_experiencecenters.map((exc) => {
                if (exc.centerid === experiencecenterid) {
                    surveyExecutives.push(surveyExecutive.userid);
                }
            });
        }));
    }
    let surveyExecutiveId;
    if (surveyExecutives.length) {
        if (surveyExecutives.length === 1) {
            surveyExecutiveId = surveyExecutives[0];
        }
        else if (surveyExecutives.length > 1) {
            const roundRobinData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_surveyroundrobin.findFirst({
                where: {
                    experiencecenterid: experiencecenterid,
                },
            });
            surveyExecutiveId = await roundRobinLogic(roundRobinData, surveyExecutives, experiencecenterid);
        }
    }
    return surveyExecutiveId;
};
const roundRobinLogic = async (roundRobinData, surveyExecutives, experienceCenterId) => {
    let surveyExecutiveToBeAssignedToProject;
    if (roundRobinData) {
        const latestSurveyExecutiveId = roundRobinData.surveyexecutiveid;
        const indexOfTheSurveyExecutiveAssignedToProject = surveyExecutives.findIndex((surveyExecutive) => surveyExecutive === latestSurveyExecutiveId);
        if (surveyExecutives.length ===
            indexOfTheSurveyExecutiveAssignedToProject + 1) {
            surveyExecutiveToBeAssignedToProject = surveyExecutives[0];
        }
        else {
            surveyExecutiveToBeAssignedToProject =
                surveyExecutives[indexOfTheSurveyExecutiveAssignedToProject + 1];
        }
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_surveyroundrobin.update({
            where: {
                roundrobinid: roundRobinData.roundrobinid,
            },
            data: {
                surveyexecutiveid: surveyExecutiveToBeAssignedToProject,
            },
        });
    }
    else {
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_surveyroundrobin.create({
            data: {
                experiencecenterid: experienceCenterId,
                surveyexecutiveid: surveyExecutives[0],
            },
        });
        surveyExecutiveToBeAssignedToProject = surveyExecutives[0];
    }
    return surveyExecutiveToBeAssignedToProject;
};
const callPaymentRequestNotification = async (clientId) => {
    const fetchProject = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({ where: { projectid: clientId } });
    const ccList = [];
    if (fetchProject) {
        if (fetchProject.designerid) {
            const designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({ where: { userid: fetchProject.designerid } });
            if (designer && designer.designcafeemail) {
                ccList.push(designer.designcafeemail);
            }
        }
        else {
            ccList.push("lorenzo@designcafe.com");
        }
        ccList.push("ddadmin@designcafe.com");
        if (fetchProject.chmid) {
            const chmExecutive = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({ where: { userid: fetchProject.chmid } });
            if (chmExecutive && chmExecutive.designcafeemail) {
                ccList.push(chmExecutive.designcafeemail);
            }
        }
    }
    const customer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({ where: { customerid: fetchProject.customerid } });
    const emailTemplateString = _domain_services_template_EmailTemplate__WEBPACK_IMPORTED_MODULE_7__["default"].paymentRequestTemplate(customer, clientId);
    const subject = `Payment Requested for your Project ${clientId}`;
    await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_6__.triggerEmailNotification)(customer.customeremail, subject, emailTemplateString, ccList);
};
const getCustomerName = (fetchedCustomerData) => {
    const firstname = fetchedCustomerData.firstname ? fetchedCustomerData.firstname.trim() : "";
    const lastname = fetchedCustomerData.lastname ? fetchedCustomerData.lastname.trim() : "";
    return `${firstname ? firstname + " " : ""}${lastname}`;
};


/***/ }),

/***/ "./src/api/projects/Mutations/CompleteChecklistApi.ts":
/*!************************************************************!*\
  !*** ./src/api/projects/Mutations/CompleteChecklistApi.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "completeChecklistApi": () => (/* binding */ completeChecklistApi)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);


const completeChecklistApi = async (_root, _args, _context) => {
    var _a, _b;
    try {
        const projectData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: { id: _args.projectId },
        });
        if (!projectData) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Project not found");
        }
        const modularbaseamount = projectData.modularbaseamount;
        const modulardiscount = projectData.modulardiscount;
        const modulardiscountcost = (modularbaseamount * modulardiscount) / 100;
        const modulargst = (modularbaseamount * 18) / 100;
        const modularBaseAmount = modularbaseamount + modulargst - modulardiscountcost;
        console.log(modularBaseAmount);
        const modularAmountfor5Percentage = Math.round(modularBaseAmount * 5) / 100;
        const modularAmountfor15Percentage = Math.round(modularBaseAmount * 20) / 100;
        const modularAmountfor35Percentage = Math.round(modularBaseAmount * 55) / 100;
        const modularAmountfor45Percentage = Math.round(modularBaseAmount);
        const ModualarMilestones = [
            modularAmountfor5Percentage,
            modularAmountfor15Percentage,
            modularAmountfor35Percentage,
            modularAmountfor45Percentage,
        ];
        const labelName = await GetLabelName(projectData, ModualarMilestones);
        console.log(labelName);
        const milestoneData = (_b = (_a = projectData === null || projectData === void 0 ? void 0 : projectData.milestones) === null || _a === void 0 ? void 0 : _a.attributes) === null || _b === void 0 ? void 0 : _b.milestone_details;
        milestoneData.forEach((element) => {
            if (element.milestone_checklist &&
                element.milestone_checklist.length !== 0 &&
                (element === null || element === void 0 ? void 0 : element.label) === labelName) {
                const milestoneChecklist = element === null || element === void 0 ? void 0 : element.milestone_checklist;
                milestoneChecklist.forEach((val) => {
                    if (val.length !== 0 &&
                        val.is_payment_milestone_checklist === true &&
                        val.required === true) {
                        val.is_checked = true;
                    }
                });
            }
        });
        projectData.milestones.attributes.milestone_details = milestoneData;
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            where: { id: _args.projectId },
            data: { milestones: projectData.milestones },
        });
        return {
            code: 200,
            message: "Checklist marked complete successfully.",
            milestonename: labelName,
        };
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(500, error.message);
    }
};
const GetLabelName = async (projectData, ModualarMilestones) => {
    const milestone = projectData.milestones;
    const modularnamefor5Percentage = milestone.attributes.milestone_details[0].label;
    const modularnamefor15Percentage = milestone.attributes.milestone_details[4].label;
    const modularnamefor35Percentage = milestone.attributes.milestone_details[9].label;
    const modularnamefor45Percentage = milestone.attributes.milestone_details[12].label;
    console.log(ModualarMilestones);
    const modularCollectedAmount = projectData.modular_collected_amount;
    const differenceAmount = 100;
    const milestoneEqualAmount = modularCollectedAmount + differenceAmount;
    console.log(milestoneEqualAmount);
    const modularAmount = ModualarMilestones.indexOf(modularCollectedAmount);
    let labelName;
    console.log(modularAmount);
    if (modularAmount >= 0) {
        console.log("1");
        if (modularAmount === 0) {
            labelName = modularnamefor5Percentage;
        }
        else if (modularAmount === 1) {
            labelName = modularnamefor15Percentage;
        }
        else if (modularAmount === 2) {
            labelName = modularnamefor35Percentage;
        }
        else if (modularAmount === 3) {
            labelName = modularnamefor45Percentage;
        }
    }
    else {
        const compareMilstone = ModualarMilestones.indexOf(milestoneEqualAmount);
        console.log(compareMilstone);
        console.log("2");
        if (compareMilstone === 0) {
            labelName = modularnamefor5Percentage;
        }
        else if (compareMilstone === 1) {
            labelName = modularnamefor15Percentage;
        }
        else if (compareMilstone === 2) {
            labelName = modularnamefor35Percentage;
        }
        else if (compareMilstone === 3) {
            labelName = modularnamefor45Percentage;
        }
    }
    return labelName;
};


/***/ }),

/***/ "./src/api/projects/Mutations/CompleteMilestoneChecklist.ts":
/*!******************************************************************!*\
  !*** ./src/api/projects/Mutations/CompleteMilestoneChecklist.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "completeMilestoneChecklist": () => (/* binding */ completeMilestoneChecklist)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");


const completeMilestoneChecklist = async (_root, args, _context) => {
    var _a, _b;
    const defaultResponseObj = { code: 200, message: null, data: null };
    const { projectId, checkListName } = args;
    let selectedMilestone;
    try {
        const fetchedProject = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findUnique({
            where: {
                id: projectId,
            },
        });
        if (fetchedProject) {
            (_b = (_a = fetchedProject === null || fetchedProject === void 0 ? void 0 : fetchedProject.milestones["attributes"]) === null || _a === void 0 ? void 0 : _a.milestone_details) === null || _b === void 0 ? void 0 : _b.forEach((milestone) => {
                if (milestone.milestone_checklist.length > 0) {
                    milestone.milestone_checklist.forEach(async (milestoneChecklist) => {
                        if (milestoneChecklist.checklist_string === checkListName) {
                            milestoneChecklist.is_checked = true;
                            selectedMilestone = milestone;
                        }
                    });
                }
            });
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                where: {
                    id: projectId
                },
                data: {
                    milestones: fetchedProject.milestones
                }
            });
            await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.checkAndMarkMilestonesOnSmartsheet)(projectId, selectedMilestone);
            defaultResponseObj.code = 200;
            defaultResponseObj.message = "Milestone Updated";
        }
    }
    catch (e) {
        defaultResponseObj.code = 400;
        defaultResponseObj.message = e.message;
    }
    return defaultResponseObj;
};


/***/ }),

/***/ "./src/api/projects/Mutations/ShareFileWithCustomer.ts":
/*!*************************************************************!*\
  !*** ./src/api/projects/Mutations/ShareFileWithCustomer.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shareFileWithCustomer": () => (/* binding */ shareFileWithCustomer)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_enumerations_FileCheckListEnums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/enumerations/FileCheckListEnums */ "./src/domain/enumerations/FileCheckListEnums.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_3__);




const shareFileWithCustomer = async (root, args, context) => {
    const { projectid, filename, sharewithcustomer, } = args;
    let shareFileWithCustomerRes;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(context, "DD");
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: { id: projectid },
        });
        if (!project) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Project not found");
        }
        let fileschecklist = [];
        const milestones = project.milestones;
        fileschecklist = milestones["attributes"].files_checklist;
        fileschecklist.forEach(async (file) => {
            if (file.length !== 0 && file["checklist_string"] === filename) {
                console.log(456, _domain_enumerations_FileCheckListEnums__WEBPACK_IMPORTED_MODULE_2__.FileCheckListName);
                if (filename === _domain_enumerations_FileCheckListEnums__WEBPACK_IMPORTED_MODULE_2__.FileCheckListName.SURVEY_DRAWINGS || filename === _domain_enumerations_FileCheckListEnums__WEBPACK_IMPORTED_MODULE_2__.FileCheckListName.SITE_IMAGES) {
                    file.share_with_customer = sharewithcustomer;
                    if (file.share_with_customer) {
                        shareFileWithCustomerRes = { code: 200, message: "File successfully shared with customer" };
                    }
                    else {
                        shareFileWithCustomerRes = { code: 200, message: "File shared with customer have been revoked" };
                    }
                }
                else {
                    if (file.share_with_customer) {
                        shareFileWithCustomerRes = { code: 400, message: "Sorry cannot unshare this file" };
                    }
                    else {
                        file.share_with_customer = sharewithcustomer;
                        shareFileWithCustomerRes = { code: 200, message: "File successfully shared with customer" };
                    }
                }
            }
        });
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            data: { milestones: milestones },
            where: { id: projectid },
        });
        return shareFileWithCustomerRes;
    }
    catch (error) {
        shareFileWithCustomerRes = { code: 400, message: "Sorry cannot unshare this file" };
        return shareFileWithCustomerRes;
    }
};


/***/ }),

/***/ "./src/api/projects/Mutations/UpdateFormFillMilestones.ts":
/*!****************************************************************!*\
  !*** ./src/api/projects/Mutations/UpdateFormFillMilestones.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateFormFillMilestones": () => (/* binding */ updateFormFillMilestones)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../api/users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");




const updateFormFillMilestones = async (_root, args, _context) => {
    const { projectId, formFillName, formFillData } = args;
    try {
        const fetchedProject = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findUnique({
            where: {
                id: projectId,
            },
        });
        let selectedMilestone;
        for (let i = 0; i < fetchedProject.milestones["attributes"].milestone_details.length; i++) {
            console.log(26);
            for (let j = 0; j <
                fetchedProject.milestones["attributes"].milestone_details[i]
                    .milestone_checklist.length; j++) {
                if (fetchedProject.milestones["attributes"].milestone_details[i]
                    .milestone_checklist[j].checklist_string === formFillName) {
                    if (formFillName === "Send Project to Production") {
                        fetchedProject.milestones["attributes"].milestone_details[i].milestone_checklist[j].approvalstatus = "Pending";
                        fetchedProject.milestones["attributes"].milestone_details[i].milestone_checklist[j].is_checked = true;
                        const data = {
                            projectmanagername: formFillData.pmName,
                            expectedhandoverdate: formFillData.projectHandOverDate,
                            siteaddress: formFillData.siteAddress,
                            isimosproject: formFillData.isProjectIMOS,
                            valuebeforediscount: formFillData.valueBeforeDiscount,
                            floorarea: formFillData.floorArea,
                            imosrooms: formFillData.imosRooms
                                ? [...formFillData.imosRooms]
                                : undefined,
                        };
                        selectedMilestone =
                            fetchedProject.milestones["attributes"].milestone_details[i];
                        const response = await callEmailNotification(formFillName, fetchedProject, formFillData);
                        if (response.message === "success") {
                            await completMilestoneForProductionRequestOrKickoff(projectId, data);
                        }
                    }
                    else if (formFillName === "Request Site Validation") {
                        fetchedProject.milestones["attributes"].milestone_details[i].milestone_checklist[j].is_checked = true;
                        fetchedProject.milestones["attributes"].milestone_details[i].milestone_checklist[j].data = {
                            dateTimeOfVisit: formFillData.dateTimeOfVisit,
                        };
                        const data = {
                            haslift: formFillData.hasLift,
                            hasfalseceiling: formFillData.hasFalseCeiling,
                            scopeforelectricalwork: formFillData.scopeForElectricalWork,
                            projecttype: formFillData.projectType,
                            isimosproject: formFillData.isProjectIMOS,
                            tentativeprojectdurationaftersignoff: formFillData.tentativeProjectDurationAfterSignOff,
                            scopeofwork: formFillData.scopeOfWork,
                            specialfinishes: formFillData.specialFinishes,
                        };
                        selectedMilestone =
                            fetchedProject.milestones["attributes"].milestone_details[i];
                        const response = await callEmailNotification(formFillName, fetchedProject, formFillData);
                        if (response.message === "success") {
                            await completMilestoneForProductionRequestOrKickoff(projectId, data);
                        }
                    }
                    else if (formFillName === "Request QC Check") {
                        console.log(6868);
                        selectedMilestone =
                            fetchedProject.milestones["attributes"].milestone_details[i];
                        console.log(69, selectedMilestone);
                        const response = await callEmailNotification(formFillName, fetchedProject, formFillData);
                        console.log(74, response);
                        if (response.message === "success") {
                            console.log(76);
                            fetchedProject.milestones["attributes"].milestone_details[i].milestone_checklist[j].is_checked = true;
                        }
                        else {
                            console.log(80);
                        }
                    }
                    else if (formFillName === "Request Customer Signoff") {
                        fetchedProject.milestones["attributes"].milestone_details[i].milestone_checklist[j].is_checked = true;
                        fetchedProject.milestones["attributes"].milestone_details[i].milestone_checklist[j].data = {
                            isRequested: true,
                        };
                        selectedMilestone =
                            fetchedProject.milestones["attributes"].milestone_details[i];
                    }
                }
            }
        }
        await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.checkAndMarkMilestonesOnSmartsheet)(projectId, selectedMilestone);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            where: {
                id: projectId,
            },
            data: {
                milestones: fetchedProject.milestones,
            },
        });
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 200;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = "Milestone Updated";
    }
    catch (e) {
        console.log(e);
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = e.message;
    }
    return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
};
const callEmailNotification = async (formFillName, fetchedProject, formFillData) => {
    var _a, _b, _c, _d, _e, _f;
    try {
        let response;
        const designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({
            where: { userid: fetchedProject.designerid },
        });
        const fetchedDesigner = await (0,_api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_3__.getUser)(designer.userid);
        const customer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findUnique({
            where: { customerid: fetchedProject.customerid },
        });
        const fileschecklist = fetchedProject.milestones["attributes"].files_checklist;
        let designPresentationURL, modularQuotationURL, siteServicesQuotationURL, modularDrawingsURL, siteDrawingsURL, signOffPPTURL;
        fileschecklist.forEach(async (file) => {
            switch (file["checklist_string"]) {
                case "Design Presentation":
                    designPresentationURL = file.fileurl;
                    break;
                case "Modular Quotation":
                    modularQuotationURL = file.fileurl;
                    break;
                case "Site Services Quotation":
                    siteServicesQuotationURL = file.fileurl;
                    break;
                case "Modular Drawings":
                    modularDrawingsURL = file.fileurl;
                    break;
                case "Site Service Drawings":
                    siteDrawingsURL = file.fileurl;
                    break;
                case "Sign-off PPT":
                    signOffPPTURL = file.fileurl;
                    break;
            }
        });
        const templateResponse = await getNotificationTemaplate(formFillName);
        const to = await fetchPlanningCoordinatorBasedOnCity(fetchedProject.cityid);
        const cc = ["ddadmin@designcafe.com"];
        let reportingManager;
        if (designer.reportingmanager) {
            reportingManager = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({
                where: { userid: designer.reportingmanager },
            });
        }
        cc.push(designer === null || designer === void 0 ? void 0 : designer.designcafeemail, reportingManager === null || reportingManager === void 0 ? void 0 : reportingManager.designcafeemail);
        const designerName = "$Designername";
        const user = await getName(designer, customer);
        if (templateResponse.notificationTemplateForKickOff) {
            const data = (_b = (_a = templateResponse.notificationTemplateForKickOff) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.reminders.data[0].attributes;
            if (data.emailActivate) {
                const parameterArrayForKickoff = [
                    designerName,
                    "$Designer Email",
                    "$DesignerPhone",
                    "$Designercity",
                    "$Designer.experiencecenter",
                    "$DesignerTeam",
                    "$Customername",
                    "$Project",
                    "$customerPhone",
                    "$customerEmail",
                    "$ProjectName",
                    "$ProjectType",
                    "$TotalProjectValue",
                    "$TentativeProjectDuration",
                    "$CustomershippingAddress",
                    "$ProjectScope",
                    "$Yes/No",
                    "$Yes/No",
                    "$Yes/No",
                    "$Yes/No",
                    "$Yes/No",
                    "$KickoffDate",
                    "KickoffTime",
                    "$ModulardrawingURL",
                    "$SiteserviceDrawingURL",
                    "$DesignPresentationURL",
                    "true/False",
                ];
                const inputArrayForKickoff = [
                    designer ? user.designername : "",
                    designer === null || designer === void 0 ? void 0 : designer.designcafeemail,
                    designer === null || designer === void 0 ? void 0 : designer.phonenumber,
                    fetchedDesigner[0].cities[0].name,
                    fetchedDesigner[0].experiencecenters[0].name,
                    fetchedDesigner[0].teams[0].name,
                    customer ? user.customername : "",
                    fetchedProject === null || fetchedProject === void 0 ? void 0 : fetchedProject.projectid,
                    customer === null || customer === void 0 ? void 0 : customer.customerphone,
                    customer === null || customer === void 0 ? void 0 : customer.customeremail,
                    fetchedProject.projectname ? fetchedProject.projectname : "",
                    fetchedProject.projecttype ? fetchedProject.projecttype : "",
                    fetchedProject.totalprojectvalue
                        ? fetchedProject.totalprojectvalue
                        : "",
                    formFillData.tentativeProjectDurationAfterSignOff
                        ? formFillData.tentativeProjectDurationAfterSignOff
                        : "",
                    formFillData.siteAddress ? formFillData.siteAddress : "",
                    formFillData.scopeOfWork ? formFillData.scopeOfWork : "",
                    formFillData.hasLift ? "Yes" : "No",
                    formFillData.scopeForElectricalWork ? "Yes" : "No",
                    formFillData.hasFalseCeiling ? "Yes" : "No",
                    formFillData.specialFinishes ? formFillData.specialFinishes : "",
                    "",
                    formFillData.dateTimeOfVisit
                        ? formFillData.dateTimeOfVisit.toLocaleDateString("en-US")
                        : "",
                    formFillData.dateTimeOfVisit
                        ? formFillData.dateTimeOfVisit.toLocaleTimeString("en-US")
                        : "",
                    modularDrawingsURL ? modularDrawingsURL : "",
                    siteDrawingsURL ? siteDrawingsURL : "",
                    designPresentationURL ? designPresentationURL : "",
                    formFillData.isProjectIMOS ? "Yes" : "No",
                ];
                const subject = data.emailSubject.replace("$Project Name", fetchedProject.projectname);
                const content = data.email_template;
                const emailContent = await replacetext(parameterArrayForKickoff, inputArrayForKickoff, content);
                response = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__.triggerEmailNotification)(to, subject, emailContent, cc);
            }
        }
        if (templateResponse.notificationTemplateForProductionRequest) {
            const data = (_d = (_c = templateResponse.notificationTemplateForProductionRequest) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.reminders.data[0].attributes;
            if (data.emailActivate) {
                const imos = getImosOrderNumber(formFillData);
                let finalImosData;
                if (imos) {
                    const str = [];
                    imos.forEach((imosdata) => {
                        str.push(imosdata.imosOrdeNo, imosdata.roomUrl.concat("\n"));
                    });
                    const newStr = str.join(",");
                    finalImosData = newStr.replace(/,/g, " ");
                }
                const parameterArrayForProductionRequest = [
                    designerName,
                    "$ProjectName",
                    "$Designer Email",
                    "$DesignerPhone",
                    "$Designercity",
                    "$Designer.experiencecenter",
                    "$DesignerTeam",
                    "$Customername",
                    "$Clientid",
                    "$customerPhone",
                    "$PMName",
                    "$FloorArea",
                    "$CommitedhandoverDate",
                    "$ProjectValuebeforediscount",
                    "$ProjectValue",
                    "$Specialfinish",
                    "$ProjectShippingAddress",
                    "$IMOSordernumber[Hyper Link of screenshot for that order number]",
                    "$SignoffPPTURL",
                    "$ModularQuotationURL",
                    "$siteserviceQuotationURL",
                ];
                const inputArrayForProductionRequest = [
                    designer ? user.designername : "",
                    fetchedProject.projectname,
                    designer === null || designer === void 0 ? void 0 : designer.designcafeemail,
                    designer === null || designer === void 0 ? void 0 : designer.phonenumber,
                    fetchedDesigner[0].cities[0].name,
                    fetchedDesigner[0].experiencecenters[0].name,
                    fetchedDesigner[0].teams[0].name,
                    customer ? user.customername : "",
                    fetchedProject === null || fetchedProject === void 0 ? void 0 : fetchedProject.projectid,
                    customer === null || customer === void 0 ? void 0 : customer.customerphone,
                    formFillData.pmName ? formFillData.pmName : "",
                    formFillData.floorArea ? formFillData.floorArea : "",
                    formFillData.projectHandOverDate
                        ? formFillData.projectHandOverDate
                        : "",
                    formFillData.valueBeforeDiscount
                        ? formFillData.valueBeforeDiscount
                        : "",
                    fetchedProject.totalprojectvalue
                        ? fetchedProject.totalprojectvalue
                        : "",
                    formFillData.specialFinishes ? formFillData.specialFinishes : "",
                    formFillData.siteAddress ? formFillData.siteAddress : "",
                    finalImosData ? finalImosData : "",
                    signOffPPTURL ? signOffPPTURL : "",
                    modularQuotationURL ? modularQuotationURL : "",
                    siteServicesQuotationURL ? siteServicesQuotationURL : "",
                ];
                const subject = data.emailSubject
                    .replace("$Projectname", fetchedProject.projectname)
                    .replace("$cityname", fetchedDesigner[0].cities[0].name);
                const content = data.email_template;
                const emailContent = await replacetext(parameterArrayForProductionRequest, inputArrayForProductionRequest, content);
                response = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__.triggerEmailNotification)(to, subject, emailContent, cc);
            }
        }
        if (templateResponse.notificationTemplateForQCCheckRequest) {
            const data = (_f = (_e = templateResponse.notificationTemplateForQCCheckRequest) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.reminders.data[0].attributes;
            if (data.emailActivate) {
                const parameterArrayForQCCheck = [
                    designerName,
                    "$modulardrawingsURL",
                    "$siteservicedrawingsURL",
                    "$modularquotationURL",
                    "$siteservicequotationURL",
                    "$project.name",
                ];
                const inputArrayForQCCheck = [
                    designer ? user.designername : "",
                    modularDrawingsURL ? modularDrawingsURL : "",
                    siteDrawingsURL ? siteDrawingsURL : "",
                    modularQuotationURL ? modularQuotationURL : "",
                    siteServicesQuotationURL ? siteServicesQuotationURL : "",
                    fetchedProject.projectname,
                ];
                const subject = data.emailSubject.replace("$Projectname", fetchedProject.projectname);
                const content = data.email_template;
                const emailContent = await replacetext(parameterArrayForQCCheck, inputArrayForQCCheck, content);
                const toQCTeam = "gfcchecking@designcafe.com";
                const ccList = ["ddadmin@designcafe.com"];
                ccList.push(designer === null || designer === void 0 ? void 0 : designer.designcafeemail);
                response = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__.triggerEmailNotification)(toQCTeam, subject, emailContent, ccList);
            }
        }
        return response;
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};
const completMilestoneForProductionRequestOrKickoff = async (projectid, formFillData) => {
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
        where: {
            id: projectid,
        },
        data: formFillData,
    });
};
const replacetext = (parameterArrayForKickoff, inputArrayForKickoff, content) => {
    for (let i = 0; i < parameterArrayForKickoff.length; i++) {
        content = content.replace(parameterArrayForKickoff[i], inputArrayForKickoff[i]);
    }
    return content;
};
const fetchPlanningCoordinatorBasedOnCity = async (cityid) => {
    var _a;
    const to = [];
    if (cityid) {
        const city = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findUnique({ where: { id: cityid } });
        if (city) {
            to.push((_a = city.planningcoordinatoremail) === null || _a === void 0 ? void 0 : _a.split(","));
        }
    }
    return to;
};
const getNotificationTemaplate = async (formFillName) => {
    let slugname;
    let notificationTemplateForKickOff, notificationTemplateForProductionRequest, notificationTemplateForQCCheckRequest;
    const graphqlCMSUrl = "https://cms.designcafe.com/graphqlm";
    if (formFillName === "Request Site Validation") {
        slugname = "notify_kickoff_request";
        notificationTemplateForKickOff = await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.callExternalAPIWithPost)(graphqlCMSUrl, (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.queryForFetchingRemindersTemplate)(slugname));
    }
    else if (formFillName === "Send Project to Production") {
        slugname = "notify_production_requested";
        notificationTemplateForProductionRequest = await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.callExternalAPIWithPost)(graphqlCMSUrl, (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.queryForFetchingRemindersTemplate)(slugname));
    }
    else if (formFillName === "Request QC Check") {
        slugname = "notify_gfc_requested";
        notificationTemplateForQCCheckRequest = await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.callExternalAPIWithPost)(graphqlCMSUrl, (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.queryForFetchingRemindersTemplate)(slugname));
    }
    return {
        notificationTemplateForKickOff,
        notificationTemplateForProductionRequest,
        notificationTemplateForQCCheckRequest,
    };
};
const getName = async (designer, customer) => {
    var _a;
    const designerMiddlename = designer.middlename
        ? designer.middlename.trim()
        : "";
    const designerLastName = designer.lastname ? designer.lastname.trim() : "";
    const designername = `${(_a = designer.firstname) === null || _a === void 0 ? void 0 : _a.trim()}${designerMiddlename ? " " + designerMiddlename + " " : " "}${designerLastName}`;
    const firstname = customer.firstname ? customer.firstname.trim() : "";
    const lastName = customer.lastname ? customer.lastname.trim() : "";
    const customername = `${firstname}${lastName}`;
    return { designername, customername };
};
const getImosOrderNumber = (formFillData) => {
    let imosrooms;
    if (formFillData.imosRooms && formFillData.imosRooms.length > 0) {
        imosrooms = [...formFillData.imosRooms];
    }
    return imosrooms;
};


/***/ }),

/***/ "./src/api/projects/Mutations/UpdatePaymentMilestones.ts":
/*!***************************************************************!*\
  !*** ./src/api/projects/Mutations/UpdatePaymentMilestones.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updatePaymentMilestones": () => (/* binding */ updatePaymentMilestones)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");


const updatePaymentMilestones = async (_root, args, _context) => {
    const { projectId, paymentMilestoneName, projectValue } = args;
    const responseObj = { code: 200, message: "" };
    let selectedMilestone;
    try {
        const getProjectWithProjectId = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: {
                id: projectId,
            },
        });
        getProjectWithProjectId.milestones.attributes.milestone_details.forEach((milestone) => {
            milestone.milestone_checklist.forEach((milestoneChecklist) => {
                if (milestoneChecklist.checklist_string === paymentMilestoneName) {
                    milestoneChecklist.is_checked = true;
                    selectedMilestone = milestone;
                }
            });
        });
        if (paymentMilestoneName === "5% Modular Payment") {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                where: {
                    id: projectId,
                },
                data: {
                    milestones: getProjectWithProjectId.milestones,
                },
            });
        }
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            where: {
                id: projectId,
            },
            data: {
                milestones: getProjectWithProjectId.milestones,
                projectvalue: projectValue,
            },
        });
        await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.checkAndMarkMilestonesOnSmartsheet)(projectId, selectedMilestone);
        responseObj.code = 200;
        responseObj.message = "Success";
    }
    catch (e) {
        responseObj.code = 200;
        responseObj.message = e.message;
    }
    return responseObj;
};


/***/ }),

/***/ "./src/api/projects/Mutations/UpdateProject.ts":
/*!*****************************************************!*\
  !*** ./src/api/projects/Mutations/UpdateProject.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateProjectApi": () => (/* binding */ updateProjectApi)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Smartsheet_Mutations_UpdateProjectStatus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Smartsheet/Mutations/UpdateProjectStatus */ "./src/api/projects/Smartsheet/Mutations/UpdateProjectStatus.ts");
/* harmony import */ var _Smartsheet_Mutations_UpdateProjectValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Smartsheet/Mutations/UpdateProjectValue */ "./src/api/projects/Smartsheet/Mutations/UpdateProjectValue.ts");
/* harmony import */ var _Smartsheet_Mutations_UpdateDesigner__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Smartsheet/Mutations/UpdateDesigner */ "./src/api/projects/Smartsheet/Mutations/UpdateDesigner.ts");
/* harmony import */ var _Smartsheet_Mutations_UpdateSurvey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Smartsheet/Mutations/UpdateSurvey */ "./src/api/projects/Smartsheet/Mutations/UpdateSurvey.ts");
/* harmony import */ var _Smartsheet_Mutations_UpdateProjectAddress__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Smartsheet/Mutations/UpdateProjectAddress */ "./src/api/projects/Smartsheet/Mutations/UpdateProjectAddress.ts");







const updateProjectApi = async (root, args, context) => {
    let projectsResponseObj;
    const { id, projectid, projectname, projectstatus, projectvalue, signupdate, customerid, designerid, salesmanagerid, chmid, surveyexecutiveid, projectmanagerid, designstudioid, modularbaseamount, projectmodularvalue, modulardiscount, siteservicebaseamount, projectsiteservicesvalue, siteservicediscount, signupamount, signupstate, experiencecenterid, cityid, projectaddressid, cmmname, expectedhandoverdate, currentmilestone, projectphase, hasdesigneraccepted, hasdesigerresponded, hometype, initialsignupvalue, decorvalue, quoteid, projectrating, includepmfee, milestonetype, odooid, odoo_delivery_address_id, isnewpaymentproject, opportunityid, template, } = args;
    const sDate = dayjs__WEBPACK_IMPORTED_MODULE_1___default()(signupdate).format("YYYY-MM-DD");
    try {
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            data: {
                projectid,
                projectname,
                projectstatus,
                projectvalue,
                updatedate: new Date(),
                signupdate: new Date(sDate),
                customerid,
                designerid,
                salesmanagerid,
                chmid,
                surveyexecutiveid,
                projectmanagerid,
                designstudioid,
                modularbaseamount,
                projectmodularvalue,
                modulardiscount,
                siteservicebaseamount,
                projectsiteservicesvalue,
                siteservicediscount,
                signupamount,
                signupstate,
                experiencecenterid,
                cityid,
                projectaddressid,
                cmmname,
                expectedhandoverdate,
                currentmilestone,
                projectphase,
                hasdesigneraccepted,
                hasdesigerresponded,
                hometype,
                initialsignupvalue,
                decorvalue,
                quoteid,
                projectrating,
                includepmfee,
                milestonetype,
                odooid,
                odoo_delivery_address_id,
                isnewpaymentproject,
                opportunityid,
                template,
            },
            where: { id: id },
        });
        await updateProjectStatusOnSmartSheet(project.smartsheetid, projectstatus, signupdate);
        await updateProjectValueOnSmartSheet(project.smartsheetid, projectvalue);
        await updateDesignerOnSmartSheet(project.smartsheetid, designerid);
        await updateSurveyOnSmartSheet(project.smartsheetid, surveyexecutiveid);
        await updateAddressOnSmartSheet(project.smartsheetid, customerid);
        projectsResponseObj = { code: 200, message: "success", data: project };
        return projectsResponseObj;
    }
    catch (error) {
        projectsResponseObj = { code: 400, message: error.message };
        return projectsResponseObj;
    }
};
const updateAddressOnSmartSheet = async (smartsheetid, customerid) => {
    if (customerid) {
        const address = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_addresses.findFirst({
            where: { customerid: customerid, addresstype: 1 },
        });
        if (address) {
            const addressValue = `${address.street}, ${address.city}, ${address.state}, ${address.zip}, ${address.country}`;
            const updateAddressPayload = {
                smartSheetId: smartsheetid,
                projectAddress: addressValue,
            };
            await (0,_Smartsheet_Mutations_UpdateProjectAddress__WEBPACK_IMPORTED_MODULE_6__.updateProjectAddress)(null, updateAddressPayload, null);
        }
    }
};
const updateSurveyOnSmartSheet = async (smartsheetid, surveyexecutiveid) => {
    if (surveyexecutiveid) {
        const survey = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({
            where: { userid: surveyexecutiveid },
        });
        if (survey) {
            const updateSurveyPayload = {
                smartSheetId: smartsheetid,
                surveyExecutiveEmail: survey.designcafeemail,
            };
            await (0,_Smartsheet_Mutations_UpdateSurvey__WEBPACK_IMPORTED_MODULE_5__.updateSurvey)(null, updateSurveyPayload, null);
        }
    }
};
const updateDesignerOnSmartSheet = async (smartsheetid, designerid) => {
    if (designerid) {
        const designer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({
            where: { userid: designerid },
        });
        if (designer) {
            const updateDesignerPayload = {
                smartSheetId: smartsheetid,
                designerEmail: designer.designcafeemail,
            };
            await (0,_Smartsheet_Mutations_UpdateDesigner__WEBPACK_IMPORTED_MODULE_4__.updateDesignerEmail)(null, updateDesignerPayload, null);
        }
    }
};
const updateProjectValueOnSmartSheet = async (smartsheetid, projectvalue) => {
    if (projectvalue) {
        const projectValuePayload = {
            smartSheetId: smartsheetid,
            projectValue: projectvalue,
        };
        await (0,_Smartsheet_Mutations_UpdateProjectValue__WEBPACK_IMPORTED_MODULE_3__.updateProjectValue)(null, projectValuePayload, null);
    }
};
const updateProjectStatusOnSmartSheet = async (smartsheetid, projectstatus, signupdate) => {
    if (projectstatus) {
        const projectStatusPayload = {
            smartSheetId: smartsheetid,
            projectStatus: projectstatus,
            signupDate: signupdate,
        };
        await (0,_Smartsheet_Mutations_UpdateProjectStatus__WEBPACK_IMPORTED_MODULE_2__.updateProjectStatus)(null, projectStatusPayload, null);
    }
};


/***/ }),

/***/ "./src/api/projects/Mutations/meetingSchedulerMilestone.ts":
/*!*****************************************************************!*\
  !*** ./src/api/projects/Mutations/meetingSchedulerMilestone.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "meetingSchedulerMilestone": () => (/* binding */ meetingSchedulerMilestone)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");



var ScheduleMeetingsEnum;
(function (ScheduleMeetingsEnum) {
    ScheduleMeetingsEnum["SCHEDULE_SURVEY_MEETING"] = "Schedule Site Survey";
    ScheduleMeetingsEnum["SCHEDULE_KYC_MEETING"] = "Schedule KYC Meeting";
    ScheduleMeetingsEnum["SCHEDULE_DESIGN_PRESENTATION_MEETING"] = "Schedule Design Presentation";
    ScheduleMeetingsEnum["SCHEDULE_REVISION_MEETING"] = "Schedule Design Revision";
    ScheduleMeetingsEnum["SCHEDULE_SIGNOFF_MEETING"] = "Schedule Signoff Meeting";
})(ScheduleMeetingsEnum || (ScheduleMeetingsEnum = {}));
const schedulerArray = [
    ScheduleMeetingsEnum.SCHEDULE_SURVEY_MEETING,
    ScheduleMeetingsEnum.SCHEDULE_REVISION_MEETING,
    ScheduleMeetingsEnum.SCHEDULE_KYC_MEETING,
    ScheduleMeetingsEnum.SCHEDULE_DESIGN_PRESENTATION_MEETING,
    ScheduleMeetingsEnum.SCHEDULE_SIGNOFF_MEETING
];
const meetingSchedulerMilestone = async (_root, _args, _context) => {
    var _a, _b;
    let selectedMilestone;
    try {
        if (!schedulerArray.includes(_args.meetingScheduleType)) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Scheduler type invalid.");
        }
        const projectData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: { id: _args.projectId },
        });
        if (!projectData) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Project not found");
        }
        if (!projectData.milestones || projectData.milestones.length === 0) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Milestone not found");
        }
        const milestoneData = (_b = (_a = projectData === null || projectData === void 0 ? void 0 : projectData.milestones) === null || _a === void 0 ? void 0 : _a.attributes) === null || _b === void 0 ? void 0 : _b.milestone_details;
        milestoneData.forEach((element) => {
            if (element.milestone_checklist &&
                element.milestone_checklist.length !== 0) {
                const milestoneChecklist = element === null || element === void 0 ? void 0 : element.milestone_checklist;
                milestoneChecklist.forEach((val) => {
                    if (val.length !== 0 &&
                        (val === null || val === void 0 ? void 0 : val.checklist_string) === _args.meetingScheduleType) {
                        selectedMilestone = element;
                        val.is_checked = true;
                        val.data = {
                            datetime: _args.datetime,
                            meetingType: _args.meetingType,
                        };
                        val.description = _args.description;
                    }
                });
            }
        });
        projectData.milestones.attributes.milestone_details = milestoneData;
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            where: { id: _args.projectId },
            data: { milestones: projectData.milestones },
        });
        if (selectedMilestone) {
            await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.checkAndMarkMilestonesOnSmartsheet)(_args.projectId, selectedMilestone);
        }
        return {
            code: 200,
            message: "Meeting scheduled successfully.",
        };
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(500, error.message);
    }
};


/***/ }),

/***/ "./src/api/projects/Queries/GetAllProject.ts":
/*!***************************************************!*\
  !*** ./src/api/projects/Queries/GetAllProject.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getProjects": () => (/* binding */ getProjects)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const getProjects = async () => {
    let projectsResponseObj;
    try {
        const projects = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findMany({
            include: {
                customer: true,
                designstudio: true,
                experiencecenter: true,
                city: true,
                designer: true,
                salesmanager: true,
                chm: true,
                surveyexecutive: true,
                projectmanager: true
            }
        });
        projectsResponseObj = { code: 200, message: "success", data: projects };
        return projectsResponseObj;
    }
    catch (error) {
        projectsResponseObj = { code: 400, message: error.message };
        return projectsResponseObj;
    }
};


/***/ }),

/***/ "./src/api/projects/Queries/GetFileUrl.ts":
/*!************************************************!*\
  !*** ./src/api/projects/Queries/GetFileUrl.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFileUrl": () => (/* binding */ getFileUrl)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");


const getFileUrl = async (root, args, context) => {
    let FileUrlResponseObj;
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        const { attachment } = args;
        const attachmentFile = {
            key: attachment.filename,
            contentType: attachment.Content_Type,
            base64: attachment.base64,
            userid: user.userid,
            ispreorpost: 1,
        };
        const toS3 = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_1__.UploadFileOnS3)(attachmentFile);
        attachment.base64 = toS3.location;
        FileUrlResponseObj = { code: 200, message: "success", data: toS3 };
        return FileUrlResponseObj;
    }
    catch (error) {
        FileUrlResponseObj = { code: 400, message: error.message };
        return FileUrlResponseObj;
    }
};


/***/ }),

/***/ "./src/api/projects/Queries/GetFilesForProject.ts":
/*!********************************************************!*\
  !*** ./src/api/projects/Queries/GetFilesForProject.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFilesForProjects": () => (/* binding */ getFilesForProjects)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");


const getFilesForProjects = async (_root, args, _context) => {
    const { id } = args;
    try {
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findUnique({
            where: {
                id: id
            }
        });
        if (!project) {
            _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
            _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = 'No Project found for given Id';
            return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
        }
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 200;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.data = project.milestones.attributes.files_checklist;
    }
    catch (e) {
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = e.message;
    }
    return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
};


/***/ }),

/***/ "./src/api/projects/Queries/GetOldProject.ts":
/*!***************************************************!*\
  !*** ./src/api/projects/Queries/GetOldProject.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getOldProject": () => (/* binding */ getOldProject)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const getOldProject = async (root, args, context) => {
    const getOldProjects = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
        where: { id: args.id, isnewpaymentproject: false },
    });
    const modularamount = getOldProjects.projectmodularvalue;
    const sitesserviceamount = getOldProjects.projectsiteservicesvalue;
    const modularcollectedamount = getOldProjects.modular_collected_amount;
    const siteservicescollectedamount = getOldProjects.site_services_collected_amount;
    const collectedamount = getOldProjects.achievedrevenuevalue;
    let oldprojectResponseObj = null;
    oldprojectResponseObj = {
        code: 200,
        message: "success",
        modularamount: modularamount,
        sitesserviceamount: sitesserviceamount,
        modular_collected_amount: modularcollectedamount,
        site_services_collected_amount: siteservicescollectedamount,
        collectedamount: collectedamount
    };
    return oldprojectResponseObj;
};


/***/ }),

/***/ "./src/api/projects/Queries/GetProjectById.ts":
/*!****************************************************!*\
  !*** ./src/api/projects/Queries/GetProjectById.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getProjectById": () => (/* binding */ getProjectById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _users_Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../users/Queries/GetAllUsers */ "./src/api/users/Queries/GetAllUsers.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");



const getProjectById = async (_root, args, _context) => {
    var _a;
    try {
        const getProjects = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: { id: args.id },
            include: {
                customer: {
                    include: {
                        addresses: {
                            include: { customers: true },
                        },
                    },
                },
                designstudio: true,
                experiencecenter: true,
                city: true,
                designer: {
                    include: {
                        users_experiencecenters: {
                            include: { center: true },
                        },
                        users_city: {
                            include: { city: true },
                        },
                        users_team: {
                            include: {
                                team: true,
                            },
                        },
                    },
                },
                salesmanager: true,
                chm: true,
                surveyexecutive: true,
            },
        });
        const updateProjectObj = {};
        console.log(38, getProjects);
        if (getProjects) {
            const designer = (0,_users_Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_1__.mapAllUsers)([getProjects === null || getProjects === void 0 ? void 0 : getProjects.designer]);
            if (designer) {
                getProjects.designer = designer[0];
            }
        }
        if (!getProjects.quotelink) {
            updateProjectObj["quotelink"] = getProjects.quotelink = getPdfLinks(getProjects.milestones, "modular");
        }
        if (getProjects.projectsiteservicesvalue &&
            !getProjects.siteservicepdflink) {
            updateProjectObj["siteservicepdflink"] = getProjects.siteservicepdflink =
                getPdfLinks(getProjects.milestones, "siteservice");
        }
        if (!getProjects.milestones) {
            const projectTemplates = await (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.callExternalAPIWithPost)("https://cms.designcafe.com/graphqlm", _utils_commonUtils__WEBPACK_IMPORTED_MODULE_2__.queryForFetchingTemplate);
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                where: {
                    id: args.id,
                },
                data: {
                    milestones: (_a = projectTemplates === null || projectTemplates === void 0 ? void 0 : projectTemplates.data) === null || _a === void 0 ? void 0 : _a.projectTemplates.data[0],
                    currentmilestone: "Site Survey",
                },
            });
            getProjects.currentmilestone = "Site Survey";
        }
        if (getProjects.isimosproject && !getProjects.quoteid) {
            const modularBeforeTax = (+getProjects.projectmodularvalue * 100) / 118;
            const reverseModularDisc = (100 - Math.abs(getProjects.modulardiscount)) / 100;
            const modularBaseAmount = modularBeforeTax / reverseModularDisc || modularBeforeTax;
            getProjects.modularbaseamount = parseFloat(modularBaseAmount.toFixed(2));
            if (getProjects.projectsiteservicesvalue) {
                const siteBeforeTax = (+getProjects.projectsiteservicesvalue * 100) / 118;
                const reverseSiteDisc = (100 - Math.abs(getProjects.siteservicediscount)) / 100;
                const siteBaseAmount = siteBeforeTax / reverseSiteDisc || siteBeforeTax;
                getProjects.siteservicebaseamount = parseFloat(siteBaseAmount.toFixed(2));
            }
            updateProjectObj["modularbaseamount"] = getProjects.modularbaseamount;
            updateProjectObj["siteservicebaseamount"] =
                getProjects.siteservicebaseamount;
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                where: {
                    id: args.id,
                },
                data: updateProjectObj,
            });
            let quote;
            const projModularValue = getProjects.projectmodularvalue;
            const projSiteValue = getProjects.projectsiteservicesvalue;
            const projModularDiscount = getProjects.modulardiscount;
            const projSiteDiscount = getProjects.siteservicediscount;
            const dbQuoteObj = Object.assign(Object.assign(Object.assign(Object.assign({ opportunityid: getProjects.opportunityid, customername: [
                    getProjects === null || getProjects === void 0 ? void 0 : getProjects.customer.firstname,
                    getProjects === null || getProjects === void 0 ? void 0 : getProjects.customer.lastname,
                ].join(" "), modulardiscount: projModularDiscount }, (projSiteDiscount && { siteservicediscount: projSiteDiscount })), { modularvalue: projModularValue }), (projSiteValue && { siteservice: projSiteValue })), { islatestquote: true, quotename: [
                    getProjects === null || getProjects === void 0 ? void 0 : getProjects.customer.firstname,
                    getProjects === null || getProjects === void 0 ? void 0 : getProjects.customer.lastname,
                ].join(" ") + " Quote 1", isimosproject: true });
            quote = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.create({ data: dbQuoteObj });
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
                where: {
                    id: args.id,
                },
                data: { quoteid: quote.id },
            });
            getProjects.quoteid = quote.id;
        }
        const designerAssignedToProject = getProjects.designer;
        getProjects.designer = designerAssignedToProject;
        delete getProjects.milestones;
        const surveyExecutives = await getSurveyExecutives(getProjects.experiencecenterid);
        const PAMProfiles = await getPAMProfiles(getProjects.designerid);
        return {
            code: 200,
            message: "Success",
            data: getProjects,
            surveyExecutives: surveyExecutives,
            pamProfiles: PAMProfiles,
        };
    }
    catch (error) {
        console.log(117, error);
        return { code: 400, message: error.message };
    }
};
const getSurveyExecutives = async (experiencecenterid) => {
    const fetchedSurveyExecutives = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findMany({
        where: {
            profileid: 15,
        },
        include: {
            users_experiencecenters: {
                include: { center: true },
            },
        },
    });
    const surveyExecutives = [];
    if (fetchedSurveyExecutives.length > 0) {
        await Promise.all(fetchedSurveyExecutives.map((surveyExecutive) => {
            surveyExecutive.users_experiencecenters.map((exc) => {
                if (exc.centerid === experiencecenterid) {
                    surveyExecutives.push(surveyExecutive);
                }
            });
        }));
    }
    return surveyExecutives;
};
const getPAMProfiles = async (designerid) => {
    const profile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findFirst({
        where: { profile_name: "CHM Executive" },
    });
    let fetchUser = [];
    const profiles = [];
    const fetchTeam = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.findFirst({
        where: { userid: designerid },
    });
    fetchUser = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.findMany({
        where: { teamid: fetchTeam.teamid },
        select: { userid: true },
    });
    var fetchedUser = fetchUser;
    let getUserProfile;
    for (var i = 0; i < fetchedUser.length; i++) {
        if (fetchedUser[i].userid !== null) {
            getUserProfile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
                where: { userid: fetchedUser[i].userid },
            });
            if (getUserProfile.profileid === profile.profileid) {
                profiles.push(getUserProfile);
            }
        }
    }
    return profiles;
};
const getPdfLinks = (milestone, type) => {
    const data = milestone.attributes.files_checklist;
    let link;
    if (type === "modular") {
        data.forEach((element) => {
            if (element.checklist_string === "Modular Quotation") {
                link = element.fileurl;
            }
        });
    }
    if (type === "siteservice") {
        data.forEach((element) => {
            if (element.checklist_string === "Site Services Quotation") {
                link = element.fileurl;
            }
        });
    }
    return link;
};


/***/ }),

/***/ "./src/api/projects/Queries/GetProjectCostBreakup.ts":
/*!***********************************************************!*\
  !*** ./src/api/projects/Queries/GetProjectCostBreakup.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getProjectCostBreakup": () => (/* binding */ getProjectCostBreakup)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const getProjectCostBreakup = async (root, args, context) => {
    let projectCostBreakupResponseObj;
    const getProjects = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
        where: { id: args.id },
    });
    const milestone = getProjects.milestones;
    const ProjectValue = getProjects.totalprojectvalue;
    const CollectedAmount = getProjects.achievedrevenuevalue;
    const modularCollectedAmount = getProjects.modular_collected_amount;
    const modularbaseamount = getProjects.modularbaseamount;
    const modulardiscount = getProjects.modulardiscount;
    const projectmodularvalue = getProjects.projectmodularvalue;
    const modularinclusivegst = getProjects.projectmodularvalue;
    const siteserviceinclusivegst = getProjects.projectsiteservicesvalue;
    const modularinvoicedamount = getProjects.modularinvoicedamount;
    const siteserviceinvoicedamount = getProjects.siteserviceinvoicedamount;
    const siteServicesCollectedAmount = getProjects.site_services_collected_amount;
    let projectsiteservicevalue = getProjects.projectsiteservicesvalue;
    const siteservicebaseamount = getProjects.siteservicebaseamount;
    const siteservicediscount = getProjects.siteservicediscount;
    const pendingamountvalue = getProjects.pendingamountvalue;
    const template = milestone.attributes.Template_Name;
    if (template === "Project Template 1") {
        const modularnamefor5Percentage = milestone.attributes.milestone_details[0].label;
        const modularAmountfor5Percentage = (modularinclusivegst * 5) / 100;
        const modularnamefor15Percentage = milestone.attributes.milestone_details[4].label;
        const modularAmountfor15Percentage = (modularinclusivegst * 20) / 100;
        const modularnamefor35Percentage = milestone.attributes.milestone_details[9].label;
        const modularAmountfor35Percentage = (modularinclusivegst * 55) / 100;
        const modularAmountfor45Percentage = modularinclusivegst;
        const modularpdf = milestone.attributes.files_checklist[3].fileurl;
        const modularnamefor45Percentage = milestone.attributes.milestone_details[12].label;
        const siteservicenamefor5Percentage = "Site Service for 5%";
        const siteserviceAmountfor5Percentage = (siteserviceinclusivegst * 5) / 100;
        const siteservicenamefor45Percentage = "Site Service for 45%";
        const siteserviceAmountfor45Percentage = (siteserviceinclusivegst * 50) / 100;
        const siteservicenamefor50Percentage = "Site Service for 50%";
        const siteserviceAmountfor50Percentage = siteserviceinclusivegst;
        const siteservicespdf = milestone.attributes.files_checklist[4].fileurl;
        const modularMilestone = {
            modularnamefor5_percentage: modularnamefor5Percentage,
            modularAmountfor5_percentage: modularAmountfor5Percentage,
            modularnamefor15_percentage: modularnamefor15Percentage,
            modularAmountfor15_percentage: modularAmountfor15Percentage,
            modularnamefor35_percentage: modularnamefor35Percentage,
            modularAmountfor35_percentage: modularAmountfor35Percentage,
            modularnamefor45Percentage: modularnamefor45Percentage,
            modularAmountfor45_percentage: modularAmountfor45Percentage,
        };
        const siteServiceMilestone = {
            siteservicenamefor5_percentage: siteservicenamefor5Percentage,
            siteserviceAmountfor5_percentage: siteserviceAmountfor5Percentage,
            siteservicenamefor45_percentage: siteservicenamefor45Percentage,
            siteserviceAmountfor45_percentage: siteserviceAmountfor45Percentage,
            siteservicenamefor50_percentage: siteservicenamefor50Percentage,
            siteserviceAmountfor50_percentage: siteserviceAmountfor50Percentage,
        };
        const Projectstatus = getProjects.projectstatus;
        projectCostBreakupResponseObj = {
            code: 200,
            message: "success",
            ProjectValue: ProjectValue,
            CollectedAmount: CollectedAmount,
            modularCollectedAmount: modularCollectedAmount,
            siteServicesCollectedAmount: siteServicesCollectedAmount,
            modularbaseamount: modularbaseamount,
            modulardiscount: modulardiscount,
            siteservicebaseamount: siteservicebaseamount,
            siteservicediscount: siteservicediscount,
            projectmodularvalue: projectmodularvalue,
            projectsiteservicevalue: projectsiteservicevalue,
            modularMilestone: modularMilestone,
            siteServiceMilestone: siteServiceMilestone,
            modularinclusivegst: modularinclusivegst,
            siteserviceinclusivegst: siteserviceinclusivegst,
            modularpdf: modularpdf,
            siteservicespdf: siteservicespdf,
            pendingamountvalue: pendingamountvalue,
            Projectstatus: Projectstatus,
            modularinvoicedamount: modularinvoicedamount,
            siteserviceinvoicedamount: siteserviceinvoicedamount
        };
    }
    return projectCostBreakupResponseObj;
};


/***/ }),

/***/ "./src/api/projects/Queries/GetProjectsByFilter.ts":
/*!*********************************************************!*\
  !*** ./src/api/projects/Queries/GetProjectsByFilter.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getProjectsByFilter": () => (/* binding */ getProjectsByFilter)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/enumerations/ProjectFilterEnum */ "./src/domain/enumerations/ProjectFilterEnum.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_3__);




const getProjectsByFilter = async (_root, args, _context) => {
    var _a, _b, _c, _d, _e;
    try {
        const { searchText, filter, sorting } = args;
        let user;
        try {
            user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(_context, "DD");
        }
        catch (error) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(401, error.message);
        }
        if (user) {
            let whereClause = {};
            let orderBy = {};
            switch ((_a = user === null || user === void 0 ? void 0 : user.profile) === null || _a === void 0 ? void 0 : _a.access_level) {
                case 0: {
                    whereClause = {
                        OR: [
                            { designerid: user.userid },
                            { chmid: user.userid },
                            { surveyexecutiveid: user.userid },
                        ],
                    };
                    break;
                }
                case 1: {
                    whereClause.OR = [];
                    (_b = user.users_team) === null || _b === void 0 ? void 0 : _b.forEach((team) => {
                        whereClause.OR.push({ designstudioid: team.teamid });
                    });
                    break;
                }
                case 2: {
                    whereClause.OR = [];
                    (_c = user.users_experiencecenters) === null || _c === void 0 ? void 0 : _c.forEach((experiencecenter) => {
                        whereClause.OR.push({
                            experiencecenterid: experiencecenter.centerid,
                        });
                    });
                    break;
                }
                case 3: {
                    whereClause.OR = [];
                    (_d = user.users_city) === null || _d === void 0 ? void 0 : _d.forEach((city) => {
                        whereClause.OR.push({ cityid: city.cityid });
                    });
                    break;
                }
                case 4: {
                    whereClause = {};
                    break;
                }
                default:
                    return {
                        code: 400,
                        message: "Profile not set for given user",
                    };
            }
            if (searchText && searchText !== "") {
                whereClause.AND = {
                    AND: {
                        OR: [
                            {
                                projectid: {
                                    contains: searchText ? searchText : "",
                                    mode: "insensitive",
                                },
                            },
                            {
                                projectname: {
                                    contains: searchText ? searchText : "",
                                    mode: "insensitive",
                                },
                            },
                        ],
                    },
                };
            }
            else if (filter && ((_e = filter === null || filter === void 0 ? void 0 : filter.filterBy) === null || _e === void 0 ? void 0 : _e.length) !== 0) {
                filterConditions(filter, whereClause);
            }
            else if (sorting) {
                switch (sorting.sortBy.toLowerCase()) {
                    case _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_NAME: {
                        orderBy = { projectname: sorting.order };
                        break;
                    }
                    case _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGNER: {
                        orderBy = { designerid: sorting.order };
                        break;
                    }
                    case _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].STUDIO: {
                        orderBy = { designstudioid: sorting.order };
                        break;
                    }
                    case _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CITY: {
                        orderBy = { cityid: sorting.order };
                        break;
                    }
                    case _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].EC: {
                        orderBy = { experiencecenterid: sorting.order };
                        break;
                    }
                    case _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SIGNUP_DATE: {
                        orderBy = { signupdate: sorting.order };
                        break;
                    }
                    default:
                        break;
                }
            }
            const getProjects = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findMany({
                where: whereClause,
                orderBy: orderBy,
                include: {
                    customer: true,
                    designstudio: true,
                    experiencecenter: true,
                    city: true,
                    designer: true,
                    salesmanager: true,
                    chm: true,
                    surveyexecutive: true,
                },
            });
            getProjects === null || getProjects === void 0 ? void 0 : getProjects.forEach((element) => {
                delete element.milestones;
            });
            return {
                code: 200,
                message: "success",
                data: getProjects,
            };
        }
        else {
            return {
                code: 400,
                message: "Please provide UserID",
            };
        }
    }
    catch (error) {
        return error;
    }
};
const filterConditions = (filter, whereClause) => {
    const orCondition = [];
    const { designers, filterBy, studios, cities, ecs, status, currentStage } = filter;
    filterBy === null || filterBy === void 0 ? void 0 : filterBy.forEach((filterElement) => {
        if (filterElement.toLowerCase() === _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGNER) {
            console.log(123, designers);
            designers.forEach((designer) => {
                orCondition.push({
                    designerid: designer,
                });
            });
            whereClause.AND = {
                AND: {
                    OR: orCondition,
                },
            };
        }
        if (filterElement.toLowerCase() === _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].STUDIO) {
            studios.forEach((studio) => {
                orCondition.push({
                    designstudioid: studio,
                });
            });
            whereClause.AND = {
                AND: {
                    OR: orCondition,
                },
            };
        }
        if (filterElement.toLowerCase() === _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CITY) {
            cities.forEach((city) => {
                orCondition.push({
                    cityid: city,
                });
            });
            whereClause.AND = {
                AND: {
                    OR: orCondition,
                },
            };
        }
        if (filterElement.toLowerCase() === _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].EC) {
            ecs.forEach((ec) => {
                orCondition.push({
                    experiencecenterid: ec,
                });
            });
            whereClause.AND = {
                AND: {
                    OR: orCondition,
                },
            };
        }
        if (filterElement.toLowerCase() === _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SIGNUP_DATE) {
            if (!filter.toDate || !filter.fromDate) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(400, "Please provide proper to and from dates.");
            }
            orCondition.push({
                signupdate: {
                    gte: filter.fromDate,
                    lte: filter.toDate,
                },
            });
            whereClause.AND = {
                AND: {
                    OR: orCondition,
                },
            };
        }
        if (filterElement.toLowerCase() === _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].STATUS) {
            status.forEach((element) => {
                orCondition.push({
                    projectstatus: element,
                });
            });
            whereClause.AND = {
                AND: {
                    OR: orCondition,
                },
            };
        }
        if (filterElement.toLowerCase() === _domain_enumerations_ProjectFilterEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CURRENT_STAGE) {
            currentStage.forEach((stage) => {
                orCondition.push({
                    currentmilestone: stage,
                });
            });
            whereClause.AND = {
                AND: {
                    OR: orCondition,
                },
            };
        }
    });
};


/***/ }),

/***/ "./src/api/projects/Queries/GetSubTaskForProject.ts":
/*!**********************************************************!*\
  !*** ./src/api/projects/Queries/GetSubTaskForProject.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSubTaskForProject": () => (/* binding */ getSubTaskForProject)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");


const getSubTaskForProject = async (_parent, args, _context) => {
    const { projectid } = args;
    const milestonesArr = [];
    try {
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findUnique({
            where: {
                id: projectid
            }
        });
        if (!project) {
            _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
            _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = 'Project not found for the given id';
            _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.data = null;
            return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
        }
        project.milestones.attributes.milestone_details.forEach(mileStones => {
            milestonesArr.push(mileStones);
        });
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 200;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = null;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.data = milestonesArr;
    }
    catch (e) {
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = e.message;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.data = null;
    }
    return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Mutations/CreateSmartsheet.ts":
/*!*******************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Mutations/CreateSmartsheet.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSmartSheet": () => (/* binding */ createSmartSheet)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");




const createSmartSheet = async (root, args, context) => {
    let CreateSheetResponse;
    try {
        const validationResponse = await validateCreateSheetData(args);
        if (validationResponse) {
            return validationResponse;
        }
        const sheetName = `${args.clientName}_${args.clientId}`;
        const smartClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const sheetId = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.createSheet)(smartClient, sheetName);
        const sheetData = await smartClient.sheets.getSheet({ id: sheetId });
        const rowArray = await getUpdateSheetData(sheetData, args);
        await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.updateSheet)(smartClient, rowArray, sheetId);
        const handoverDate = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getHandoverDate)(sheetData);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_3__.prisma.dc_projects.update({
            data: {
                expectedhandoverdate: handoverDate,
                smartsheetid: sheetId.toString(),
            },
            where: { id: args.projectId },
        });
        await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.createWebHook)(sheetId, sheetName);
        CreateSheetResponse = { code: 200, message: "success", sheetId: sheetId };
        return CreateSheetResponse;
    }
    catch (error) {
        CreateSheetResponse = { code: 400, message: error.message };
        return CreateSheetResponse;
    }
};
const validateCreateSheetData = async (args) => {
    var CreateResponse;
    if (!args.clientName) {
        CreateResponse = { code: 400, message: "Please Enter Valid ClientName" };
    }
    if (!args.clientId) {
        CreateResponse = { code: 400, message: "Please Enter Valid ClientId" };
    }
    if (!args.designerName) {
        CreateResponse = { code: 400, message: "Please Enter Valid Designer Name" };
    }
    if (!args.designStudio) {
        CreateResponse = { code: 400, message: "Please Enter Valid Design Studio" };
    }
    if (args.clientEmail) {
        const emailReg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
        if (!emailReg.test(args.clientEmail)) {
            CreateResponse = {
                code: 400,
                message: "Please Enter Valid Client Email",
            };
        }
    }
    if (!args.clientContact) {
        CreateResponse = {
            code: 400,
            message: "Please Enter Valid Client Contact",
        };
    }
    if (!args.propertyAddress) {
        CreateResponse = {
            code: 400,
            message: "Please Enter Valid Property Address",
        };
    }
    if (!args.status) {
        CreateResponse = { code: 400, message: "Please Enter Valid Status" };
    }
    return CreateResponse;
};
const getUpdateSheetData = async (sheetData, args) => {
    const { clientName, clientId, projectSignupValue, designerName, designStudio, salesOwner, clientEmail, clientContact, propertyName, propertyAddress, status, } = args;
    const rowArray = [];
    const columnIds = await getColumnId(sheetData);
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = cell.displayValue
                ? cell.displayValue.toLowerCase().trim()
                : null;
            if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CLIENT_NAME) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, clientName));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CLIENT_ID) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, clientId));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_SIGNUP_VALUE) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, projectSignupValue));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGNER_NAME) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, designerName));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_STUDIO) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, designStudio));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SALES_OWNER &&
                salesOwner) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, salesOwner));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CLIENT_EMAIL &&
                clientEmail) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, clientEmail));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CLIENT_CONTACT) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, clientContact));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROPERTY_NAME &&
                propertyName) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, propertyName));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROPERTY_ADDRESS) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, propertyAddress));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].STATUS) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, status));
            }
        }
    }
    return rowArray;
};
const getColumnId = async (sheetData) => {
    let summaryDetailsColumnId, actualStartId, actualFinishId, originalPlannedStartId;
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle &&
            columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].SUMMARY_DETAILS) {
            summaryDetailsColumnId = column.id;
        }
        else if (columnTitle &&
            columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_START) {
            actualStartId = column.id;
        }
        else if (columnTitle &&
            columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH) {
            actualFinishId = column.id;
        }
        else if (columnTitle &&
            columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ORIGINAL_PLANNED_START_DATE) {
            originalPlannedStartId = column.id;
        }
    });
    return {
        summaryDetailsColumnId: summaryDetailsColumnId,
        actualStartId: actualStartId,
        actualFinishId: actualFinishId,
        originalPlannedStartId: originalPlannedStartId,
    };
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Mutations/UpdateDesigner.ts":
/*!*****************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Mutations/UpdateDesigner.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateDesignerEmail": () => (/* binding */ updateDesignerEmail)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");



const updateDesignerEmail = async (root, args, context) => {
    let SheetResponse;
    try {
        const validationResponse = await validateDesignerUpdateData(args);
        if (validationResponse) {
            return validationResponse;
        }
        const { smartSheetId, designerEmail } = args;
        const smartClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const sheetData = await smartClient.sheets.getSheet({ id: smartSheetId });
        const rowArray = await getDesignerUpdateData(sheetData, designerEmail);
        await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.updateSheet)(smartClient, rowArray, smartSheetId);
        SheetResponse = { code: 200, message: "success" };
        return SheetResponse;
    }
    catch (error) {
        SheetResponse = { code: 400, message: error.message };
        return SheetResponse;
    }
};
const validateDesignerUpdateData = async (args) => {
    var designerResponse;
    const emailReg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
    if (!args.smartSheetId) {
        designerResponse = {
            code: 400,
            message: "Please Enter Valid Smartsheet Id",
        };
    }
    if (!emailReg.test(args.designerEmail)) {
        designerResponse = { code: 400, message: "Please Enter Valid Email" };
    }
    return designerResponse;
};
const getDesignerUpdateData = async (sheetData, designerEmail) => {
    const rowArray = [];
    const assignedToColumnId = await getAssignedColumnId(sheetData);
    const taskNameColumnId = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getTaskNameColumnId)(sheetData);
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = cell.displayValue
                ? cell.displayValue.toLowerCase().trim()
                : null;
            if (cell.columnId === taskNameColumnId) {
                if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_STAGE) {
                    const designStage = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, assignedToColumnId, designerEmail);
                    rowArray.push(designStage);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].KNOW_YOUR_CLIENT) {
                    const knowyourClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, assignedToColumnId, designerEmail);
                    rowArray.push(knowyourClient);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].FIRST_CUT_MEETING) {
                    const firstCutMeeting = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, assignedToColumnId, designerEmail);
                    rowArray.push(firstCutMeeting);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_FINALIZATION) {
                    const designFinalization = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, assignedToColumnId, designerEmail);
                    rowArray.push(designFinalization);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].REQUEST_PM_FOR_KICKOFF) {
                    const requestPMKickOff = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, assignedToColumnId, designerEmail);
                    rowArray.push(requestPMKickOff);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DWG_REVISIONS) {
                    const dwgRevisions = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, assignedToColumnId, designerEmail);
                    rowArray.push(dwgRevisions);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_SIGN_OFF) {
                    const designSignOff = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, assignedToColumnId, designerEmail);
                    rowArray.push(designSignOff);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_RECEIVED_FOR_PLANNING) {
                    const projectReceivedPlanning = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, assignedToColumnId, designerEmail);
                    rowArray.push(projectReceivedPlanning);
                }
            }
        }
    }
    return rowArray;
};
const getAssignedColumnId = async (sheetData) => {
    let assignedToColumnId;
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ASSIGN_TO) {
            assignedToColumnId = column.id;
        }
    });
    return assignedToColumnId;
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Mutations/UpdateMilestone.ts":
/*!******************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Mutations/UpdateMilestone.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateMilestone": () => (/* binding */ updateMilestone)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");
/* harmony import */ var _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/enumerations/ProjectMileStoneEnum */ "./src/domain/enumerations/ProjectMileStoneEnum.ts");
/* harmony import */ var _utils_ProjectMileStoneUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../utils/ProjectMileStoneUtil */ "./src/utils/ProjectMileStoneUtil.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");






const updateMilestone = async (root, args, context) => {
    let sheetResponse;
    try {
        const validationResponse = await validateMilestoneUpdateData(args);
        if (validationResponse) {
            return validationResponse;
        }
        const smartClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const sheetData = await smartClient.sheets.getSheet({ id: args.smartSheetId });
        args.actualStartDate = await getPreviousMileStoneFinishDate(sheetData, args);
        const rowArray = await getMileStoneUpdateData(sheetData, args);
        await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.updateSheet)(smartClient, rowArray, args.smartSheetId);
        await updateCurrentMileStone(sheetData, args);
        sheetResponse = { code: 200, message: "success" };
        return sheetResponse;
    }
    catch (error) {
        sheetResponse = { code: 400, message: error.message };
        return sheetResponse;
    }
};
const validateMilestoneUpdateData = async (args) => {
    var milestoneResponse;
    if (!args.smartSheetId) {
        milestoneResponse = { code: 400, message: "Please Enter Valid Smartsheet Id" };
    }
    if (!args.mileStoneName) {
        milestoneResponse = { code: 400, message: "Please Enter Valid mileStoneName" };
    }
    if (!args.actualFinishDate) {
        milestoneResponse = { code: 400, message: "Please Enter Valid actualFinishDate" };
    }
    return milestoneResponse;
};
const updateCurrentMileStone = async (sheetData, args) => {
    let projectDelay;
    const project = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getProjectBySheetId)(args.smartSheetId);
    const currentMileStone = await getCurrentMileStone(args, project.milestones);
    const currentSmartsheetMileStone = _utils_ProjectMileStoneUtil__WEBPACK_IMPORTED_MODULE_4__["default"].getSheetMileStoneName(currentMileStone.toLowerCase().trim());
    const columnIds = await getColumnJson(sheetData);
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = cell.displayValue ? cell.displayValue.toLowerCase().trim() : null;
            if (cellValue === currentSmartsheetMileStone) {
                projectDelay = await getProjectDelay(row, columnIds);
            }
        }
    }
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_5__.prisma.dc_projects.update({
        data: { currentmilestone: currentMileStone, projectdelay: projectDelay },
        where: { id: project.id }
    });
};
const getCurrentMileStone = async (args, milestones) => {
    var i, currentMileStone;
    const mileStoneName = args.mileStoneName.toLowerCase().trim();
    milestones = milestones.attributes.milestone_details;
    for (i = 0; i < milestones.length; i++) {
        if (milestones[i].label.toLowerCase().trim() === mileStoneName) {
            currentMileStone = milestones[i + 1].label.trim();
        }
    }
    return currentMileStone;
};
const getColumnJson = async (sheetData) => {
    let originalEndDateColumnId, forecastedEndDateColumnId;
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        switch (columnTitle) {
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ORIGINAL_PLANNED_FINISH_DATE: {
                originalEndDateColumnId = column.id;
                break;
            }
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].CURRENT_FORECAST_FINISH: {
                forecastedEndDateColumnId = column.id;
                break;
            }
        }
    });
    return { "originalEndDateColumnId": originalEndDateColumnId, "forecastedEndDateColumnId": forecastedEndDateColumnId };
};
const getProjectDelay = async (row, columnIds) => {
    let originalEndDate, forecastedEndDate;
    let delayStatus = "onTime";
    row.cells.forEach((cell) => {
        switch (cell.columnId) {
            case columnIds.originalEndDateColumnId: {
                originalEndDate = cell.value;
                break;
            }
            case columnIds.forecastedEndDateColumnId: {
                forecastedEndDate = cell.value;
                break;
            }
        }
    });
    const delayDays = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getDelayDays)(new Date(forecastedEndDate), new Date(originalEndDate));
    if (delayDays > 0) {
        delayStatus = "delayed";
    }
    return delayStatus;
};
const getPreviousMileStoneFinishDate = async (sheetData, args) => {
    let actualFinishDate;
    const project = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getProjectBySheetId)(args.smartSheetId);
    const previousMileStone = await getPreviousMileStone(args, project.milestones);
    const smartsheetPreviousMileStone = _utils_ProjectMileStoneUtil__WEBPACK_IMPORTED_MODULE_4__["default"].getSheetMileStoneName(previousMileStone.toLowerCase().trim());
    const actualFinishDateColumnId = await getActualFinishDateColumnId(sheetData);
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = cell.displayValue ? cell.displayValue.toLowerCase().trim() : null;
            if (cellValue === smartsheetPreviousMileStone) {
                actualFinishDate = await getActualFinishDate(row, actualFinishDateColumnId);
            }
        }
    }
    return actualFinishDate;
};
const getPreviousMileStone = async (args, milestones) => {
    var i, previousMileStone;
    const mileStoneName = args.mileStoneName.toLowerCase().trim();
    milestones = milestones.attributes.milestone_details;
    for (i = 0; i < milestones.length; i++) {
        if (milestones[i].label.toLowerCase().trim() === mileStoneName) {
            previousMileStone = milestones[i - 1].label.trim();
        }
    }
    return previousMileStone;
};
const getActualFinishDateColumnId = async (sheetData) => {
    let actualFinishDateColumnId;
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH) {
            actualFinishDateColumnId = column.id;
        }
    });
    return actualFinishDateColumnId;
};
const getActualFinishDate = async (row, actualFinishDateColumnId) => {
    let actualFinishDate;
    row.cells.forEach((cell) => {
        if (cell.columnId === actualFinishDateColumnId) {
            actualFinishDate = cell.value;
        }
    });
    return actualFinishDate;
};
const getMileStoneUpdateData = async (sheetData, args) => {
    const mileStone = args.mileStoneName.toLowerCase().trim();
    const rowArray = [];
    const taskNameColumnId = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getTaskNameColumnId)(sheetData);
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = cell.displayValue ? cell.displayValue.toLowerCase().trim() : null;
            if (cellValue && cell.columnId === taskNameColumnId) {
                if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_SIGNUP && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PROJECT_SIGNUP) {
                    const projectSignup = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(projectSignup);
                }
                else if ((cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SITE_SURVEY ||
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SITE_SURVEY_COMPLETE) && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_SURVEY) {
                    const siteSurvey = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(siteSurvey);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].KNOW_YOUR_CLIENT && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].KNOW_YOUR_CLIENT) {
                    const kyc = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(kyc);
                }
                else if ((cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].FIRST_CUT_MEETING ||
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_PRESENTATION) && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_PRESENTATION) {
                    const designPresentation = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(designPresentation);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_FINALIZATION && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_FINALIZATION) {
                    const designFinalization = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(designFinalization);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].REQUEST_PM_FOR_KICKOFF && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_REQUEST) {
                    const siteValidation = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(siteValidation);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].KICKOFF_MEETING_AT_SITE && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_MEETING) {
                    const siteValidationMeeting = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(siteValidationMeeting);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DWG_REVISIONS && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].POST_SITE_VALIDATION_REVISION) {
                    const postSiteValidation = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(postSiteValidation);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].GFC_CHECKING && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].GFC_CHECKING) {
                    const gfcCheking = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(gfcCheking);
                }
                else if ((cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_SIGN_OFF ||
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_SIGN_OFF_PRESENTATION) && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_SIGNOFF) {
                    const designSignOff = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(designSignOff);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_RECEIVED_FOR_PLANNING && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION_REQUEST) {
                    const productionRequest = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(productionRequest);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].THIRTYFIVE_PAYMENT_CONFIRMATION && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].THIRTYFIVE_PAYMENT) {
                    const thirtyfivePayment = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(thirtyfivePayment);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PRODUCTION && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION) {
                    const production = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(production);
                }
                else if ((cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].READY_FOR_DISPATCH ||
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PENDING_HARDWARE_QC) && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_DISPATCH) {
                    const readyDispatch = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(readyDispatch);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].READY_FOR_HANDOVER && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_HANDOVER) {
                    const readyHandover = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(readyHandover);
                }
                else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].HANDOVER && mileStone === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].HANDOVER) {
                    const handover = await gemileStoneCellData(sheetData, args, row.id);
                    rowArray.push(handover);
                }
            }
        }
    }
    return rowArray;
};
const gemileStoneCellData = async (sheetData, args, rowId) => {
    let actualStartColumnId, actualFinishColumnId, taskStatusColumnId;
    const taskStatus = "Complete";
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_START) {
            actualStartColumnId = column.id;
        }
        else if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH) {
            actualFinishColumnId = column.id;
        }
        else if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].TASK_STATUS) {
            taskStatusColumnId = column.id;
        }
    });
    const cells = [{ "columnId": actualStartColumnId, "value": new Date(args.actualStartDate) },
        { "columnId": actualFinishColumnId, "value": new Date(args.actualFinishDate) },
        { "columnId": taskStatusColumnId, "value": taskStatus }];
    return { "id": rowId, cells: cells };
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Mutations/UpdatePaymentChecklist.ts":
/*!*************************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Mutations/UpdatePaymentChecklist.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updatePaymentChecklist": () => (/* binding */ updatePaymentChecklist)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");


const updatePaymentChecklist = async (_root, args, _context) => {
    let sheetRes;
    try {
        const validResponse = await validateChecklistUpdateData(args);
        if (validResponse) {
            return validResponse;
        }
        const smartSheetClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const smartSheetData = await smartSheetClient.sheets.getSheet({ id: args.smartSheetId });
        const checklistArray = await getChecklistUpdateData(smartSheetData, args);
        await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.updateSheet)(smartSheetClient, checklistArray, args.smartSheetId);
        sheetRes = { code: 200, message: "success" };
        return sheetRes;
    }
    catch (error) {
        sheetRes = { code: 400, message: error.message };
        return sheetRes;
    }
};
const getChecklistUpdateData = async (sheetData, args) => {
    const checklistName = args.mileStoneName.toLowerCase().trim();
    const taskColumnId = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getTaskNameColumnId)(sheetData);
    const checklistRowArray = [];
    for (let row of sheetData.rows) {
        for (let cell of row.cells) {
            const cellValue = await getCellValue(cell);
            if (cellValue && cell.columnId === taskColumnId) {
                if (cellValue === checklistName) {
                    checklistRowArray.push(await getChecklistCellData(sheetData, args, row.id));
                }
            }
        }
    }
    return checklistRowArray;
};
const getChecklistCellData = async (sheetData, args, rowId) => {
    let actualStartId, actualFinishId, taskStatusId;
    const taskStatus = "Complete";
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_START) {
            actualStartId = column.id;
        }
        else if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH) {
            actualFinishId = column.id;
        }
        else if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].TASK_STATUS) {
            taskStatusId = column.id;
        }
    });
    const cells = [{ "columnId": actualStartId, "value": new Date(args.actualStartDate) },
        { "columnId": actualFinishId, "value": new Date(args.actualFinishDate) },
        { "columnId": taskStatusId, "value": taskStatus }];
    return { "id": rowId, cells: cells };
};
const getCellValue = async (cell) => {
    return cell.displayValue ? cell.displayValue.toLowerCase().trim() : null;
};
const validateChecklistUpdateData = async (args) => {
    let checklistResponse;
    if (!args.smartSheetId) {
        checklistResponse = { code: 400, message: "Please Enter Valid Smartsheet Id" };
    }
    if (!args.mileStoneName) {
        checklistResponse = { code: 400, message: "Please Enter Valid mileStoneName" };
    }
    if (!args.actualFinishDate) {
        checklistResponse = { code: 400, message: "Please Enter Valid actualFinishDate" };
    }
    if (!args.actualStartDate) {
        checklistResponse = { code: 400, message: "Please Enter Valid actualStartDate" };
    }
    return checklistResponse;
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Mutations/UpdateProjectAddress.ts":
/*!***********************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Mutations/UpdateProjectAddress.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateProjectAddress": () => (/* binding */ updateProjectAddress)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");



const updateProjectAddress = async (root, args, context) => {
    let sheetResponse;
    try {
        const validationResponse = await validateAddressUpdateData(args);
        if (validationResponse) {
            return validationResponse;
        }
        const { smartSheetId, projectAddress } = args;
        const smartClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const sheetData = await smartClient.sheets.getSheet({ id: smartSheetId });
        const rowArray = await getProjectAddressUpdateData(sheetData, projectAddress);
        await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.updateSheet)(smartClient, rowArray, smartSheetId);
        sheetResponse = { code: 200, message: "success" };
        return sheetResponse;
    }
    catch (error) {
        sheetResponse = { code: 400, message: error.message };
        return sheetResponse;
    }
};
const validateAddressUpdateData = async (args) => {
    var addressResponse;
    if (!args.smartSheetId) {
        addressResponse = { code: 400, message: "Please Enter Valid Smartsheet Id" };
    }
    if (!args.projectAddress) {
        addressResponse = { code: 400, message: "Please Enter Valid Address" };
    }
    return addressResponse;
};
const getProjectAddressUpdateData = async (sheetData, projectAddress) => {
    const rowArray = [];
    let summaryDetailsColumnId;
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].SUMMARY_DETAILS) {
            summaryDetailsColumnId = column.id;
        }
    });
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = cell.displayValue ? cell.displayValue.toLowerCase().trim() : null;
            if (cellValue && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROPERTY_ADDRESS) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, summaryDetailsColumnId, projectAddress));
            }
        }
    }
    return rowArray;
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Mutations/UpdateProjectStatus.ts":
/*!**********************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Mutations/UpdateProjectStatus.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateProjectStatus": () => (/* binding */ updateProjectStatus)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");
/* harmony import */ var _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/enumerations/ProjectMileStoneEnum */ "./src/domain/enumerations/ProjectMileStoneEnum.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_5__);






const updateProjectStatus = async (root, args, context) => {
    let sheetResponse;
    try {
        const validationResponse = await validateStatusUpdateData(args);
        if (validationResponse) {
            return validationResponse;
        }
        const { smartSheetId, projectStatus, signupDate } = args;
        const smartClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const sheetData = await smartClient.sheets.getSheet({ id: smartSheetId });
        const rowArray = await getProjectStatusUpdateData(sheetData, projectStatus, signupDate);
        await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.updateSheet)(smartClient, rowArray, smartSheetId);
        await currentMileStone(smartSheetId, smartClient);
        sheetResponse = { code: 200, message: "success" };
        return sheetResponse;
    }
    catch (error) {
        sheetResponse = { code: 400, message: error.message };
        return sheetResponse;
    }
};
const validateStatusUpdateData = async (args) => {
    const { smartSheetId, projectStatus, signupDate } = args;
    var statusResponse;
    if (!smartSheetId) {
        return { code: 400, message: "Please Enter Valid Smartsheet Id" };
    }
    if (!projectStatus) {
        statusResponse = { code: 400, message: "Please Enter Valid Status" };
    }
    if (!signupDate) {
        statusResponse = { code: 400, message: "Please Enter Valid SignUp Date" };
    }
    return statusResponse;
};
const currentMileStone = async (smartSheetId, smartClient) => {
    const project = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getProjectBySheetId)(smartSheetId);
    const sheetObject = await smartClient.sheets.getSheet({ id: smartSheetId });
    const handoverDate = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getHandoverDate)(sheetObject);
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_4__.prisma.dc_projects.update({
        data: { currentmilestone: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DEFAULT_CURRENT_MILESTONE, expectedhandoverdate: new Date(handoverDate) },
        where: { id: project.id }
    });
};
const getColumnIds = async (sheetData) => {
    let summaryDetailsColumnId, actualStartId, actualFinishId, originalPlannedStartId;
    for (var column of sheetData.columns) {
        const columnTitle = await getColumnTitle(column);
        if (columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].SUMMARY_DETAILS) {
            summaryDetailsColumnId = column.id;
        }
        else if (columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_START) {
            actualStartId = column.id;
        }
        else if (columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH) {
            actualFinishId = column.id;
        }
        else if (columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ORIGINAL_PLANNED_START_DATE) {
            originalPlannedStartId = column.id;
        }
    }
    return { "summaryDetailsColumnId": summaryDetailsColumnId, "actualStartId": actualStartId, "actualFinishId": actualFinishId, "originalPlannedStartId": originalPlannedStartId };
};
const getProjectStatusUpdateData = async (sheetData, projectStatus, signupDate) => {
    const statusRowArray = [];
    const date = dayjs__WEBPACK_IMPORTED_MODULE_5___default()(signupDate).format("YYYY-MM-DD");
    const columnIds = await getColumnIds(sheetData);
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = await getCellValue(cell);
            if (cellValue && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].STATUS) {
                statusRowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, columnIds.summaryDetailsColumnId, projectStatus));
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_SIGNUP) {
                const cells = [{ "columnId": columnIds.actualStartId, "value": new Date(date) },
                    { "columnId": columnIds.actualFinishId, "value": new Date(date) },
                    { "columnId": columnIds.originalPlannedStartId, "value": new Date(date) }];
                const clientCellObject = { "id": row.id, cells: cells };
                statusRowArray.push(clientCellObject);
            }
        }
    }
    return statusRowArray;
};
const getColumnTitle = async (column) => {
    return column.title ? column.title.toLowerCase().trim() : null;
};
const getCellValue = async (cell) => {
    return cell.displayValue ? cell.displayValue.toLowerCase().trim() : null;
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Mutations/UpdateProjectValue.ts":
/*!*********************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Mutations/UpdateProjectValue.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateProjectValue": () => (/* binding */ updateProjectValue)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");



const updateProjectValue = async (root, args, context) => {
    let sheetResponse;
    try {
        const { smartSheetId, projectValue } = args;
        if (!smartSheetId) {
            sheetResponse = { code: 400, message: "Please Enter Valid Smartsheet Id" };
            return sheetResponse;
        }
        const smartClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const sheetData = await smartClient.sheets.getSheet({ id: smartSheetId });
        const rowArray = await getProjectValueUpdateData(sheetData, projectValue);
        await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.updateSheet)(smartClient, rowArray, smartSheetId);
        sheetResponse = { code: 200, message: "success" };
        return sheetResponse;
    }
    catch (error) {
        sheetResponse = { code: 400, message: error.message };
        return sheetResponse;
    }
};
const getProjectValueUpdateData = async (sheetData, projectValue) => {
    const rowArray = [];
    let summaryDetailsColumnId;
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].SUMMARY_DETAILS) {
            summaryDetailsColumnId = column.id;
        }
    });
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = cell.displayValue ? cell.displayValue.toLowerCase().trim() : null;
            if (cellValue && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_SIGNUP_VALUE) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, summaryDetailsColumnId, projectValue));
            }
        }
    }
    return rowArray;
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Mutations/UpdateSurvey.ts":
/*!***************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Mutations/UpdateSurvey.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateSurvey": () => (/* binding */ updateSurvey)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");



const updateSurvey = async (root, args, context) => {
    let sheetResponse;
    try {
        const validationResponse = await validateSurveyUpdateData(args);
        if (validationResponse) {
            return validationResponse;
        }
        const { smartSheetId, surveyExecutiveEmail } = args;
        const smartClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const sheetData = await smartClient.sheets.getSheet({ id: smartSheetId });
        const rowArray = await getSurveyUpdateData(sheetData, surveyExecutiveEmail);
        await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.updateSheet)(smartClient, rowArray, smartSheetId);
        sheetResponse = { code: 200, message: "success" };
        return sheetResponse;
    }
    catch (error) {
        sheetResponse = { code: 400, message: error.message };
        return sheetResponse;
    }
};
const validateSurveyUpdateData = async (args) => {
    var surveyResponse;
    const emailReg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
    if (!args.smartSheetId) {
        surveyResponse = { code: 400, message: "Please Enter Valid Smartsheet Id" };
    }
    if (!emailReg.test(args.surveyExecutiveEmail)) {
        surveyResponse = { code: 400, message: "Please Enter Valid Email" };
    }
    return surveyResponse;
};
const getSurveyUpdateData = async (sheetData, surveyExecutiveEmail) => {
    const rowArray = [];
    let assignedToColumnId;
    const taskNameColumnId = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getTaskNameColumnId)(sheetData);
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ASSIGN_TO) {
            assignedToColumnId = column.id;
        }
    });
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = cell.displayValue ? cell.displayValue.toLowerCase().trim() : null;
            if (cellValue && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SITE_SURVEY && cell.columnId === taskNameColumnId) {
                rowArray.push(await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getCellData)(row.id, assignedToColumnId, surveyExecutiveEmail));
            }
        }
    }
    return rowArray;
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Mutations/WebhookCallBack.ts":
/*!******************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Mutations/WebhookCallBack.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "webHookCallBack": () => (/* binding */ webHookCallBack)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");
/* harmony import */ var _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/enumerations/ProjectMileStoneEnum */ "./src/domain/enumerations/ProjectMileStoneEnum.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_6__);







const webHookCallBack = async (root, args, context) => {
    try {
        const body = args.body;
        console.log(body);
        if (body.challenge) {
            console.log("Received verification callback");
            return {
                status: 200,
                smartsheetHookResponse: body.challenge,
            };
        }
        else if (body.events) {
            return processEventData(body);
        }
        else if (body.newWebHookStatus) {
            return {
                sendStatus: 200,
            };
        }
        else {
            console.log(`Received unknown callback: ${body}`);
            return {
                sendStatus: 200,
            };
        }
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};
const processEventData = async (callbackData) => {
    let sheetResponse;
    try {
        if (callbackData.scope !== "sheet") {
            return { code: 400, message: "Wrong Event" };
        }
        for (const event of callbackData.events) {
            await updateProjectData(event, callbackData);
        }
        sheetResponse = { code: 200, message: "success" };
        return sheetResponse;
    }
    catch (error) {
        sheetResponse = { code: 400, message: error.message };
        return sheetResponse;
    }
};
const updateProjectData = async (event, callbackData) => {
    if (event.objectType === "cell") {
        const eventColumnId = event.columnId.toString();
        var options = {
            sheetId: callbackData.scopeObjectId,
            rowId: event.rowId.toString(),
        };
        const smartClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const row = await smartClient.sheets.getRow(options);
        const project = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getProjectBySheetId)(callbackData.scopeObjectId.toString());
        for (var cell of row.cells) {
            const cellValue = await getCellValue(cell);
            if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].REVISED_HANDOVER_DATE) {
                await UpdateHandoverDate(project, row, eventColumnId);
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_MANAGER) {
                await updatePM(project, row, eventColumnId);
            }
            else if (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].HANDOVER) {
                await deleteWebHook(row, event, callbackData, smartClient);
            }
        }
        await updateCurrentMileStone(eventColumnId, event.rowId.toString(), callbackData.scopeObjectId, smartClient);
        var columnOption = {
            sheetId: callbackData.scopeObjectId,
            columnId: eventColumnId,
        };
        const column = await smartClient.sheets.getColumns(columnOption);
        if (column.title.toLowerCase().trim() ===
            _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_4__.prisma.dc_projects.update({
                data: { lastupdatedate: new Date() },
                where: { id: project.id },
            });
        }
    }
};
const updateCurrentMileStone = async (eventColumnId, eventRowId, smartSheetId, smartClient) => {
    let updatedMileStone;
    var columnOption = {
        sheetId: smartSheetId,
        columnId: eventColumnId,
    };
    const column = await smartClient.sheets.getColumns(columnOption);
    if (column.title.toLowerCase().trim() === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH) {
        var options = {
            sheetId: smartSheetId,
            rowId: eventRowId,
        };
        const row = await smartClient.sheets.getRow(options);
        for (var cell of row.cells) {
            if (cell.columnId.toString() === eventColumnId.toString() && cell.value) {
                updatedMileStone = await getUpdatedMileStone(row);
            }
        }
        if (updatedMileStone && updatedMileStone.mileStoneName) {
            let milestoneName = updatedMileStone.mileStoneName;
            const project = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getProjectBySheetId)(smartSheetId.toString());
            if (!updatedMileStone.isSheet) {
                const mileStones = await getCurrentMileStone(updatedMileStone.mileStoneName, project.milestones);
                const currentMileStone = mileStones.currentMileStone;
                milestoneName = mileStones.oldMileStone;
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_4__.prisma.dc_projects.update({
                    data: { currentmilestone: currentMileStone },
                    where: { id: project.id },
                });
            }
            const webEngageResponse = await postWebEngageApi(milestoneName, smartSheetId, smartClient, project);
            console.log(webEngageResponse);
        }
    }
};
const getUpdatedMileStone = async (row) => {
    let updatedMileStone;
    let responseObj;
    for (var cell of row.cells) {
        const cellValue = await getCellValue(cell);
        if (!updatedMileStone && cellValue) {
            responseObj = await getMileStone(cellValue);
            updatedMileStone = responseObj.mileStoneName;
        }
    }
    return responseObj;
};
const getCurrentMileStone = async (updatedMileStone, milestones) => {
    var i, currentMileStone, oldMileStone;
    const mileStoneName = updatedMileStone.toLowerCase().trim();
    milestones = milestones.attributes.milestone_details;
    for (i = 0; i < milestones.length; i++) {
        if (milestones[i].label.toLowerCase().trim() === mileStoneName) {
            if (mileStoneName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].HANDOVER) {
                currentMileStone = milestones[i].label.trim();
                oldMileStone = milestones[i].label.trim();
            }
            else {
                currentMileStone = milestones[i + 1].label.trim();
                oldMileStone = milestones[i].label.trim();
            }
        }
    }
    return { "currentMileStone": currentMileStone, "oldMileStone": oldMileStone };
};
const getMileStone = async (cellValue) => {
    let mileStoneName;
    let isSheet = false;
    switch (cellValue) {
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_SIGNUP: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PROJECT_SIGNUP;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SITE_SURVEY: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_SURVEY;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SITE_SURVEY_COMPLETE: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_SURVEY;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].KNOW_YOUR_CLIENT: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].KNOW_YOUR_CLIENT;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].FIRST_CUT_MEETING: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_PRESENTATION;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_PRESENTATION: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_PRESENTATION;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_FINALIZATION: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_FINALIZATION;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].REQUEST_PM_FOR_KICKOFF: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_REQUEST;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].KICKOFF_MEETING_AT_SITE: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_MEETING;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DWG_REVISIONS: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].POST_SITE_VALIDATION_REVISION;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].GFC_CHECKING: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].GFC_CHECKING;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_SIGN_OFF: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_SIGNOFF;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_SIGN_OFF_PRESENTATION: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_SIGNOFF;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_RECEIVED_FOR_PLANNING: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION_REQUEST;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PRODUCTION: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].READY_FOR_DISPATCH: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_DISPATCH;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PENDING_HARDWARE_QC: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_DISPATCH;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].READY_FOR_HANDOVER: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_HANDOVER;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].HANDOVER: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].HANDOVER;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].THIRTYFIVE_PAYMENT_CONFIRMATION: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].THIRTYFIVE_PAYMENT;
            isSheet = true;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_ITERATION: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_ITERATION;
            isSheet = true;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].MATERIAL_SELECTION: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].MATERIAL_SELECTION;
            isSheet = true;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].FOURTYFIVE_PAYMENT_CONFIRMATION: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].FOURTYFIVE_PAYMENT_CONFIRMATION;
            isSheet = true;
            break;
        }
        case _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].FIFTEEN_PAYMENT_CONFIRMATION: {
            mileStoneName = _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].FIFTEEN_PAYMENT_CONFIRMATION;
            isSheet = true;
            break;
        }
        default: {
            break;
        }
    }
    return { "mileStoneName": mileStoneName, "isSheet": isSheet };
};
const getCellValue = async (cell) => {
    return cell.displayValue ? cell.displayValue.toLowerCase().trim() : null;
};
const UpdateHandoverDate = async (project, row, eventColumnId) => {
    let handoverDate;
    for (var cell of row.cells) {
        if (cell.columnId.toString() === eventColumnId.toString()) {
            handoverDate = cell.value;
            if (handoverDate) {
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_4__.prisma.dc_projects.update({
                    data: { expectedhandoverdate: new Date(handoverDate) },
                    where: { id: project.id },
                });
            }
        }
    }
};
const deleteWebHook = async (row, event, callbackData, smartClient) => {
    var options = {
        sheetId: callbackData.scopeObjectId,
        columnId: event.columnId.toString(),
    };
    const column = await smartClient.sheets.getColumns(options);
    if (column.title.toLowerCase().trim() === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH) {
        for (var cell of row.cells) {
            if (cell.columnId.toString() === event.columnId.toString()) {
                if (cell.value) {
                    var deleteHook = {
                        webhookId: callbackData.webhookId,
                    };
                    await smartClient.webhooks.deleteWebhook(deleteHook);
                }
            }
        }
    }
};
const updatePM = async (project, row, eventColumnId) => {
    let projectManager;
    for (var cell of row.cells) {
        if (cell.columnId.toString() === eventColumnId.toString()) {
            projectManager = cell.value;
            if (projectManager) {
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_4__.prisma.dc_projects.update({
                    data: { projectmanagername: projectManager },
                    where: { id: project.id },
                });
            }
        }
    }
};
const postWebEngageApi = async (updatedMileStone, smartSheetId, smartClient, project) => {
    const sheetData = await smartClient.sheets.getSheet({ id: smartSheetId });
    const taskNameColumnId = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getTaskNameColumnId)(sheetData);
    const summaryDetailsColumnId = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSummaryDetailsColumnId)(sheetData);
    let clientEmail, clientContact, designerName;
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = await getCellValue(cell);
            if (cell.columnId === taskNameColumnId && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGNER_NAME) {
                designerName = await getDesignerName(row, summaryDetailsColumnId);
            }
            if (cell.columnId === taskNameColumnId && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CLIENT_EMAIL) {
                clientEmail = await getClientContact(row, summaryDetailsColumnId);
            }
            if (cell.columnId === taskNameColumnId && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].CLIENT_CONTACT) {
                clientContact = await getClientEmail(row, summaryDetailsColumnId);
            }
        }
    }
    return callWebEngageApi(clientContact, updatedMileStone, designerName, clientEmail, project);
};
const callWebEngageApi = async (clientContact, updatedMileStone, designerName, clientEmail, project) => {
    if (process.env.WebEngageEnv !== "prod") {
        clientContact = process.env.TestPhone;
    }
    if (updatedMileStone === "Post Site Validation Revision") {
        updatedMileStone = "Dwg Revisions Completed";
    }
    if (updatedMileStone === "Design Sign-Off") {
        updatedMileStone = "Design Sign Off";
    }
    const completionDate = dayjs__WEBPACK_IMPORTED_MODULE_6___default()(project.expectedhandoverdate).format("DD MMMM YYYY");
    const attributeModel = { "milestoneName": updatedMileStone, "DesignerName": designerName, "IsImosProject": project.isimosproject, "completionDate": completionDate };
    const requestBody = { "userId": clientContact, "email": clientEmail, "phone": clientContact, "attributes": attributeModel };
    console.log(requestBody);
    const url = process.env.WebEngageUrl;
    const webEngagePushDataResponse = await superagent__WEBPACK_IMPORTED_MODULE_5___default().put(url)
        .send(requestBody)
        .set("Content-Type", "application/json")
        .set("Authorization", process.env.WebEngageAuthorizationToken);
    if (JSON.stringify(webEngagePushDataResponse.body.response.status === "queued")) {
        return {
            code: 200,
            message: "Data Successfully pushed to WebEngage"
        };
    }
    else {
        return {
            code: 400,
            response: JSON.stringify(webEngagePushDataResponse)
        };
    }
};
const getDesignerName = async (row, summaryDetailsColumnId) => {
    let designerName;
    for (var cell of row.cells) {
        if (cell.columnId.toString() === summaryDetailsColumnId.toString()) {
            designerName = cell.value;
            break;
        }
    }
    return designerName;
};
const getClientContact = async (row, summaryDetailsColumnId) => {
    let clientContact;
    for (var cell of row.cells) {
        if (cell.columnId.toString() === summaryDetailsColumnId.toString()) {
            clientContact = cell.value;
            break;
        }
    }
    return clientContact;
};
const getClientEmail = async (row, summaryDetailsColumnId) => {
    let clientEmail;
    for (var cell of row.cells) {
        if (cell.columnId.toString() === summaryDetailsColumnId.toString()) {
            clientEmail = cell.value;
            break;
        }
    }
    return clientEmail;
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/Queries/GetMileStonesDetails.ts":
/*!*********************************************************************!*\
  !*** ./src/api/projects/Smartsheet/Queries/GetMileStonesDetails.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getMileStoneData": () => (/* binding */ getMileStoneData),
/* harmony export */   "getMileStoneDetails": () => (/* binding */ getMileStoneDetails)
/* harmony export */ });
/* harmony import */ var _SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../SmartSheetServices */ "./src/api/projects/Smartsheet/SmartSheetServices.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");
/* harmony import */ var _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/enumerations/ProjectMileStoneEnum */ "./src/domain/enumerations/ProjectMileStoneEnum.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");





const getMileStoneDetails = async (root, args, context) => {
    let GetMileStoneResponse;
    var handoverDate;
    try {
        if (!args.sheetId) {
            return { code: 400, message: "Please Enter Valid Smartsheet Id" };
        }
        const smartClient = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getSmartSheetClient)();
        const sheetData = await smartClient.sheets.getSheet({ id: args.sheetId });
        const project = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getProjectBySheetId)(args.sheetId);
        const mileStoneData = await getMileStoneData(sheetData, project.milestones, "");
        handoverDate = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getHandoverDate)(sheetData);
        if (handoverDate) {
            handoverDate = new Date(handoverDate);
        }
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_4__.prisma.dc_projects.update({
            data: { expectedhandoverdate: handoverDate },
            where: { id: project.id },
        });
        GetMileStoneResponse = {
            code: 200,
            message: "success",
            data: mileStoneData,
        };
        return GetMileStoneResponse;
    }
    catch (error) {
        GetMileStoneResponse = { code: 400, message: error.message };
        return GetMileStoneResponse;
    }
};
const getMileStoneData = async (sheetData, mileStones, type) => {
    const columnJson = await getColumnIds(sheetData);
    var mileStone, checkListdata;
    const milestonelist = [], listType = type;
    const taskNameColumnId = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getTaskNameColumnId)(sheetData);
    for (var row of sheetData.rows) {
        for (var cell of row.cells) {
            const cellValue = cell.displayValue
                ? cell.displayValue.toLowerCase().trim()
                : null;
            if (cell.columnId === taskNameColumnId) {
                if (cellValue && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_SIGNUP) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PROJECT_SIGNUP) {
                            const projectSignUpData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getChecklistData(milestoneChecklist, lableName, projectSignUpData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = projectSignUpData;
                        }
                    }
                }
                if (cellValue && (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SITE_SURVEY ||
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].SITE_SURVEY_COMPLETE)) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_SURVEY) {
                            const siteSurveyData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getSiteSurveyData(milestoneChecklist, lableName, siteSurveyData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = siteSurveyData;
                        }
                    }
                }
                if (cellValue &&
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].KNOW_YOUR_CLIENT) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].KNOW_YOUR_CLIENT) {
                            const kycData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getKYCData(milestoneChecklist, lableName, kycData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = kycData;
                        }
                    }
                }
                if (cellValue &&
                    (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].FIRST_CUT_MEETING ||
                        cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_PRESENTATION)) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_PRESENTATION) {
                            const designPresentationData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getDesignpresentationData(milestoneChecklist, lableName, designPresentationData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = designPresentationData;
                        }
                    }
                }
                if (cellValue &&
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_FINALIZATION) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_FINALIZATION) {
                            const designFinalizationData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getDesignfinalizationData(milestoneChecklist, lableName, designFinalizationData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = designFinalizationData;
                        }
                    }
                }
                if (cellValue &&
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].REQUEST_PM_FOR_KICKOFF) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_REQUEST) {
                            const pmKickOffData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getSiterequestData(milestoneChecklist, lableName, pmKickOffData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = pmKickOffData;
                        }
                    }
                }
                if (cellValue &&
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].KICKOFF_MEETING_AT_SITE) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_MEETING) {
                            const meetingatSiteData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getSitemeetingData(milestoneChecklist, lableName, meetingatSiteData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = meetingatSiteData;
                        }
                    }
                }
                if (cellValue && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DWG_REVISIONS) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].POST_SITE_VALIDATION_REVISION) {
                            const dwgRevisionData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getPostSiteData(milestoneChecklist, lableName, dwgRevisionData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = dwgRevisionData;
                        }
                    }
                }
                if (cellValue && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].GFC_CHECKING) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].GFC_CHECKING) {
                            const gfcChekingData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getGFCData(milestoneChecklist, lableName, gfcChekingData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = gfcChekingData;
                        }
                    }
                }
                if (cellValue &&
                    (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_SIGN_OFF ||
                        cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].DESIGN_SIGN_OFF_PRESENTATION)) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_SIGNOFF) {
                            const designSignOffData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getDesignSignoffData(milestoneChecklist, lableName, designSignOffData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = designSignOffData;
                        }
                    }
                }
                if (cellValue &&
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PROJECT_RECEIVED_FOR_PLANNING) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION_REQUEST) {
                            const receivedForPlanningData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getProductionRequestData(milestoneChecklist, lableName, receivedForPlanningData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = receivedForPlanningData;
                        }
                    }
                }
                if (cellValue &&
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].THIRTYFIVE_PAYMENT_CONFIRMATION) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].THIRTYFIVE_PAYMENT) {
                            const thirtyFiveData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await get35Data(milestoneChecklist, lableName, thirtyFiveData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = thirtyFiveData;
                        }
                    }
                }
                if (cellValue && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PRODUCTION) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION) {
                            const productionData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getProductionData(milestoneChecklist, lableName, productionData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = productionData;
                        }
                    }
                }
                if (cellValue &&
                    (cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].READY_FOR_DISPATCH ||
                        cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].PENDING_HARDWARE_QC)) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_DISPATCH) {
                            const readyDispatchData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getReadyDispatchData(milestoneChecklist, lableName, readyDispatchData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = readyDispatchData;
                        }
                    }
                }
                if (cellValue &&
                    cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].READY_FOR_HANDOVER) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_HANDOVER) {
                            const readyHandoverData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getReadyHandoverData(milestoneChecklist, lableName, readyHandoverData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = readyHandoverData;
                        }
                    }
                }
                if (cellValue && cellValue === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].HANDOVER) {
                    for (mileStone of mileStones.attributes.milestone_details) {
                        const lableName = mileStone.label
                            ? mileStone.label.toLowerCase().trim()
                            : null;
                        if (lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].HANDOVER) {
                            const handoverData = await getmileStoneCellData(row, columnJson, listType);
                            const milestoneChecklist = mileStone.milestone_checklist;
                            checkListdata = await getHandoverData(milestoneChecklist, lableName, handoverData);
                            milestonelist.push(checkListdata);
                            mileStone.MileStoneData = handoverData;
                        }
                    }
                }
            }
        }
    }
    if (type === "home") {
        return milestonelist;
    }
    else {
        return mileStones;
    }
};
const getmileStoneCellData = async (row, columnJson, listType) => {
    let assignedTo, originalStartDate, originalEndDate, actualStartDate, actualEndDate, forecastedEndDate, forecastedStartDate, taskStatus;
    let delayDays;
    let delayStatus = "onTime";
    row.cells.forEach((cell) => {
        switch (cell.columnId) {
            case columnJson.assignedToColumnId: {
                assignedTo = cell.value;
                break;
            }
            case columnJson.originalStartDateColumnId: {
                originalStartDate = cell.value;
                break;
            }
            case columnJson.originalEndDateColumnId: {
                originalEndDate = cell.value;
                break;
            }
            case columnJson.actualStartDateColumnId: {
                actualStartDate = cell.value;
                break;
            }
            case columnJson.actualEndDateColumnId: {
                actualEndDate = cell.value;
                break;
            }
            case columnJson.forecastedEndDateColumnId: {
                forecastedEndDate = cell.value;
                break;
            }
            case columnJson.forecastedStartDateColumnId: {
                forecastedStartDate = cell.value;
                break;
            }
            case columnJson.taskStatusColumnId: {
                taskStatus = cell.value;
                break;
            }
            default:
                break;
        }
    });
    switch (taskStatus) {
        case "Complete": {
            delayDays = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getDelayDays)(new Date(actualEndDate), new Date(originalEndDate));
            break;
        }
        case "Not Started": {
            delayDays = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getDelayDays)(new Date(forecastedEndDate), new Date(originalEndDate));
            break;
        }
        case "In Progress": {
            delayDays = await (0,_SmartSheetServices__WEBPACK_IMPORTED_MODULE_0__.getDelayDays)(new Date(forecastedEndDate), new Date(originalEndDate));
            break;
        }
        default:
            break;
    }
    if (delayDays > 0) {
        delayStatus = "delayed";
    }
    else {
        delayDays = 0;
    }
    if (listType === "home") {
        return {
            forecastedEndDate: forecastedEndDate,
            taskStatus: taskStatus,
            delayDays: delayDays,
            delayStatus: delayStatus,
        };
    }
    else {
        return {
            assignedTo: assignedTo,
            originalStartDate: originalStartDate,
            originalEndDate: originalEndDate,
            actualStartDate: actualStartDate,
            actualEndDate: actualEndDate,
            forecastedEndDate: forecastedEndDate,
            forecastedStartDate: forecastedStartDate,
            taskStatus: taskStatus,
            delayDays: delayDays,
            delayStatus: delayStatus,
        };
    }
};
const getColumnIds = async (sheetData) => {
    const columnJson = await getColumnsJson();
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        switch (columnTitle) {
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ASSIGN_TO: {
                columnJson.assignedToColumnId = column.id;
                break;
            }
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ORIGINAL_PLANNED_START_DATE: {
                columnJson.originalStartDateColumnId = column.id;
                break;
            }
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ORIGINAL_PLANNED_FINISH_DATE: {
                columnJson.originalEndDateColumnId = column.id;
                break;
            }
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_START: {
                columnJson.actualStartDateColumnId = column.id;
                break;
            }
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH: {
                columnJson.actualEndDateColumnId = column.id;
                break;
            }
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].CURRENT_FORECAST_START: {
                columnJson.forecastedStartDateColumnId = column.id;
                break;
            }
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].CURRENT_FORECAST_FINISH: {
                columnJson.forecastedEndDateColumnId = column.id;
                break;
            }
            case _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].TASK_STATUS: {
                columnJson.taskStatusColumnId = column.id;
                break;
            }
        }
    });
    return columnJson;
};
const getColumnsJson = async () => {
    return {
        assignedToColumnId: null,
        originalStartDateColumnId: null,
        originalEndDateColumnId: null,
        actualStartDateColumnId: null,
        actualEndDateColumnId: null,
        forecastedEndDateColumnId: null,
        forecastedStartDateColumnId: null,
        taskStatusColumnId: null,
    };
};
const getChecklistData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 && lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PROJECT_SIGNUP) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PROJECT_SIGNUP,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getSiteSurveyData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 && lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_SURVEY) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_SURVEY,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getKYCData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].KNOW_YOUR_CLIENT) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].KNOW_YOUR_CLIENT,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getDesignpresentationData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_PRESENTATION) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_PRESENTATION,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getDesignfinalizationData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_FINALIZATION) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_FINALIZATION,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getSiterequestData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_REQUEST) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_REQUEST,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getSitemeetingData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_MEETING) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].SITE_VALIDATION_MEETING,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getPostSiteData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].POST_SITE_VALIDATION_REVISION) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].POST_SITE_VALIDATION_REVISION,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getGFCData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 && lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].GFC_CHECKING) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].GFC_CHECKING,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getDesignSignoffData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 && lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_SIGNOFF) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].DESIGN_SIGNOFF,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getProductionRequestData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION_REQUEST) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION_REQUEST,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const get35Data = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].THIRTYFIVE_PAYMENT) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].THIRTYFIVE_PAYMENT,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getProductionData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 && lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].PRODUCTION,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getReadyDispatchData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_DISPATCH) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_DISPATCH,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getReadyHandoverData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 &&
            lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_HANDOVER) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].READY_FOR_HANDOVER,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};
const getHandoverData = async (milestoneChecklist, lableName, statusData) => {
    let ms = {};
    const checklistName = [];
    milestoneChecklist.forEach((val) => {
        if (val.length !== 0 && lableName === _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].HANDOVER) {
            checklistName.push(val);
        }
    });
    ms = {
        name: _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_3__["default"].HANDOVER,
        checklist_name: checklistName,
        taskStatus: statusData,
    };
    return ms;
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/SmartSheetServices.ts":
/*!***********************************************************!*\
  !*** ./src/api/projects/Smartsheet/SmartSheetServices.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSheet": () => (/* binding */ createSheet),
/* harmony export */   "createWebHook": () => (/* binding */ createWebHook),
/* harmony export */   "getActualHandoverDate": () => (/* binding */ getActualHandoverDate),
/* harmony export */   "getCellData": () => (/* binding */ getCellData),
/* harmony export */   "getDelayDays": () => (/* binding */ getDelayDays),
/* harmony export */   "getForeCastDate": () => (/* binding */ getForeCastDate),
/* harmony export */   "getForecastedHandoverDate": () => (/* binding */ getForecastedHandoverDate),
/* harmony export */   "getHandoverColumnId": () => (/* binding */ getHandoverColumnId),
/* harmony export */   "getHandoverData": () => (/* binding */ getHandoverData),
/* harmony export */   "getHandoverDate": () => (/* binding */ getHandoverDate),
/* harmony export */   "getProjectBySheetId": () => (/* binding */ getProjectBySheetId),
/* harmony export */   "getReadyHandoverDate": () => (/* binding */ getReadyHandoverDate),
/* harmony export */   "getRevisedHandoverDate": () => (/* binding */ getRevisedHandoverDate),
/* harmony export */   "getSmartSheetClient": () => (/* binding */ getSmartSheetClient),
/* harmony export */   "getSummaryDetailsColumnId": () => (/* binding */ getSummaryDetailsColumnId),
/* harmony export */   "getTaskNameColumnId": () => (/* binding */ getTaskNameColumnId),
/* harmony export */   "getWebhookColumnId": () => (/* binding */ getWebhookColumnId),
/* harmony export */   "updateSheet": () => (/* binding */ updateSheet)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/enumerations/SmartSheetColumnNameEnum */ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");



async function getSmartSheetClient() {
    const smartSdk = __webpack_require__(/*! smartsheet */ "smartsheet");
    return smartSdk.createClient({
        accessToken: process.env.smartSheetAccessToken,
        logLevel: "info"
    });
}
async function createSheet(smartClient, sheetName) {
    var sheet = {
        "fromId": process.env.smartSheetTemplateId,
        "name": sheetName
    };
    var options = {
        workspaceId: process.env.smartSheetWorkspaceId,
        body: sheet,
        queryParameters: {
            include: 'attachments,data,discussions'
        }
    };
    const sheetDetails = await smartClient.sheets.createSheetFromExisting(options);
    return sheetDetails.result.id;
}
async function updateSheet(smartClient, rowArray, sheetId) {
    var updateRow = {
        sheetId: sheetId,
        body: rowArray
    };
    return smartClient.sheets.updateRow(updateRow);
}
async function getCellData(rowId, columnId, value) {
    const cells = [{ "columnId": columnId, "value": value }];
    return { "id": rowId, cells: cells };
}
async function getProjectBySheetId(smartSheetId) {
    return _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
        where: { smartsheetid: smartSheetId },
    });
}
async function getHandoverDate(smartSheetData) {
    let handoverDate = null;
    const handoverColumnIds = await getHandoverColumnId(smartSheetData);
    handoverDate = await getRevisedHandoverDate(smartSheetData, handoverColumnIds.actualStartDateColumnId, handoverDate);
    handoverDate = await getActualHandoverDate(smartSheetData, handoverColumnIds.actualStartDateColumnId, handoverDate);
    handoverDate = await getForecastedHandoverDate(smartSheetData, handoverColumnIds.forecastedFnishDateColumnId, handoverColumnIds.originalEndDateColumnId, handoverDate);
    handoverDate = await getReadyHandoverDate(smartSheetData, handoverColumnIds.forecastedFnishDateColumnId, handoverDate);
    return handoverDate;
}
async function createWebHook(targetSheetId, hookName) {
    let webhook = null;
    const smartClient = await getSmartSheetClient();
    const listHooksResponse = await smartClient.webhooks.listWebhooks({
        includeAll: true
    });
    for (const hook of listHooksResponse.data) {
        if (hook.scopeObjectId === targetSheetId && hook.name === hookName) {
            webhook = hook;
            break;
        }
    }
    if (!webhook) {
        const sheetData = await smartClient.sheets.getSheet({ id: targetSheetId });
        const subColumnIds = await getWebhookColumnId(sheetData);
        const subScopeOption = {
            columnIds: subColumnIds
        };
        const createOptions = {
            body: {
                name: hookName,
                callbackUrl: process.env.smartSheetCallBackUrl,
                scope: "sheet",
                scopeObjectId: targetSheetId,
                events: ["*.*"],
                version: 1,
                subscope: subScopeOption
            }
        };
        const createResponse = await smartClient.webhooks.createWebhook(createOptions);
        webhook = createResponse.result;
        console.log(`Created new hook: ${webhook.id}`);
    }
    const updateOptions = {
        webhookId: webhook.id,
        callbackUrl: process.env.smartSheetCallBackUrl,
        body: { enabled: true }
    };
    const updateResponse = await smartClient.webhooks.updateWebhook(updateOptions);
    const updatedWebhook = updateResponse.result;
    console.log(`Hook enabled: ${updatedWebhook.enabled}, status: ${updatedWebhook.status}`);
}
async function getDelayDays(endDate, startDate) {
    const oneDay = 1000 * 60 * 60 * 24;
    const diffInTime = endDate.getTime() - startDate.getTime();
    return Math.round(diffInTime / oneDay);
}
async function getHandoverData(row, DateColumnId) {
    let cellValue;
    row.cells.forEach((cell) => {
        if (cell.columnId === DateColumnId && cell.value) {
            cellValue = cell.value;
        }
    });
    return cellValue;
}
async function getForeCastDate(row, forecastedFnishDateColumnId, originalEndDateColumnId) {
    let cellValue;
    row.cells.forEach((cell) => {
        if (cell.columnId === forecastedFnishDateColumnId && cell.value) {
            cellValue = cell.value;
        }
        if (cell.columnId === originalEndDateColumnId && !cellValue && cell.value) {
            cellValue = cell.value;
        }
    });
    return cellValue;
}
async function getHandoverColumnId(smartSheetData) {
    let originalEndDateColumnId, actualStartDateColumnId, forecastedFnishDateColumnId;
    smartSheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ORIGINAL_PLANNED_FINISH_DATE) {
            originalEndDateColumnId = column.id;
        }
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_START) {
            actualStartDateColumnId = column.id;
        }
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].CURRENT_FORECAST_FINISH) {
            forecastedFnishDateColumnId = column.id;
        }
    });
    return { "originalEndDateColumnId": originalEndDateColumnId, "actualStartDateColumnId": actualStartDateColumnId, "forecastedFnishDateColumnId": forecastedFnishDateColumnId };
}
async function getRevisedHandoverDate(smartSheetData, actualStartDateColumnId, handoverDate) {
    var row, cell;
    for (row of smartSheetData.rows) {
        for (cell of row.cells) {
            if (cell.displayValue && (cell.displayValue.toLowerCase().trim() === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].REVISED_HANDOVER_DATE) && !handoverDate) {
                handoverDate = await getHandoverData(row, actualStartDateColumnId);
            }
        }
    }
    return handoverDate;
}
async function getActualHandoverDate(smartSheetData, actualStartDateColumnId, handoverDate) {
    var row, cell;
    for (row of smartSheetData.rows) {
        for (cell of row.cells) {
            if (cell.displayValue && (cell.displayValue.toLowerCase().trim() === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].HANDOVER_DATE) && !handoverDate) {
                handoverDate = await getHandoverData(row, actualStartDateColumnId);
            }
        }
    }
    return handoverDate;
}
async function getForecastedHandoverDate(smartSheetData, forecastedFnishDateColumnId, originalEndDateColumnId, handoverDate) {
    var row, cell;
    for (row of smartSheetData.rows) {
        for (cell of row.cells) {
            if (cell.displayValue && (cell.displayValue.toLowerCase().trim() === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].HANDOVER) && !handoverDate) {
                const handoverForecast = await getForeCastDate(row, forecastedFnishDateColumnId, originalEndDateColumnId);
                handoverDate = handoverForecast;
            }
        }
    }
    return handoverDate;
}
async function getReadyHandoverDate(smartSheetData, forecastedFnishDateColumnId, handoverDate) {
    var row, cell;
    for (row of smartSheetData.rows) {
        for (cell of row.cells) {
            if (cell.displayValue && (cell.displayValue.toLowerCase().trim() === _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_2__["default"].READY_FOR_HANDOVER) && !handoverDate) {
                const readyHandover = await getHandoverData(row, forecastedFnishDateColumnId);
                handoverDate = readyHandover;
            }
        }
    }
    return handoverDate;
}
async function getTaskNameColumnId(sheetData) {
    let taskNameColumnId;
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].TASK_NAME) {
            taskNameColumnId = column.id;
        }
    });
    return taskNameColumnId;
}
async function getWebhookColumnId(sheetData) {
    let summaryDetails, actualFinishDate;
    const columnIds = [];
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].SUMMARY_DETAILS) {
            summaryDetails = column.id;
            columnIds.push(summaryDetails);
        }
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ACTUAL_FINISH) {
            actualFinishDate = column.id;
            columnIds.push(actualFinishDate);
        }
    });
    return columnIds;
}
async function getSummaryDetailsColumnId(sheetData) {
    let summaryDetails;
    sheetData.columns.forEach((column) => {
        const columnTitle = column.title ? column.title.toLowerCase().trim() : null;
        if (columnTitle && columnTitle === _domain_enumerations_SmartSheetColumnNameEnum__WEBPACK_IMPORTED_MODULE_1__["default"].SUMMARY_DETAILS) {
            summaryDetails = column.id;
        }
    });
    return summaryDetails;
}


/***/ }),

/***/ "./src/api/projects/Smartsheet/resolver.ts":
/*!*************************************************!*\
  !*** ./src/api/projects/Smartsheet/resolver.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "smartSheetResolver": () => (/* binding */ smartSheetResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Mutations_CreateSmartsheet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mutations/CreateSmartsheet */ "./src/api/projects/Smartsheet/Mutations/CreateSmartsheet.ts");
/* harmony import */ var _Mutations_UpdateDesigner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Mutations/UpdateDesigner */ "./src/api/projects/Smartsheet/Mutations/UpdateDesigner.ts");
/* harmony import */ var _Mutations_UpdateSurvey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mutations/UpdateSurvey */ "./src/api/projects/Smartsheet/Mutations/UpdateSurvey.ts");
/* harmony import */ var _Mutations_UpdateProjectValue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mutations/UpdateProjectValue */ "./src/api/projects/Smartsheet/Mutations/UpdateProjectValue.ts");
/* harmony import */ var _Mutations_UpdateProjectAddress__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Mutations/UpdateProjectAddress */ "./src/api/projects/Smartsheet/Mutations/UpdateProjectAddress.ts");
/* harmony import */ var _Mutations_UpdateMilestone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Mutations/UpdateMilestone */ "./src/api/projects/Smartsheet/Mutations/UpdateMilestone.ts");
/* harmony import */ var _Queries_GetMileStonesDetails__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Queries/GetMileStonesDetails */ "./src/api/projects/Smartsheet/Queries/GetMileStonesDetails.ts");
/* harmony import */ var _Mutations_UpdateProjectStatus__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Mutations/UpdateProjectStatus */ "./src/api/projects/Smartsheet/Mutations/UpdateProjectStatus.ts");
/* harmony import */ var _Mutations_WebhookCallBack__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Mutations/WebhookCallBack */ "./src/api/projects/Smartsheet/Mutations/WebhookCallBack.ts");
/* harmony import */ var _Mutations_UpdatePaymentChecklist__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Mutations/UpdatePaymentChecklist */ "./src/api/projects/Smartsheet/Mutations/UpdatePaymentChecklist.ts");











const smartSheetResolver = {
    Query: {
        getMileStoneDetails: async (parent, _args, context) => (0,_Queries_GetMileStonesDetails__WEBPACK_IMPORTED_MODULE_7__.getMileStoneDetails)(parent, _args, context),
    },
    Mutation: {
        createSmartSheet: async (parent, _args, context) => (0,_Mutations_CreateSmartsheet__WEBPACK_IMPORTED_MODULE_1__.createSmartSheet)(parent, _args, context),
        updateProjectValue: async (parent, _args, context) => (0,_Mutations_UpdateProjectValue__WEBPACK_IMPORTED_MODULE_4__.updateProjectValue)(parent, _args, context),
        updateProjectAddress: async (parent, _args, context) => (0,_Mutations_UpdateProjectAddress__WEBPACK_IMPORTED_MODULE_5__.updateProjectAddress)(parent, _args, context),
        updateMilestone: async (parent, _args, context) => (0,_Mutations_UpdateMilestone__WEBPACK_IMPORTED_MODULE_6__.updateMilestone)(parent, _args, context),
        updateDesignerEmail: async (parent, _args, context) => (0,_Mutations_UpdateDesigner__WEBPACK_IMPORTED_MODULE_2__.updateDesignerEmail)(parent, _args, context),
        updateSurvey: async (parent, _args, context) => (0,_Mutations_UpdateSurvey__WEBPACK_IMPORTED_MODULE_3__.updateSurvey)(parent, _args, context),
        updateProjectStatus: async (parent, _args, context) => (0,_Mutations_UpdateProjectStatus__WEBPACK_IMPORTED_MODULE_8__.updateProjectStatus)(parent, _args, context),
        webHookCallBack: async (parent, _args, context) => (0,_Mutations_WebhookCallBack__WEBPACK_IMPORTED_MODULE_9__.webHookCallBack)(parent, _args, context),
        updatePaymentChecklist: async (parent, _args, context) => (0,_Mutations_UpdatePaymentChecklist__WEBPACK_IMPORTED_MODULE_10__.updatePaymentChecklist)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
    JSON: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.GraphQLJSON,
};


/***/ }),

/***/ "./src/api/projects/Smartsheet/typedef.ts":
/*!************************************************!*\
  !*** ./src/api/projects/Smartsheet/typedef.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "smartSheetTypedef": () => (/* binding */ smartSheetTypedef)
/* harmony export */ });
const smartSheetTypedef = `

type CreateSheetResponse { 
    code:Int
    message: String
    sheetId : String
}
type Mutation{
    createSmartSheet(
        projectId : Int!,
        clientName : String!,
        clientId : String!,
        projectSignupValue : Float!,
        designerName : String!,
        designStudio : String!,
        salesOwner : String!,
        clientEmail : String,
        clientContact : String!,
        propertyName : String!,
        propertyAddress : String!,
        status : String!
    ): CreateSheetResponse

    updateDesignerEmail(
        smartSheetId : String!,
        designerEmail : String!
    ): SheetResponse

    updateSurvey(
        smartSheetId : String!,
        surveyExecutiveEmail : String!
    ): SheetResponse

    updateProjectValue(
        smartSheetId : String!,
        projectValue : Float!
    ): SheetResponse

    updateProjectAddress(
        smartSheetId : String!,
        projectAddress : String!
    ): SheetResponse
    
    updateMilestone(
        smartSheetId : String!,
        mileStoneName : String!,
        actualFinishDate : String!
    ): SheetResponse

    updateProjectStatus(
        smartSheetId : String!,
        projectStatus : String!,
        signupDate : String!
    ): SheetResponse

    webHookCallBack(
        body : JSON
    ): SheetResponse

    updatePaymentChecklist(
        smartSheetId : String!,
        mileStoneName : String!,
        actualFinishDate : String!
        actualStartDate : String!
    ): SheetResponse
}

type GetMileStoneResponse { 
    code:Int
    message: String
    data : JSON
}
type SheetResponse { 
    code:Int
    message: String
}

type Query {
    getMileStoneDetails(sheetId:String): GetMileStoneResponse
}
    scalar DateTime
    scalar JSON
`;


/***/ }),

/***/ "./src/api/projects/resolver.ts":
/*!**************************************!*\
  !*** ./src/api/projects/resolver.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "projectsResolver": () => (/* binding */ projectsResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_GetAllProject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/GetAllProject */ "./src/api/projects/Queries/GetAllProject.ts");
/* harmony import */ var _Queries_GetProjectById__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Queries/GetProjectById */ "./src/api/projects/Queries/GetProjectById.ts");
/* harmony import */ var _Mutations_AddProject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mutations/AddProject */ "./src/api/projects/Mutations/AddProject.ts");
/* harmony import */ var _Mutations_AddMilestoneFiles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mutations/AddMilestoneFiles */ "./src/api/projects/Mutations/AddMilestoneFiles.ts");
/* harmony import */ var _Queries_GetProjectCostBreakup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Queries/GetProjectCostBreakup */ "./src/api/projects/Queries/GetProjectCostBreakup.ts");
/* harmony import */ var _Queries_GetProjectsByFilter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Queries/GetProjectsByFilter */ "./src/api/projects/Queries/GetProjectsByFilter.ts");
/* harmony import */ var _Mutations_UpdateProject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Mutations/UpdateProject */ "./src/api/projects/Mutations/UpdateProject.ts");
/* harmony import */ var _Mutations_CompleteChecklistApi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Mutations/CompleteChecklistApi */ "./src/api/projects/Mutations/CompleteChecklistApi.ts");
/* harmony import */ var _Mutations_UpdatePaymentMilestones__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Mutations/UpdatePaymentMilestones */ "./src/api/projects/Mutations/UpdatePaymentMilestones.ts");
/* harmony import */ var _Queries_GetSubTaskForProject__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Queries/GetSubTaskForProject */ "./src/api/projects/Queries/GetSubTaskForProject.ts");
/* harmony import */ var _Queries_GetFilesForProject__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Queries/GetFilesForProject */ "./src/api/projects/Queries/GetFilesForProject.ts");
/* harmony import */ var _Queries_GetFileUrl__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Queries/GetFileUrl */ "./src/api/projects/Queries/GetFileUrl.ts");
/* harmony import */ var _Mutations_meetingSchedulerMilestone__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Mutations/meetingSchedulerMilestone */ "./src/api/projects/Mutations/meetingSchedulerMilestone.ts");
/* harmony import */ var _Mutations_UpdateFormFillMilestones__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Mutations/UpdateFormFillMilestones */ "./src/api/projects/Mutations/UpdateFormFillMilestones.ts");
/* harmony import */ var _Mutations_ShareFileWithCustomer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Mutations/ShareFileWithCustomer */ "./src/api/projects/Mutations/ShareFileWithCustomer.ts");
/* harmony import */ var _Mutations_CompleteMilestoneChecklist__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Mutations/CompleteMilestoneChecklist */ "./src/api/projects/Mutations/CompleteMilestoneChecklist.ts");
/* harmony import */ var _Queries_GetOldProject__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Queries/GetOldProject */ "./src/api/projects/Queries/GetOldProject.ts");


















const projectsResolver = {
    Query: {
        allProjects: async () => (0,_Queries_GetAllProject__WEBPACK_IMPORTED_MODULE_1__.getProjects)(),
        getProjectById: async (parent, _args, context) => (0,_Queries_GetProjectById__WEBPACK_IMPORTED_MODULE_2__.getProjectById)(parent, _args, context),
        getProjectCostBreakup: async (parent, _args, context) => (0,_Queries_GetProjectCostBreakup__WEBPACK_IMPORTED_MODULE_5__.getProjectCostBreakup)(parent, _args, context),
        getProjectsByFilter: async (parent, _args, context) => (0,_Queries_GetProjectsByFilter__WEBPACK_IMPORTED_MODULE_6__.getProjectsByFilter)(parent, _args, context),
        getSubTaskForProject: async (parent, _args, context) => (0,_Queries_GetSubTaskForProject__WEBPACK_IMPORTED_MODULE_10__.getSubTaskForProject)(parent, _args, context),
        getFiles: async (parent, _args, context) => (0,_Queries_GetFilesForProject__WEBPACK_IMPORTED_MODULE_11__.getFilesForProjects)(parent, _args, context),
        getFileUrl: async (parent, _args, context) => (0,_Queries_GetFileUrl__WEBPACK_IMPORTED_MODULE_12__.getFileUrl)(parent, _args, context),
        getOldProject: async (parent, _args, context) => (0,_Queries_GetOldProject__WEBPACK_IMPORTED_MODULE_17__.getOldProject)(parent, _args, context),
    },
    Mutation: {
        addProject: async (parent, _args, context) => (0,_Mutations_AddProject__WEBPACK_IMPORTED_MODULE_3__.addProject)(parent, _args, context),
        updateProjectApi: async (parent, _args, context) => (0,_Mutations_UpdateProject__WEBPACK_IMPORTED_MODULE_7__.updateProjectApi)(parent, _args, context),
        addMilestoneFiles: async (parent, _args, context) => (0,_Mutations_AddMilestoneFiles__WEBPACK_IMPORTED_MODULE_4__.addMilestoneFiles)(parent, _args, context),
        updatePaymentMilestones: async (parent, _args, context) => (0,_Mutations_UpdatePaymentMilestones__WEBPACK_IMPORTED_MODULE_9__.updatePaymentMilestones)(parent, _args, context),
        completeChecklistApi: async (parent, _args, context) => (0,_Mutations_CompleteChecklistApi__WEBPACK_IMPORTED_MODULE_8__.completeChecklistApi)(parent, _args, context),
        meetingSchedulerMilestone: async (parent, _args, context) => (0,_Mutations_meetingSchedulerMilestone__WEBPACK_IMPORTED_MODULE_13__.meetingSchedulerMilestone)(parent, _args, context),
        updateFormFillMilestones: async (parent, _args, context) => (0,_Mutations_UpdateFormFillMilestones__WEBPACK_IMPORTED_MODULE_14__.updateFormFillMilestones)(parent, _args, context),
        shareFileWithCustomer: async (parent, _args, context) => (0,_Mutations_ShareFileWithCustomer__WEBPACK_IMPORTED_MODULE_15__.shareFileWithCustomer)(parent, _args, context),
        completeMilestoneChecklist: async (parent, _args, context) => (0,_Mutations_CompleteMilestoneChecklist__WEBPACK_IMPORTED_MODULE_16__.completeMilestoneChecklist)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/projects/typedef.ts":
/*!*************************************!*\
  !*** ./src/api/projects/typedef.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "projectsTypedef": () => (/* binding */ projectsTypedef)
/* harmony export */ });
const projectsTypedef = `

type Projects {
    id : Int
    projectid : String
    projectname : String
    projectstatus : String
    projectvalue : Float
    createdate : DateTime
    updatedate : DateTime
    signupdate : DateTime
    customerid : Int
    designerid : Int
    salesmanagerid : Int
    chmid : Int
    surveyexecutiveid : Int
    projectmanagerid : Int
    designstudioid : Int
    modularbaseamount : Float
    modularvalue : Float
    modulardiscount : Float
    siteservicebaseamount : Float
    siteservicevalue : Float
    siteservicediscount : Float
    signupamount : Float
    signupstate : String
    experiencecenterid : Int
    cityid : Int
    clientid : String
    projectaddressid : Int
    cmmname : String
    expectedhandoverdate : DateTime
    currentmilestone : String
    projectphase : String
    hasdesigneraccepted : Boolean
    hasdesigerresponded : Boolean
    hometype : String
    initialsignupvalue : Float
    quoteid : Int
    projectrating : Int
    includepmfee : Boolean
    milestonetype : String
    odooid : String
    odoo_delivery_address_id : String
    isnewpaymentproject : Boolean
    opportunityid : String
    template : String
    milestones:JSON
    projectdecorvalue:Float
    decorvalue: Float
    addonvalue : Float
    totalprojectvalue : Float
    achievedrevenuevalue : Float
    projectmodularvalue :Float
    projectsiteservicesvalue :Float
    pendingamountvalue  : Float
    smartsheetid : String
    paymentrequests : JSON
    iscustomersignoffrequired :Boolean
    modular_collected_amount :Float
    site_services_collected_amount: Float
    isimosproject:Boolean
    valuebeforediscount:Float
    siteaddress:String
    haslift:Boolean
    hasfalseceiling:Boolean
    scopeforelectricalwork:Boolean
    projecttype:String
    tentativeprojectdurationaftersignoff:String
    scopeofwork:String
    specialfinishes:String
    siteserviceabsolutediscount: Int
    modularamountgst:Float
    siteserviceamountgst:Float
    modularabsolutediscount:Float
    modularpmfee:Float
    siteservicegst:Int
    siteservicepdflink:String
    modularamountgstvalue:Float
    sitepmfee:Float
    siteservicediscountvalue:Float
    quotelink:String
    proposalpdflink:String
    projectmanagername:String
    floorarea:Int
    imosrooms:[ImosRoom]
    projectHandOverDate:DateTime
    customer : Customer
    designer : Users
    salesmanager : Users
    chm : Users
    surveyexecutive : Users
    projectmanager : Users
    designstudio : Teams
    experiencecenter : ExperienceCenters
    city : Cities
}

type ImosRoom{
    imosOrdeNo:String
    roomUrl:String
}

input ImosRooms{
    imosOrdeNo:String
    roomUrl:String
}

input FormFillInputs{
    pmName:String,
    valueBeforeDiscount:Float
    projectHandOverDate:DateTime
    siteAddress:String
    isProjectIMOS:Boolean
    hasLift:Boolean
    hasFalseCeiling:Boolean
    scopeForElectricalWork:Boolean
    projectType:String
    tentativeProjectDurationAfterSignOff:String
    scopeOfWork:String
    specialFinishes:String
    dateTimeOfVisit:DateTime,
    floorArea:Int,
    imosRooms:[ImosRooms]
}

type Milestone{
    label:String
    payment_percentage:Int
    milestone_checklist:[MilestoneChecklist]
    autorequest:Boolean
    InvoicePercentage:Int
}

type MilestoneChecklist{
    checklist_string:String
    description:String
    required:Boolean
    is_checked:Boolean
    dateTime:DateTime
}

type Files{
    checklist_string:String
    description:String
    required:Boolean
    filekey:String
    fileurl:String
    uploadedby:String
    uploadedon:DateTime
    updatedon:DateTime
    approvalstatus:String
    created_at:String
    updated_at:String
    share_with_customer:Boolean
}

type Mutation{
    addProject(
        projectid : String!,
        projectname : String!,
        projectstatus : String!,
        projectvalue : Float!,
        createdate : DateTime,
        updatedate : DateTime,
        signupdate : DateTime,
        customerid : Int!,
        designerid : Int!,
        salesmanagerid : Int,
        chmid : Int,
        surveyexecutiveid : Int,
        projectmanagerid : Int,
        designstudioid : Int,
        modularbaseamount : Float,
        projectmodularvalue : Float,
        modulardiscount : Float,
        siteservicebaseamount : Float,
        siteservicevalue : Float,
        siteservicediscount : Float,
        signupamount : Float!,
        signupstate : String,
        experiencecenterid : Int,
        cityid : Int,
        projectaddressid : Int,
        cmmname : String,
        expectedhandoverdate : DateTime,
        currentmilestone : String,
        projectphase : String,
        hasdesigneraccepted : Boolean,
        hasdesigerresponded : Boolean,
        hometype : String,
        initialsignupvalue : Float,
        decorvalue : Float,
        quoteid : Int,
        projectrating : Int,
        includepmfee : Boolean,
        milestonetype : String,
        odooid : String,
        odoo_delivery_address_id : String,
        isnewpaymentproject : Boolean,
        opportunityid : String!,
        template : String,
        isimosproject: Boolean,
    ): projectsResponse

    updateProjectApi(
        id : Int,
        projectid : String,
        projectname : String,
        projectstatus : String,
        projectvalue : Float,
        createdate : DateTime,
        updatedate : DateTime,
        signupdate : DateTime,
        customerid : Int,
        designerid : Int,
        salesmanagerid : Int,
        chmid : Int,
        surveyexecutiveid : Int,
        projectmanagerid : Int,
        designstudioid : Int,
        modularbaseamount : Float,
        projectmodularvalue : Float,
        modulardiscount : Float,
        siteservicebaseamount : Float,
        siteservicevalue : Float,
        siteservicediscount : Float,
        signupamount : Float,
        signupstate : String,
        experiencecenterid : Int,
        cityid : Int,
        projectaddressid : Int,
        cmmname : String,
        expectedhandoverdate : DateTime,
        currentmilestone : String,
        projectphase : String,
        hasdesigneraccepted : Boolean,
        hasdesigerresponded : Boolean,
        hometype : String,
        initialsignupvalue : Float,
        decorvalue : Float,
        quoteid : Int,
        projectrating : Int,
        includepmfee : Boolean,
        milestonetype : String,
        odooid : String,
        odoo_delivery_address_id : String,
        isnewpaymentproject : Boolean,
        opportunityid : String,
        template : String
    ): projectsResponse

    meetingSchedulerMilestone(
        projectId: Int!,
        datetime: DateTime!,
        meetingScheduleType: String!,
        description: String,
        meetingType: String!
    ):meetingSchedulerResponse
    
    updatePaymentMilestones(
        projectId:Int!,
        paymentMilestoneName:String,
        projectValue:Float
    ):updateMilestonesResponse

    completeMilestoneChecklist(
        projectId:Int!,
        checkListName:String!
    ):updateMilestonesResponse

    completeChecklistApi(
        projectId: Int!,
    ):completeChecklistResponse

    addMilestoneFiles(
        projectid: Int!
        filename: String!
        filekey: String!
        fileurl: String!
        contenttype: String!
        uploadedby: String
        approvalstatus: String!
        comments: String
    ): addMilestoneFilesResponse

    updateFormFillMilestones(
        projectId:Int,
        formFillName:String,
        formFillData:FormFillInputs
    ):meetingSchedulerResponse

    shareFileWithCustomer(
        projectid: Int!,
        filename: String!,
        sharewithcustomer:Boolean!
    ): shareFileWithCustomerResponse
}

input Filter{
    designers: [Int],
    studios: [Int],
    cities: [Int],
    ecs: [Int],
    status: [String],
    currentStage: [String],
    filterBy : [String],
    fromDate: DateTime,
    toDate: DateTime
}
input Sorting{
    sortBy : String,
    order : String
}

type completeChecklistResponse{
    code: Int!,
    message: String!
    milestonename:String
}

type meetingSchedulerResponse{
    code: Int!,
    message: String!
}

type updateMilestonesResponse{
    code:Int!,
    message:String!
}

type projectsResponse { 
    code:Int
    message: String
    data: Projects
    surveyExecutives: [Users]
    pamProfiles: [Users]
}
type addMilestoneFilesResponse {
    code: Int
    message: String
}

type projectcostbreakupResponse {
        message:String
        code:Int
        ProjectValue:Float
        CollectedAmount:Float
        modularbaseamount:Float
        modulardiscount:Int
        modularMilestone:JSON
        siteservicebaseamount:Float
        siteservicediscount:Int
        siteServiceMilestone:JSON
        modularinclusivegst:Float
        siteserviceinclusivegst:Float
        modularCollectedAmount:Float
        siteServicesCollectedAmount:Float
        modularpdf:String
        siteservicespdf:String
        pendingamountvalue:Float
        Projectstatus:String
        projectmodularvalue:Float
        projectsiteservicevalue:Float
        modularinvoicedamount:Float
        siteserviceinvoicedamount:Float
}

type  getOldprojectResponse{
    message:String
    code:Int
    modularamount:Float
    sitesserviceamount:Float
    modular_collected_amount:Float
    site_services_collected_amount: Float
    collectedamount:Float

}
type getSubTasksForProjectResponse{
    code:Int
    message:String
    data:[Milestone]
}

type getFilesResponse{
    code:Int
    message:String
    data:[Files]
}

type allProjectsResponse{ 
    code:Int
    message:String
    data:[Projects!]!
}

type File {
    filekey: String
    contenttype: String
    location: String
}
type getFileUrlResponse{
    code: Int,
    message: String,
    data: File
}
type shareFileWithCustomerResponse{
    code: Int,
    message: String
}

type Query {
    allProjects:allProjectsResponse
    getProjectById(id:Int): projectsResponse
    getProjectByUser(userId:Int, searchText:String, filter:Filter, sorting:Sorting): projectsResponse
    getProjectCostBreakup(id:Int):projectcostbreakupResponse
    getProjectsByFilter(searchText:String, filter:Filter, sorting:Sorting): allProjectsResponse
    getSubTaskForProject(projectid:Int):getSubTasksForProjectResponse
    getFiles(id:Int):getFilesResponse
    getFileUrl(attachment:JSON):getFileUrlResponse
    getOldProject(id:Int):getOldprojectResponse
}
    scalar DateTime
`;


/***/ }),

/***/ "./src/api/quotes/Mutations/commonFunctions.ts":
/*!*****************************************************!*\
  !*** ./src/api/quotes/Mutations/commonFunctions.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addPdfToMilestone": () => (/* binding */ addPdfToMilestone)
/* harmony export */ });
/* harmony import */ var _projects_Mutations_AddMilestoneFiles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../projects/Mutations/AddMilestoneFiles */ "./src/api/projects/Mutations/AddMilestoneFiles.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");


const addPdfToMilestone = async (_project, _checklistType, _file) => {
    var _a, _b;
    const filesChecklistData = (_b = (_a = _project === null || _project === void 0 ? void 0 : _project.milestones) === null || _a === void 0 ? void 0 : _a.attributes) === null || _b === void 0 ? void 0 : _b.files_checklist;
    filesChecklistData.forEach((val) => {
        if (val.length !== 0 && (val === null || val === void 0 ? void 0 : val.checklist_string) === _checklistType) {
            val.filekey = _file.key;
            val.fileurl = _file.location;
            val.contentType = _file.contentType;
            const res = (0,_projects_Mutations_AddMilestoneFiles__WEBPACK_IMPORTED_MODULE_0__.getApprovalStatus)(val.approval_from_customer);
            val.approvalstatus = res.status;
            val.sentondate = res.sentOnDate;
            val.uploadedon = new Date();
            val.created_at = new Date();
            val.updated_at = new Date();
        }
    });
    _project.milestones.attributes.files_checklist = filesChecklistData;
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_projects.update({
        where: { id: _project.id },
        data: { milestones: _project.milestones },
    });
};


/***/ }),

/***/ "./src/api/quotes/Mutations/postSales/deleteRoomwise.ts":
/*!**************************************************************!*\
  !*** ./src/api/quotes/Mutations/postSales/deleteRoomwise.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deleteRoomwise": () => (/* binding */ deleteRoomwise)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../domain/enumerations/RoomTypesEnums */ "./src/domain/enumerations/RoomTypesEnums.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");




const deleteRoomwise = async (_root, args, _context) => {
    try {
        const roomName = args.roomType;
        const quoteData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.findFirst({
            where: {
                id: args.ddQuoteId,
            },
        });
        if (!quoteData) {
            return {
                code: 400,
                message: "Quote does not exist",
            };
        }
        const quoteDataObj = {};
        const projectMeta = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: {
                quoteid: args.ddQuoteId,
            },
        });
        if (!projectMeta) {
            return {
                code: 400,
                message: "Project not found",
            };
        }
        const city = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findFirst({
            where: { id: projectMeta === null || projectMeta === void 0 ? void 0 : projectMeta.cityid },
        });
        if (!city) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "City not found in project");
        }
        const projectMetaObj = {};
        const customerMeta = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: {
                customerid: projectMeta.customerid,
            },
        });
        if (!customerMeta) {
            return {
                code: 400,
                message: "Customer not found",
            };
        }
        const arrayRemoveRoom = [];
        const _roomList = quoteData.roomlist || [];
        if (_roomList.length === 0) {
            return {
                code: 400,
                message: "Room doesn't exist",
            };
        }
        let roomsExist = [];
        _roomList.forEach((element) => {
            roomsExist.push(element.roomName);
        });
        if (roomsExist.includes(roomName)) {
            _roomList.forEach((element) => {
                if (element.roomName !== roomName) {
                    arrayRemoveRoom.push(element);
                }
            });
        }
        else {
            return {
                code: 400,
                message: "Room doesn't exist",
            };
        }
        let roomXmlVal;
        const deleteArray = [], roomsIds = quoteData.rooms_ids || [];
        if (roomsIds.length !== 0) {
            for (let i = roomsIds.length - 1; i >= 0; i--) {
                if (Object.keys(roomsIds[i])[0].toLowerCase() !== roomName.toLowerCase()) {
                    deleteArray.push(roomsIds[i]);
                }
                else {
                    roomXmlVal = Object.values(roomsIds[i])[0];
                }
            }
            quoteDataObj["rooms_ids"] = deleteArray;
        }
        else {
            quoteDataObj["rooms_ids"] = [];
        }
        quoteDataObj["roomlist"] = arrayRemoveRoom;
        const currentQuoteVal = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.update({
            where: {
                id: args.ddQuoteId,
            },
            data: quoteDataObj,
        });
        const currentQuoteValObj = {};
        let sumModular = 0, sumSite = 0, roomElement = [];
        const roomsList = currentQuoteVal.roomlist || [];
        if (roomsList.length !== 0) {
            roomElement = roomsList;
            roomElement.forEach((element) => {
                if (!_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_1__.SITE_SERVICE.includes(element.roomName.toLowerCase())) {
                    sumModular += +element.roomPrice;
                }
                else {
                    sumSite += +element.roomPrice;
                }
            });
        }
        currentQuoteValObj["modularvalue"] = sumModular;
        currentQuoteValObj["siteservice"] = sumSite;
        if (sumModular === 0) {
            currentQuoteValObj["modulardiscount"] = projectMetaObj["modulardiscount"] = 0;
        }
        else if (sumSite === 0) {
            currentQuoteValObj["siteservicediscount"] = projectMetaObj["siteservicediscount"] = 0;
        }
        const responseObj = {};
        let pmFeeModular = 0, pmFeeSite = 0, siteFinal = 0, modularFinal = 0;
        if (!_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_1__.SITE_SERVICE.includes(roomName.toLowerCase()) || sumModular) {
            const absoluteDiscount = currentQuoteVal.modularabsolutediscount || 0;
            const discountAmount = (sumModular * currentQuoteVal.modulardiscount) / 100;
            let afterDiscount = sumModular - discountAmount - absoluteDiscount;
            if (city) {
                if (city.includepmfee && projectMeta.includepmfee) {
                    pmFeeModular = (currentQuoteVal.modularvalue * 7) / 100;
                    projectMetaObj["modularpmfee"] = pmFeeModular;
                    afterDiscount += pmFeeModular;
                }
            }
            const gst = (afterDiscount * 18) / 100;
            const finalTotal = afterDiscount + +gst;
            modularFinal = finalTotal;
            projectMetaObj["projectmodularvalue"] =
                parseFloat(finalTotal.toFixed(2)) || 0;
            projectMetaObj["modularbaseamount"] =
                responseObj.modularValue =
                    responseObj.modularBaseAmount =
                        parseFloat(sumModular.toFixed(2)) || 0;
            responseObj.modularTotalTax = parseFloat(gst.toFixed(2)) || 0;
            responseObj.modularTotalAmount = parseFloat(finalTotal.toFixed(2)) || 0;
            responseObj.modularDiscountedAmount =
                parseFloat(discountAmount.toFixed(2)) || 0;
            responseObj.modularDiscountValue = currentQuoteVal.modulardiscount || 0;
        }
        if (_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_1__.SITE_SERVICE.includes(roomName.toLowerCase()) || sumSite) {
            const absoluteDiscount = currentQuoteVal.siteserviceabsolutediscount || 0;
            const discountAmount = (sumSite * currentQuoteVal.siteservicediscount) / 100;
            let afterDiscount = sumSite - discountAmount - absoluteDiscount;
            if (city) {
                if (city.includepmfee && projectMeta.includepmfee) {
                    pmFeeSite = (currentQuoteVal.siteservice * 7) / 100;
                    projectMetaObj["sitepmfee"] = pmFeeSite;
                    afterDiscount += pmFeeSite;
                }
            }
            const gst = (afterDiscount * 18) / 100;
            const finalTotal = afterDiscount + +gst;
            siteFinal = finalTotal;
            projectMetaObj["projectsiteservicesvalue"] =
                parseFloat(finalTotal.toFixed(2)) || 0;
            projectMetaObj["siteservicebaseamount"] =
                responseObj.siteServiceValue =
                    responseObj.siteServiceBaseAmount =
                        parseFloat(sumSite.toFixed(2)) || 0;
            responseObj.siteServiceTotalTax = parseFloat(gst.toFixed(2)) || 0;
            responseObj.siteServiceTotalAmount =
                parseFloat(finalTotal.toFixed(2)) || 0;
            responseObj.siteServiceDiscountedAmount =
                parseFloat(discountAmount.toFixed(2)) || 0;
            responseObj.siteServiceDiscountValue =
                currentQuoteVal.siteservicediscount || 0;
        }
        projectMetaObj["totalprojectvalue"] = modularFinal + siteFinal;
        projectMetaObj["achievedrevenuevalue"] =
            projectMeta.modular_collected_amount +
                projectMeta.site_services_collected_amount;
        projectMetaObj["pendingamountvalue"] =
            modularFinal +
                siteFinal -
                projectMeta.modular_collected_amount +
                projectMeta.site_services_collected_amount;
        const updatedProjectMeta = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            where: { id: projectMeta.id },
            data: projectMetaObj,
        });
        responseObj.totalProjectValue = updatedProjectMeta.totalprojectvalue;
        responseObj.achievedRevenueValue = updatedProjectMeta.achievedrevenuevalue;
        responseObj.pendingAmountValue = updatedProjectMeta.pendingamountvalue;
        const updatedQuoteData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.update({
            where: { id: args.ddQuoteId },
            data: currentQuoteValObj,
        });
        const roomIds = updatedQuoteData.rooms_ids || [];
        if (roomIds.length !== 0 && roomXmlVal) {
            const attachmentObj = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findFirst({
                where: {
                    location: roomXmlVal,
                },
            });
            removeFromBlobAndDB(attachmentObj);
        }
        if (_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_1__.SITE_SERVICE.includes(roomName.toLowerCase())) {
            await removePdfFilesFromSchemas(args.ddQuoteId, "siteservicexml", projectMeta.id, "siteservicePdf", "Addon Costing");
        }
        else {
            await removePdfFilesFromSchemas(args.ddQuoteId, "modularxml", projectMeta.id, "modularPdf", "Latest BOQ");
        }
        return {
            code: updatedQuoteData ? 200 : 400,
            message: updatedQuoteData
                ? "Room deleted successfully"
                : "Room does not exist",
            data: updatedQuoteData ? responseObj : "",
        };
        async function removePdfFilesFromSchemas(quoteId, location, _projectId, _key, _name) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.update({
                where: {
                    id: quoteId,
                },
                data: {
                    [location]: null,
                },
            });
        }
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(500, error);
    }
};
const removeFromBlobAndDB = async (attachmentObj) => {
    if (attachmentObj) {
        const attachmentFileKey = attachmentObj.filekey;
        const awsDeleteRes = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.deleteBlob)(attachmentFileKey);
        console.log("awsDeleteRes ====> ", awsDeleteRes);
        if (awsDeleteRes) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments["delete"]({
                where: { id: attachmentObj.id },
            });
        }
    }
};


/***/ }),

/***/ "./src/api/quotes/Mutations/postSales/postRoomWiseXml.ts":
/*!***************************************************************!*\
  !*** ./src/api/quotes/Mutations/postSales/postRoomWiseXml.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PostRoomwiseXmlApi": () => (/* binding */ PostRoomwiseXmlApi)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xml-js */ "xml-js");
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xml_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../domain/enumerations/RoomTypesEnums */ "./src/domain/enumerations/RoomTypesEnums.ts");





const PostRoomwiseXmlApi = async (_root, args, _context) => {
    try {
        const file = {
            key: args.fileName,
            contentType: args.contentType,
            base64: args.base64File,
        };
        let _commonRoomList = [];
        const attachmentObj = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.UploadFileOnS3)(file);
        const xml = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.getBuffer)(attachmentObj.filekey);
        const result = await xml_js__WEBPACK_IMPORTED_MODULE_1___default().xml2json(xml, { compact: true, spaces: 4 });
        const mainObj = JSON.parse(result);
        const clientName = mainObj.XML.Order.Head.CONTACT_ADDRESS1._text;
        if (!clientName) {
            await removeFromBlobAndDB(attachmentObj);
            return {
                code: 400,
                message: "Customer name not found. Please upload appropriate file!",
            };
        }
        const builderList = mainObj.XML.Order.BuilderList.Set;
        const commonAmount = mainObj.XML.Order.Head.ORDER_PRICE_INFO3._text;
        const roomsArr = (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.getRoomNames)(builderList);
        const projectMeta = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: {
                id: args.projectId,
            },
        });
        if (!projectMeta) {
            await removeFromBlobAndDB(attachmentObj);
            return {
                code: 400,
                message: "Project does not exist",
            };
        }
        const city = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findFirst({
            where: { id: projectMeta === null || projectMeta === void 0 ? void 0 : projectMeta.cityid },
        });
        if (!city) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "City not found in project");
        }
        const customerMeta = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: {
                customerid: projectMeta === null || projectMeta === void 0 ? void 0 : projectMeta.customerid,
            },
        });
        if (!customerMeta) {
            await removeFromBlobAndDB(attachmentObj);
            return {
                code: 400,
                message: "Customer does not exist",
            };
        }
        const firstName = (customerMeta === null || customerMeta === void 0 ? void 0 : customerMeta.firstname) ? customerMeta.firstname : "";
        const lastname = (customerMeta === null || customerMeta === void 0 ? void 0 : customerMeta.lastname) ? customerMeta.lastname : "";
        const customerName = `${firstName} ${lastname}`;
        if (customerName && clientName !== customerName.trim()) {
            await removeFromBlobAndDB(attachmentObj);
            return {
                code: 400,
                message: "Customer name did not match. Please upload appropriate file.",
            };
        }
        const updateQuoteProps = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.findFirst({
            where: {
                id: projectMeta.quoteid,
            },
        });
        if (!updateQuoteProps) {
            await removeFromBlobAndDB(attachmentObj);
            return {
                code: 400,
                message: "Quote does not exist",
            };
        }
        const updateQuotePropsObj = {};
        const roomName = roomsArr[0];
        const roomList = updateQuoteProps.roomlist || [];
        if (roomList.length !== 0) {
            roomList.forEach((element) => {
                if (roomName.toLowerCase() === element.roomName.toLowerCase() ||
                    (_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__.SITE_SERVICE.includes(roomName.toLowerCase()) &&
                        _domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__.SITE_SERVICE.includes(element.roomName.toLowerCase()))) {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "Oops! room name already exists. Please delete existing room to add new.");
                }
            });
        }
        _commonRoomList = (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.getRoomListArrayFromXmlData)(mainObj, _commonRoomList);
        let roomElement = [], roomsIds = [];
        if (roomList.length !== 0) {
            roomElement = roomList;
        }
        if (!roomList.includes(roomName)) {
            roomElement.push(_commonRoomList[0]);
        }
        const roomObj = {
            [roomName]: attachmentObj.location,
        };
        roomsIds = updateQuoteProps.rooms_ids
            ? updateQuoteProps.rooms_ids
            : [];
        roomsIds.push(roomObj);
        updateQuotePropsObj["rooms_ids"] = roomsIds;
        updateQuotePropsObj["roomlist"] = roomElement;
        let sumModular = 0, sumSite = 0;
        roomElement.forEach((element) => {
            if (!_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__.SITE_SERVICE.includes(element.roomName.toLowerCase())) {
                sumModular += +element.roomPrice;
            }
            else {
                sumSite += +element.roomPrice;
            }
        });
        if (_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__.SITE_SERVICE.includes(roomName.toLowerCase())) {
            sumSite = parseInt(commonAmount);
        }
        updateQuotePropsObj["modularvalue"] = sumModular;
        updateQuotePropsObj["siteservice"] = sumSite;
        const updatedResponse = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.update({
            where: { id: updateQuoteProps.id },
            data: updateQuotePropsObj,
        });
        const responseObj = {};
        const projectMetaObj = {};
        let pmFeeModular = 0, pmFeeSite = 0, siteFinal = 0, modularFinal = 0;
        if (!_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__.SITE_SERVICE.includes(roomName.toLowerCase()) || sumModular) {
            const absoluteDiscount = updatedResponse.modularabsolutediscount || 0;
            const discountAmount = (sumModular * +updatedResponse.modulardiscount) / 100;
            let afterDiscount = sumModular - discountAmount - absoluteDiscount;
            if (city) {
                if (city.includepmfee && projectMeta.includepmfee) {
                    pmFeeModular = (updatedResponse.modularvalue * 7) / 100;
                    projectMetaObj["modularpmfee"] = pmFeeModular;
                    afterDiscount += pmFeeModular;
                }
            }
            const gst = (afterDiscount * 18) / 100;
            const finalTotal = afterDiscount + +gst;
            modularFinal = finalTotal;
            projectMetaObj["projectmodularvalue"] =
                parseFloat(finalTotal.toFixed(2)) || 0;
            projectMetaObj["modulardiscount"] = updatedResponse.modulardiscount || 0;
            projectMetaObj["modularbaseamount"] =
                parseFloat(sumModular.toFixed(2)) || 0;
            responseObj.modularValue = responseObj.modularBaseAmount =
                parseFloat(sumModular.toFixed(2)) || 0;
            projectMetaObj["modularabsolutediscount"] = absoluteDiscount;
            responseObj.modularTotalTax = parseFloat(gst.toFixed(2)) || 0;
            responseObj.modularTotalAmount = parseFloat(finalTotal.toFixed(2)) || 0;
            responseObj.modularDiscountedAmount =
                parseFloat(discountAmount.toFixed(2)) || 0;
            responseObj.attachment = attachmentObj.location;
            responseObj.filekey = attachmentObj.filekey;
            responseObj.customerName = clientName;
            responseObj.modularDiscountValue = updatedResponse.modulardiscount || 0;
            responseObj.modularFixedDiscount = absoluteDiscount;
        }
        if (_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__.SITE_SERVICE.includes(roomName.toLowerCase()) || sumSite) {
            const absoluteDiscount = updatedResponse.siteserviceabsolutediscount || 0;
            const discountAmount = (sumSite * +updatedResponse.siteservicediscount) / 100;
            let afterDiscount = sumSite - discountAmount - absoluteDiscount;
            if (city) {
                if (city.includepmfee && projectMeta.includepmfee) {
                    pmFeeSite = (updatedResponse.siteservice * 7) / 100;
                    projectMetaObj["sitepmfee"] = pmFeeSite;
                    afterDiscount += pmFeeSite;
                }
            }
            const gst = (afterDiscount * 18) / 100;
            const finalTotal = afterDiscount + +gst;
            siteFinal = finalTotal;
            console.log(finalTotal);
            projectMetaObj["projectsiteservicesvalue"] =
                parseFloat(finalTotal.toFixed(2)) || 0;
            projectMetaObj["siteservicediscount"] =
                updatedResponse.siteservicediscount || 0;
            projectMetaObj["siteservicebaseamount"] =
                parseFloat(sumSite.toFixed(2)) || 0;
            responseObj.siteServiceValue = responseObj.siteServiceBaseAmount =
                parseFloat(sumSite.toFixed(2)) || 0;
            projectMetaObj["siteserviceabsolutediscount"] = absoluteDiscount;
            responseObj.siteServiceTotalTax = parseFloat(gst.toFixed(2)) || 0;
            responseObj.siteServiceTotalAmount =
                parseFloat(finalTotal.toFixed(2)) || 0;
            responseObj.siteServiceDiscountedAmount =
                parseFloat(discountAmount.toFixed(2)) || 0;
            responseObj.attachment = attachmentObj.location;
            responseObj.filekey = attachmentObj.filekey;
            responseObj.customerName = clientName;
            responseObj.siteServiceDiscountValue =
                updatedResponse.siteservicediscount || 0;
            responseObj.siteServiceFixedDiscount = absoluteDiscount;
        }
        projectMetaObj["totalprojectvalue"] = modularFinal + siteFinal;
        projectMetaObj["achievedrevenuevalue"] =
            projectMeta.modular_collected_amount +
                projectMeta.site_services_collected_amount;
        projectMetaObj["pendingamountvalue"] =
            modularFinal +
                siteFinal -
                projectMeta.modular_collected_amount +
                projectMeta.site_services_collected_amount;
        const updatedProjectMeta = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            where: {
                id: args.projectId,
            },
            data: projectMetaObj,
        });
        responseObj.totalProjectValue = updatedProjectMeta.totalprojectvalue;
        responseObj.achievedRevenueValue = updatedProjectMeta.achievedrevenuevalue;
        responseObj.pendingAmountValue = updatedProjectMeta.pendingamountvalue;
        return {
            code: 200,
            message: "Success",
            data: responseObj,
        };
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};
const removeFromBlobAndDB = async (attachmentObj) => {
    if (attachmentObj) {
        const attachmentFileKey = attachmentObj.filekey;
        const awsDeleteRes = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.deleteBlob)(attachmentFileKey);
        if (awsDeleteRes) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments["delete"]({
                where: { id: attachmentObj.id },
            });
        }
    }
};


/***/ }),

/***/ "./src/api/quotes/Mutations/postSales/updateDiscountGeneratePdf.ts":
/*!*************************************************************************!*\
  !*** ./src/api/quotes/Mutations/postSales/updateDiscountGeneratePdf.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateDiscountGeneratePdf": () => (/* binding */ updateDiscountGeneratePdf)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xml-js */ "xml-js");
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xml_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/enumerations/RoomTypesEnums */ "./src/domain/enumerations/RoomTypesEnums.ts");
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../commonFunctions */ "./src/api/quotes/Mutations/commonFunctions.ts");







const updateDiscountGeneratePdf = async (_root, args, _context) => {
    try {
        const projectMeta = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: {
                id: args.projectId,
            },
        });
        if (!projectMeta) {
            return {
                code: 400,
                message: "Project does not exist",
            };
        }
        const projectMetaObj = {};
        const resp = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.findFirst({
            where: { id: projectMeta.quoteid },
        });
        if (!resp) {
            return {
                code: 400,
                message: "Quote does not exist",
            };
        }
        const respObj = {};
        const roomIds = resp.rooms_ids || [];
        if (roomIds.length === 0) {
            return {
                code: 400,
                message: "Please upload xml to generate pdf",
            };
        }
        const attachmentKey = Object.keys(roomIds[0])[0];
        const attachmentVal = Object.values(roomIds[0])[0];
        if (!attachmentKey) {
            return {
                code: 400,
                message: "Please upload xml to generate pdf",
            };
        }
        const attachmentObj = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findFirst({
            where: {
                location: attachmentVal,
            },
        });
        if (!attachmentObj) {
            return {
                code: 400,
                message: "Attachment not found",
            };
        }
        const customerMeta = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
            where: {
                customerid: projectMeta.customerid,
            },
        });
        if (!customerMeta) {
            return {
                code: 400,
                message: "Customer does not exist",
            };
        }
        const xml = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_4__.getBuffer)(attachmentObj.filekey);
        const result = await xml_js__WEBPACK_IMPORTED_MODULE_1___default().xml2json(xml, { compact: true, spaces: 4 });
        const mainObj = JSON.parse(result);
        const clientId = projectMeta.clientid || projectMeta.projectid;
        const customerName = mainObj.XML.Order.Head.CONTACT_ADDRESS1._text
            ? mainObj.XML.Order.Head.CONTACT_ADDRESS1._text
            : customerMeta.firstname.trim() + customerMeta.lastname.trim();
        const pdfName = `${clientId}_${customerName}`;
        let _sitePdf, _roomsPdf, pmFeeModular = 0, pmFeeSite = 0, siteFinal = 0, modularFinal = 0;
        const city = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findFirst({
            where: { id: projectMeta === null || projectMeta === void 0 ? void 0 : projectMeta.cityid },
        });
        if (!city) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "City not found in project");
        }
        if (resp.siteservice &&
            resp.siteservice !== 0 &&
            (args.siteServiceDiscount || args.siteServiceDiscount === 0)) {
            const absoluteDiscount = resp.siteserviceabsolutediscount || 0;
            respObj["siteservicediscount"] = args.siteServiceDiscount;
            const discountAmount = (resp.siteservice * args.siteServiceDiscount) / 100;
            let afterDiscount = resp.siteservice - discountAmount - absoluteDiscount;
            if (city.includepmfee && projectMeta.includepmfee) {
                pmFeeSite = (resp.siteservice * 7) / 100;
                projectMetaObj["sitepmfee"] = pmFeeSite;
                afterDiscount += pmFeeSite;
            }
            const gst = (afterDiscount * 18) / 100;
            const finalTotal = afterDiscount + +gst;
            siteFinal = finalTotal;
            projectMetaObj["siteservicediscount"] = args.siteServiceDiscount;
            projectMetaObj["projectsiteservicesvalue"] =
                parseFloat(finalTotal.toFixed(2)) || 0;
            projectMetaObj["siteserviceabsolutediscount"] = absoluteDiscount;
            const _siteRoom = [], _siteName = `${pdfName}site_myQuote.pdf`, roomlist = resp.roomlist || [];
            roomlist.forEach((element) => {
                if (_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_3__.SITE_SERVICE.includes(element.roomName.toLowerCase())) {
                    _siteRoom.push(element);
                }
            });
            const siteServiceXmlObj = {
                pdfName: _siteName,
                projectId: projectMeta.id,
                parsedData: mainObj,
                roomsArray: _siteRoom,
                discount: args.siteServiceDiscount || 0,
                absoluteDiscount: absoluteDiscount || 0,
                opportunityId: args.opportunityId,
                isPmFeeIncluded: projectMeta.includepmfee,
                cityPmFee: city.includepmfee,
                clientOrProjectName: projectMeta.projectname,
            };
            _sitePdf = await XmlToPdf(siteServiceXmlObj);
            respObj["siteservicepdflocation"] = projectMetaObj["siteservicepdflink"] =
                _sitePdf.s3Location;
            const urlIntoMilestone = {
                filekey: _siteName,
                location: _sitePdf.s3Location,
                contenttype: "application/pdf",
            };
            (0,_commonFunctions__WEBPACK_IMPORTED_MODULE_6__.addPdfToMilestone)(projectMeta, "Site Services Quotation", urlIntoMilestone);
        }
        if (resp.modularvalue &&
            resp.modularvalue !== 0 &&
            (args.modularDiscount || args.modularDiscount === 0)) {
            const absoluteDiscount = resp.modularabsolutediscount || 0;
            respObj["modulardiscount"] = args.modularDiscount || 0;
            const discountAmount = (resp.modularvalue * args.modularDiscount) / 100;
            let afterDiscount = resp.modularvalue - discountAmount - absoluteDiscount;
            if (city.includepmfee && projectMeta.includepmfee) {
                pmFeeModular = (resp.modularvalue * 7) / 100;
                projectMetaObj["modularpmfee"] = pmFeeModular;
                afterDiscount += pmFeeModular;
            }
            const gst = (afterDiscount * 18) / 100;
            const finalTotal = afterDiscount + +gst;
            modularFinal = finalTotal;
            projectMetaObj["modulardiscount"] = args.modularDiscount || 0;
            projectMetaObj["projectmodularvalue"] =
                parseFloat(finalTotal.toFixed(2)) || 0;
            projectMetaObj["modularabsolutediscount"] = absoluteDiscount;
            const _roomList = [], roomslist = resp.roomlist || [], _modularName = `${pdfName}modular_myQuote.pdf`;
            roomslist.forEach((element) => {
                if (!_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_3__.SITE_SERVICE.includes(element.roomName.toLowerCase())) {
                    _roomList.push(element);
                }
            });
            const modularXmlObj = {
                pdfName: _modularName,
                parsedData: mainObj,
                projectId: projectMeta.id,
                roomsArray: _roomList,
                discount: args.modularDiscount || 0,
                name: _modularName,
                absoluteDiscount: absoluteDiscount || 0,
                opportunityId: args.opportunityId,
                isPmFeeIncluded: projectMeta.includepmfee,
                cityPmFee: city.includepmfee,
                clientOrProjectName: projectMeta.projectname,
            };
            _roomsPdf = await XmlToPdf(modularXmlObj);
            respObj["modularpdflocation"] = projectMetaObj["quotelink"] =
                _roomsPdf.s3Location;
            const urlIntoMilestone = {
                filekey: _modularName,
                location: _roomsPdf.s3Location,
                contenttype: "application/pdf",
            };
            (0,_commonFunctions__WEBPACK_IMPORTED_MODULE_6__.addPdfToMilestone)(projectMeta, "Modular Quotation", urlIntoMilestone);
        }
        projectMetaObj["totalprojectvalue"] = modularFinal + siteFinal;
        const savedProjectData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            where: { id: args.projectId },
            data: projectMetaObj,
        });
        const quoteResponse = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.update({
            where: { id: projectMeta.quoteid },
            data: respObj,
        });
        const response = {
            projectModularValue: (savedProjectData === null || savedProjectData === void 0 ? void 0 : savedProjectData.projectmodularvalue) || 0,
            projectSiteServicesValue: (savedProjectData === null || savedProjectData === void 0 ? void 0 : savedProjectData.projectsiteservicesvalue) || 0,
            totalProjectValue: parseFloat((modularFinal + siteFinal).toFixed(2)),
            achievedRevenue: parseFloat(savedProjectData.achievedrevenuevalue.toFixed(2)),
            pendingAmount: parseFloat(savedProjectData.pendingamountvalue.toFixed(2)),
            isImosProject: true,
            id: projectMeta === null || projectMeta === void 0 ? void 0 : projectMeta.id,
            modularDiscount: args.modularDiscount || 0,
            civilDiscount: args.siteServiceDiscount || 0,
            modularPdfLocation: (quoteResponse === null || quoteResponse === void 0 ? void 0 : quoteResponse.modularpdflocation)
                ? quoteResponse === null || quoteResponse === void 0 ? void 0 : quoteResponse.modularpdflocation
                : "",
            siteServicePdfLocation: (quoteResponse === null || quoteResponse === void 0 ? void 0 : quoteResponse.siteservicepdflocation)
                ? quoteResponse === null || quoteResponse === void 0 ? void 0 : quoteResponse.siteservicepdflocation
                : "",
        };
        return {
            code: 200,
            message: "Project details updated successfully!",
            data: response,
        };
        async function XmlToPdf(xmlObj) {
            var _a, _b;
            const { roomsArray } = xmlObj;
            const data = await superagent__WEBPACK_IMPORTED_MODULE_5___default().put(`${process.env.PDFGENERATE}/generateProposalPdf`)
                .send(xmlObj)
                .timeout(180000)
                .set("Content-Type", "application/json");
            return {
                roomList: roomsArray,
                s3Location: (_b = (_a = data === null || data === void 0 ? void 0 : data._body) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.Location,
            };
        }
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/quotes/Mutations/postSales/updateProjectCommercial.ts":
/*!***********************************************************************!*\
  !*** ./src/api/quotes/Mutations/postSales/updateProjectCommercial.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateProjectCommercial": () => (/* binding */ updateProjectCommercial)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _commonFunctions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../commonFunctions */ "./src/api/quotes/Mutations/commonFunctions.ts");




const updateProjectCommercial = async (_root, args, _context) => {
    try {
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_2__.authenticate)(_context, "DD");
        const id = args.projectId;
        const adminErrorMessage = "Payment milestones not found. Please contact administrator";
        const project = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findFirst({
            where: { id: id },
        });
        if (!project) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, "Invalid Project ID");
        }
        const projectUpdateModel = {};
        const newProjectModularValue = Math.floor(args.projectModularValue);
        const newSiteServiceValue = Math.floor(Number(args.projectSiteServicesValue));
        const isProjectModularValueChanged = Number(newProjectModularValue) !==
            Math.floor(Number(project.projectmodularvalue));
        const isSiteServiceValueChanged = newSiteServiceValue !==
            Math.floor(Number(project.projectsiteservicesvalue));
        if (!project.isnewpaymentproject) {
            const paymentMilestones = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.findMany({
                where: {
                    projectid: project.id,
                },
            });
            if (!paymentMilestones || paymentMilestones.length === 0) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, adminErrorMessage);
            }
            console.log(paymentMilestones);
            let acheived = 0;
            paymentMilestones.forEach((element) => {
                acheived += element.amountpaid ? element.amountpaid : 0;
            });
            projectUpdateModel.pendingamountvalue =
                newProjectModularValue + newSiteServiceValue - acheived;
            projectUpdateModel.achievedrevenuevalue = acheived;
            let milestone5Percent = null;
            let milestone15Percent = null;
            let milestone35Percent = null;
            let milestone45Percent = null;
            if ((isSiteServiceValueChanged || isProjectModularValueChanged) &&
                !project.isnewpaymentproject) {
                if (!paymentMilestones || paymentMilestones.length === 0) {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, adminErrorMessage);
                }
                paymentMilestones.forEach((element) => {
                    const Obj = element;
                    Obj.addonamount = element.siteserviceamount;
                    if (element.sequence === 0) {
                        milestone5Percent = Obj;
                    }
                    if (element.sequence === 1) {
                        milestone15Percent = Obj;
                    }
                    if (element.sequence === 2) {
                        milestone35Percent = Obj;
                    }
                    if (element.sequence === 3) {
                        milestone45Percent = Obj;
                    }
                });
                const updateMilestone5Percent = JSON.parse(JSON.stringify(milestone5Percent));
                const updateMilestone15Percent = JSON.parse(JSON.stringify(milestone15Percent));
                const updateMilestone35Percent = JSON.parse(JSON.stringify(milestone35Percent));
                const updateMilestone45Percent = JSON.parse(JSON.stringify(milestone45Percent));
                if (!updateMilestone5Percent ||
                    !updateMilestone15Percent ||
                    !updateMilestone35Percent ||
                    !updateMilestone45Percent) {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(201, adminErrorMessage);
                }
                if (isProjectModularValueChanged || args.isImosProject) {
                    const default5PercentAmount = newProjectModularValue * 0.05;
                    const default15PercentAmount = newProjectModularValue * 0.15;
                    const default35PercentAmount = newProjectModularValue * 0.35;
                    const default45PercentAmount = newProjectModularValue * 0.45;
                    if (!(milestone5Percent === null || milestone5Percent === void 0 ? void 0 : milestone5Percent.isfreezed) &&
                        !(milestone15Percent === null || milestone15Percent === void 0 ? void 0 : milestone15Percent.isfreezed) &&
                        !(milestone35Percent === null || milestone35Percent === void 0 ? void 0 : milestone35Percent.isfreezed) &&
                        !(milestone45Percent === null || milestone45Percent === void 0 ? void 0 : milestone45Percent.isfreezed)) {
                        updateMilestone5Percent.modularamount = default5PercentAmount;
                        updateMilestone15Percent.modularamount = default15PercentAmount;
                        updateMilestone35Percent.modularamount = default35PercentAmount;
                        updateMilestone45Percent.modularamount = default45PercentAmount;
                    }
                    if ((milestone5Percent === null || milestone5Percent === void 0 ? void 0 : milestone5Percent.isfreezed) &&
                        !(milestone15Percent === null || milestone15Percent === void 0 ? void 0 : milestone15Percent.isfreezed) &&
                        !(milestone35Percent === null || milestone35Percent === void 0 ? void 0 : milestone35Percent.isfreezed) &&
                        !(milestone45Percent === null || milestone45Percent === void 0 ? void 0 : milestone45Percent.isfreezed)) {
                        const new15PercentMilestoneAmount = default15PercentAmount +
                            (default5PercentAmount -
                                (milestone5Percent.freezedmodular +
                                    milestone5Percent.freezedsiteservice));
                        updateMilestone15Percent.modularamount =
                            new15PercentMilestoneAmount;
                        updateMilestone35Percent.modularamount = default35PercentAmount;
                        updateMilestone45Percent.modularamount = default45PercentAmount;
                    }
                    if ((milestone5Percent === null || milestone5Percent === void 0 ? void 0 : milestone5Percent.isfreezed) &&
                        (milestone15Percent === null || milestone15Percent === void 0 ? void 0 : milestone15Percent.isfreezed) &&
                        !(milestone35Percent === null || milestone35Percent === void 0 ? void 0 : milestone35Percent.isfreezed) &&
                        !(milestone45Percent === null || milestone45Percent === void 0 ? void 0 : milestone45Percent.isfreezed)) {
                        const new35PercentMilestoneAmount = default35PercentAmount +
                            (default5PercentAmount -
                                (milestone5Percent.freezedmodular +
                                    milestone5Percent.freezedsiteservice)) +
                            (default15PercentAmount -
                                (milestone15Percent.freezedmodular +
                                    milestone15Percent.freezedsiteservice));
                        updateMilestone35Percent.modularamount =
                            new35PercentMilestoneAmount;
                        updateMilestone45Percent.modularamount = default45PercentAmount;
                    }
                    if ((milestone5Percent === null || milestone5Percent === void 0 ? void 0 : milestone5Percent.isfreezed) &&
                        (milestone15Percent === null || milestone15Percent === void 0 ? void 0 : milestone15Percent.isfreezed) &&
                        (milestone35Percent === null || milestone35Percent === void 0 ? void 0 : milestone35Percent.isfreezed) &&
                        !(milestone45Percent === null || milestone45Percent === void 0 ? void 0 : milestone45Percent.isfreezed)) {
                        const new45PercentMilestoneAmount = default45PercentAmount +
                            (default5PercentAmount -
                                (milestone5Percent.freezedmodular +
                                    milestone5Percent.freezedsiteservice) +
                                (default15PercentAmount -
                                    (milestone15Percent.freezedmodular +
                                        milestone15Percent.freezedsiteservice)) +
                                (default35PercentAmount -
                                    (milestone35Percent.freezedmodular +
                                        milestone35Percent.freezedsiteservice)));
                        updateMilestone45Percent.modularamount =
                            new45PercentMilestoneAmount;
                    }
                }
                if (isSiteServiceValueChanged || args.isImosProject) {
                    const defaultNew15PercentAddOnAmount = newSiteServiceValue * 0.5;
                    const defaultNew45PercentAddOnAmount = newSiteServiceValue * 0.5;
                    if ((milestone5Percent === null || milestone5Percent === void 0 ? void 0 : milestone5Percent.isfreezed) &&
                        !(milestone15Percent === null || milestone15Percent === void 0 ? void 0 : milestone15Percent.isfreezed) &&
                        !(milestone35Percent === null || milestone35Percent === void 0 ? void 0 : milestone35Percent.isfreezed) &&
                        !(milestone45Percent === null || milestone45Percent === void 0 ? void 0 : milestone45Percent.isfreezed)) {
                        updateMilestone15Percent.addonamount =
                            defaultNew15PercentAddOnAmount;
                        updateMilestone35Percent.addonamount = 0;
                        updateMilestone45Percent.addonamount =
                            defaultNew45PercentAddOnAmount;
                    }
                    if ((milestone5Percent === null || milestone5Percent === void 0 ? void 0 : milestone5Percent.isfreezed) &&
                        (milestone15Percent === null || milestone15Percent === void 0 ? void 0 : milestone15Percent.isfreezed) &&
                        !(milestone35Percent === null || milestone35Percent === void 0 ? void 0 : milestone35Percent.isfreezed) &&
                        !(milestone45Percent === null || milestone45Percent === void 0 ? void 0 : milestone45Percent.isfreezed)) {
                        const new35PercentAddOnAmount = defaultNew15PercentAddOnAmount - milestone15Percent.addonamount;
                        updateMilestone35Percent.addonamount = new35PercentAddOnAmount;
                        updateMilestone45Percent.addonamount =
                            defaultNew45PercentAddOnAmount;
                    }
                    if ((milestone5Percent === null || milestone5Percent === void 0 ? void 0 : milestone5Percent.isfreezed) &&
                        (milestone15Percent === null || milestone15Percent === void 0 ? void 0 : milestone15Percent.isfreezed) &&
                        (milestone35Percent === null || milestone35Percent === void 0 ? void 0 : milestone35Percent.isfreezed) &&
                        !(milestone45Percent === null || milestone45Percent === void 0 ? void 0 : milestone45Percent.isfreezed)) {
                        const new45PercentAddOnAmount = newSiteServiceValue -
                            milestone15Percent.addonamount -
                            milestone35Percent.addonamount;
                        updateMilestone45Percent.addonamount = new45PercentAddOnAmount;
                    }
                }
                if (!(updateMilestone5Percent === null || updateMilestone5Percent === void 0 ? void 0 : updateMilestone5Percent.isfreezed)) {
                    updateMilestone5Percent.totalpayableamount = Math.floor(Number(updateMilestone5Percent.modularamount) +
                        Number(updateMilestone5Percent.addonamount));
                    updateMilestone5Percent.amountdue = Math.floor(Number(updateMilestone5Percent.totalpayableamount) -
                        Number(updateMilestone5Percent.amountpaid) -
                        Number(updateMilestone5Percent.advanceamount));
                }
                if (!(updateMilestone15Percent === null || updateMilestone15Percent === void 0 ? void 0 : updateMilestone15Percent.isfreezed)) {
                    updateMilestone15Percent.totalpayableamount = Math.floor(Number(updateMilestone15Percent.modularamount) +
                        Number(updateMilestone15Percent.addonamount));
                    updateMilestone15Percent.amountdue = Math.floor(Number(updateMilestone15Percent.totalpayableamount) -
                        Number(updateMilestone15Percent.amountpaid) -
                        Number(updateMilestone15Percent.advanceamount));
                }
                if (!(updateMilestone35Percent === null || updateMilestone35Percent === void 0 ? void 0 : updateMilestone35Percent.isfreezed)) {
                    updateMilestone35Percent.totalpayableamount = Math.floor(Number(updateMilestone35Percent.modularamount) +
                        Number(updateMilestone35Percent.addonamount));
                    updateMilestone35Percent.amountdue = Math.floor(Number(updateMilestone35Percent.totalpayableamount) -
                        Number(updateMilestone35Percent.amountpaid) -
                        Number(updateMilestone35Percent.advanceamount));
                }
                if (!(updateMilestone45Percent === null || updateMilestone45Percent === void 0 ? void 0 : updateMilestone45Percent.isfreezed)) {
                    updateMilestone45Percent.totalpayableamount = Math.floor(Number(updateMilestone45Percent.modularamount) +
                        Number(updateMilestone45Percent.addonamount));
                    updateMilestone45Percent.amountdue = Math.floor(Number(updateMilestone45Percent.totalpayableamount) -
                        Number(updateMilestone45Percent.amountpaid) -
                        Number(updateMilestone45Percent.advanceamount));
                }
                const id5Percent = updateMilestone5Percent.id;
                delete updateMilestone5Percent.id;
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                    where: { id: id5Percent },
                    data: updateMilestone5Percent,
                });
                const id15Percent = updateMilestone15Percent.id;
                delete updateMilestone15Percent.id;
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                    where: { id: id15Percent },
                    data: updateMilestone15Percent,
                });
                const id35Percent = updateMilestone35Percent.id;
                delete updateMilestone35Percent.id;
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                    where: { id: id35Percent },
                    data: updateMilestone35Percent,
                });
                const id45Percent = updateMilestone45Percent.id;
                delete updateMilestone45Percent.id;
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentmilestone.update({
                    where: { id: id45Percent },
                    data: updateMilestone45Percent,
                });
            }
            projectUpdateModel.projectmodularvalue = newProjectModularValue;
            if (args.projectSiteServicesValue) {
                projectUpdateModel.projectsiteservicesvalue =
                    args.projectSiteServicesValue;
            }
        }
        if (isSiteServiceValueChanged ||
            isProjectModularValueChanged ||
            args.isImosProject) {
            projectUpdateModel.projectmodularvalue = newProjectModularValue;
            if (args.projectSiteServicesValue) {
                projectUpdateModel.projectsiteservicesvalue =
                    args.projectSiteServicesValue;
            }
        }
        if (project.isnewpaymentproject) {
            projectUpdateModel.pendingamountvalue =
                newProjectModularValue +
                    newSiteServiceValue -
                    (project.modular_collected_amount +
                        project.site_services_collected_amount);
            projectUpdateModel.achievedrevenuevalue =
                project.modular_collected_amount +
                    project.site_services_collected_amount;
        }
        projectUpdateModel.modulardiscount = args.modularDiscount || 0;
        projectUpdateModel.siteservicediscount = args.civilDiscount || 0;
        projectUpdateModel.totalprojectvalue =
            newProjectModularValue + newSiteServiceValue;
        projectUpdateModel.updatedate = new Date();
        if (!args.isImosProject) {
            if (!args.modularPdfJson) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Modular pdf if required.");
            }
            if (args.modularPdfJson) {
                if (!args.modularPdfJson.fileKey || !args.modularPdfJson.location) {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Please upload modular quotation pdf file.");
                }
                const attachment = {
                    key: args.modularPdfJson.fileKey,
                    contentType: "application/pdf",
                    location: args.modularPdfJson.location
                };
                projectUpdateModel.quotelink = args.modularPdfJson.location;
                (0,_commonFunctions__WEBPACK_IMPORTED_MODULE_3__.addPdfToMilestone)(project, "Modular Quotation", attachment);
            }
            if (args.siteServicePdfJson) {
                if (!args.siteServicePdfJson.fileKey ||
                    !args.siteServicePdfJson.location) {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Please upload site quotation pdf file.");
                }
                const attachment = {
                    key: args.siteServicePdfJson.fileKey,
                    contentType: "application/pdf",
                    location: args.siteServicePdfJson.location
                };
                projectUpdateModel.siteservicepdflink = args.siteServicePdfJson.location;
                (0,_commonFunctions__WEBPACK_IMPORTED_MODULE_3__.addPdfToMilestone)(project, "Site Services Quotation", attachment);
            }
        }
        const updatedProject = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.update({
            where: { id: id },
            data: projectUpdateModel,
        });
        return {
            code: 200,
            data: updatedProject,
            message: "success",
        };
    }
    catch (error) {
        console.log(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/quotes/Mutations/preSales/acceptProposal.ts":
/*!*************************************************************!*\
  !*** ./src/api/quotes/Mutations/preSales/acceptProposal.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acceptProposal": () => (/* binding */ acceptProposal)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _projects_Mutations_AddProject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../projects/Mutations/AddProject */ "./src/api/projects/Mutations/AddProject.ts");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/commonUtils */ "./src/utils/commonUtils.ts");




const contentType = "application/json";
const contentTypeString = "Content-Type";
const acceptProposal = async (_root, args, _context) => {
    const acceptProposalResponse = { code: 200, message: null };
    const { quoteId, proposalStatus } = args;
    try {
        if (proposalStatus === "Accept") {
            const quoteData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({
                where: { sfid: quoteId },
            });
            if (quoteData) {
                const addProjectResponse = await createDraftProjectForCustomer(quoteData);
                if (addProjectResponse.code !== 200) {
                    acceptProposalResponse.code = 400;
                    acceptProposalResponse.message = addProjectResponse.message;
                    return acceptProposalResponse;
                }
                await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.update({
                    where: { sfid: quoteId },
                    data: {
                        status: "accepted",
                        latest_quote__c: true,
                    },
                });
                acceptProposalResponse.code = 200;
                acceptProposalResponse.message =
                    "Quote Accepted Successfully,Project Created Successfully";
            }
            else {
                acceptProposalResponse.code = 400;
                acceptProposalResponse.message = "Something went wrong";
            }
        }
    }
    catch (error) {
        acceptProposalResponse.code = 400;
        acceptProposalResponse.message = error.message;
    }
    return acceptProposalResponse;
};
const createDraftProjectForCustomer = async (quoteData) => {
    const createProjectDraftStatus = { code: 200, message: null };
    const opportunityData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
        where: {
            sfid: quoteData.opportunityid,
        },
    });
    if (!opportunityData) {
        createProjectDraftStatus.code = 400;
        createProjectDraftStatus.message =
            "Opportunity not found,Project not Created";
        return createProjectDraftStatus;
    }
    const customerData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.findFirst({
        where: {
            OR: [{ customerphone: opportunityData.mobile__c }],
        },
        include: {
            addresses: true,
        },
    });
    console.log(80, customerData);
    if (!customerData) {
        createProjectDraftStatus.code = 400;
        createProjectDraftStatus.message = "Customer Not Found,Project not Created";
        return createProjectDraftStatus;
    }
    const createCustomerResponse = await createCutomerOnOdoo(customerData);
    if (createCustomerResponse.code !== 200) {
        if (createCustomerResponse.message.includes("contact_id")) {
            console.log(createCustomerResponse.message);
            const odooContactId = createCustomerResponse.message.split("contact_id")[1];
            console.log(92, odooContactId);
            await updateContactIdForOdooForCustomer(customerData.customerid, odooContactId);
        }
        else {
            createProjectDraftStatus.code = 400;
            createProjectDraftStatus.message = `Customer Not Created On Odoo : ${createCustomerResponse.message}`;
            return createProjectDraftStatus;
        }
    }
    const userData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findFirst({
        where: {
            salesforceuserid: opportunityData.design_user__c,
        },
        include: {
            users_city: {
                include: { city: true },
            },
            users_experiencecenters: {
                include: { center: true },
            },
            users_team: {
                include: { team: true },
            },
        },
    });
    if (!userData) {
        createProjectDraftStatus.code = 400;
        createProjectDraftStatus.message = "Designer Not Found,Project not Created";
        return createProjectDraftStatus;
    }
    const customerName = getCustomerName(customerData);
    const addProjectPayload = {
        projectid: opportunityData.customer_id__c,
        projectname: `DC-${customerName} ${opportunityData.customer_id__c}`,
        totalprojectvalue: quoteData.modular_amount_dis_incl_gst__c +
            quoteData.site_services_amount_dis_incl_gst__c,
        projectstatus: "Draft",
        customerid: customerData.customerid,
        designerid: userData.userid,
        signupamount: 0,
        opportunityid: opportunityData.sfid,
        isimosproject: quoteData.is_imos_project__c,
        modularbaseamount: quoteData.modular_amount__c,
        projectmodularvalue: quoteData.modular_amount_dis_incl_gst__c,
        modulardiscount: quoteData.modular_discount__c,
        siteservicebaseamount: quoteData.site_services_amount__c,
        projectsiteservicesvalue: quoteData.site_services_amount_dis_incl_gst__c,
        siteservicediscount: quoteData.site_services_discount__c,
        cityid: userData.users_city[0].cityid,
        designstudioid: userData.users_team[0].teamid,
        experiencecenterid: userData.users_experiencecenters[0].centerid,
        currentmilestone: "Project Signup",
        hometype: opportunityData.home_type__c,
        isnewpaymentproject: true,
        modularamountgst: quoteData.modular_amount_gst__c,
        siteserviceamountgst: quoteData.site_services_amount_incl_gst__c,
        modularabsolutediscount: quoteData.modular_fixed_discount__c,
        modularpmfee: quoteData.modular_pm_design_fee__c,
        siteservicegst: quoteData.site_services_amount_gst__c,
        siteservicepdflink: quoteData.site_services_pdf__c,
        modularamountgstvalue: quoteData.modular_amount_incl_gst__c,
        sitepmfee: quoteData.site_services_pm_design_fee__c,
        siteservicediscountvalue: quoteData.site_services_amount_discounted__c,
        quotelink: quoteData.quote_link__c,
        proposalpdflink: quoteData.proposal_pdf__c,
        includepmfee: opportunityData.is_pm_site__c,
        salesmanagername: quoteData.opportunity_owner__c
    };
    console.log(146, addProjectPayload);
    const odooAddProjectResponse = await addProjectToOdoo(addProjectPayload, customerData, userData);
    if (odooAddProjectResponse.code !== 200) {
        console.log(173, odooAddProjectResponse.message);
        if (odooAddProjectResponse.message.includes("analytic account id")) {
            let analyticOdooId = odooAddProjectResponse.message.split("analytic account id")[1];
            analyticOdooId = analyticOdooId.split("and")[0].trim();
            odooAddProjectResponse.odooId = analyticOdooId;
        }
        if (odooAddProjectResponse.message.includes("Delivery id is")) {
            const odooDeliveryId = odooAddProjectResponse.message
                .split("Delivery id is")[1]
                .trim();
            odooAddProjectResponse.odooDeliveryId = odooDeliveryId;
        }
        else {
            console.log(181);
            createProjectDraftStatus.code = 400;
            createProjectDraftStatus.message = odooAddProjectResponse.message;
            return createProjectDraftStatus;
        }
    }
    else {
        addProjectPayload.odooid = odooAddProjectResponse.odooId;
        addProjectPayload.odoo_delivery_address_id =
            odooAddProjectResponse.odooDeliveryId;
    }
    console.log("odooAddProjectResponse", odooAddProjectResponse);
    console.log("addProjectPayload", addProjectPayload);
    const addProjectResponse = await (0,_projects_Mutations_AddProject__WEBPACK_IMPORTED_MODULE_1__.addProject)(null, addProjectPayload, null);
    if (addProjectResponse.code !== 200) {
        createProjectDraftStatus.code = 400;
        createProjectDraftStatus.message = addProjectResponse.message;
        return createProjectDraftStatus;
    }
    console.log("opportunityData", opportunityData);
    return createProjectDraftStatus;
};
const createCutomerOnOdoo = async (customerData) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const { deliveryStreet1, deliveryStreet2 } = await seperateAddressIntoStreets(customerData);
    try {
        let gstno = null;
        let gstTreatment = "";
        if ((customerData === null || customerData === void 0 ? void 0 : customerData.l10n_in_gst_treatment) !== null) {
            gstTreatment = customerData.l10n_in_gst_treatment;
        }
        else {
            gstTreatment = "regular";
        }
        if ((customerData === null || customerData === void 0 ? void 0 : customerData.customertype) === null) {
            console.log(191);
            return { code: 400, message: "Customer type cannot be null" };
        }
        else if ((customerData === null || customerData === void 0 ? void 0 : customerData.customertype) === "B2C") {
            gstTreatment = "unregistered";
        }
        else if ((customerData === null || customerData === void 0 ? void 0 : customerData.customertype) === "B2B") {
            gstTreatment = "regular";
            if (!customerData.gstno) {
                return {
                    code: 400,
                    message: "GST Number is required for B2B customer",
                };
            }
            gstno = customerData.gstno;
        }
        if (((_a = customerData === null || customerData === void 0 ? void 0 : customerData.customerphone) === null || _a === void 0 ? void 0 : _a.length) !== 10 ||
            !(customerData === null || customerData === void 0 ? void 0 : customerData.customerphone)) {
            return { code: 400, message: "Phone number is not valid." };
        }
        if (((_b = customerData === null || customerData === void 0 ? void 0 : customerData.addresses[0].zip) === null || _b === void 0 ? void 0 : _b.length) !== 6 ||
            !(customerData === null || customerData === void 0 ? void 0 : customerData.addresses[0].zip)) {
            return { code: 400, message: "Zip is not valid." };
        }
        if (((_c = customerData === null || customerData === void 0 ? void 0 : customerData.pancardno) === null || _c === void 0 ? void 0 : _c.length) !== 10 && !(customerData === null || customerData === void 0 ? void 0 : customerData.pancardno)) {
            return { code: 400, message: "Pan number is not valid." };
        }
        const customername = getCustomerName(customerData);
        const odooCookie = await createOdooSession();
        console.log(182, odooCookie);
        const odooContacts = {
            ref: customerData.salesforceid,
            name: customername,
            email: customerData.customeremail,
            city: `${customerData.addresses[0].city}`,
            company_type: "company",
            is_company: true,
            l10n_in_gst_treatment: gstTreatment,
            country_id: 104,
            mobile: customerData.customerphone,
            phone: customerData.customerphone,
            street: deliveryStreet1,
            street2: deliveryStreet2,
            state_id: _utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__.OdooStateID[customerData.addresses[0].state.toLowerCase().trim()],
            type: "contact",
            vat: gstno,
            supply_type: customerData.customertype,
            customer: true,
            zip: customerData.addresses[0].zip,
            sales_force_id: customerData.salesforceid,
            pan_no: customerData.pancardno,
        };
        console.log("odooContacts", odooContacts);
        const url = process.env.odooUrl + "/contact";
        const res = await superagent__WEBPACK_IMPORTED_MODULE_2___default().post(url)
            .set(contentTypeString, contentType)
            .set("Cookie", odooCookie)
            .send({ params: odooContacts });
        console.log(181, res.body);
        if (((_e = (_d = res.body) === null || _d === void 0 ? void 0 : _d.result) === null || _e === void 0 ? void 0 : _e.response)
            ? Object.keys((_f = res.body) === null || _f === void 0 ? void 0 : _f.result.response).length > 0
            : null) {
            await updateContactIdForOdooForCustomer(customerData.customerid, (_h = (_g = res.body) === null || _g === void 0 ? void 0 : _g.result) === null || _h === void 0 ? void 0 : _h.response.odoo_contact_id.toString());
            return { code: 200, message: null };
        }
        else {
            return { code: 400, message: (_k = (_j = res.body) === null || _j === void 0 ? void 0 : _j.result) === null || _k === void 0 ? void 0 : _k.message };
        }
    }
    catch (e) {
        console.log(252, e);
        return { code: 400, message: e.message };
    }
};
const updateContactIdForOdooForCustomer = async (customerId, contactId) => {
    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_customer.update({
        where: {
            customerid: customerId,
        },
        data: {
            odoocontactid: contactId,
        },
    });
};
const addZeroes = (num) => {
    let dis = num.toString();
    const ress = dis.split(".");
    if (!ress[1]) {
        dis = num + 0.001;
    }
    return parseFloat(dis);
};
const addProjectToOdoo = async (project, customer, designer) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
    const { deliveryStreet1, deliveryStreet2 } = await seperateAddressIntoStreets(customer);
    try {
        console.log("customer.addresses", customer.addresses);
        const odooCookie = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_odoocookie.findFirst();
        const customerNameInAddress = getCustomerName(customer);
        const projectReqObj = {
            name: project.projectname,
            sales_force_id: customer.salesforceid,
            analytic_location: 35,
            code: project.projectid,
            group_id: (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__.getOdooGroupID)(customer.addresses[0].city),
            project_refferal: false,
            project_refferal_type: null,
            referral_id: null,
            modular_discount: project.modulardiscount
                ? addZeroes(project.modulardiscount)
                : 0,
            signup_amount_per: 0,
            modular_project_value: project.projectmodularvalue
                ? addZeroes(project.projectmodularvalue)
                : 0,
            site_service_value: project.projectsiteservicesvalue
                ? addZeroes(project.projectsiteservicesvalue)
                : 0,
            civil_discount: project.siteservicediscount
                ? addZeroes(project.siteservicediscount)
                : 0,
            total_project_amount: project.totalprojectvalue
                ? addZeroes(project.totalprojectvalue)
                : 0,
            delivery_address: {
                name: customerNameInAddress,
                type: "delivery",
                street: deliveryStreet1,
                street2: deliveryStreet2,
                city: customer.addresses[0].city,
                state_id: _utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__.OdooStateID[customer.addresses[0].state.toLowerCase().trim()],
                country_id: 104,
                sales_force_id: customer.salesforceid,
            },
            default_rules: {
                analytic_exp_center_id: (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__.experiencecenters)(designer.users_experiencecenters[0].center.name),
                analytic_studio_id: (0,_utils_commonUtils__WEBPACK_IMPORTED_MODULE_3__.getOdooStudioID)((_a = designer.users_team[0].team) === null || _a === void 0 ? void 0 : _a.name),
            },
        };
        console.log("projectReqObj", projectReqObj);
        console.log(3030, odooCookie);
        const url = process.env.odooUrl + "/analytic/account/delivery/address";
        console.log(302, url);
        const res = await superagent__WEBPACK_IMPORTED_MODULE_2___default().post(url)
            .set(contentTypeString, contentType)
            .set("Cookie", odooCookie.cookie)
            .send({ params: projectReqObj });
        console.log(292, res.body);
        if (((_c = (_b = res.body) === null || _b === void 0 ? void 0 : _b.result) === null || _c === void 0 ? void 0 : _c.response)
            ? Object.keys((_d = res.body) === null || _d === void 0 ? void 0 : _d.result.response).length > 0
            : null) {
            return {
                code: 200,
                message: null,
                odooId: ((_f = (_e = res.body) === null || _e === void 0 ? void 0 : _e.result) === null || _f === void 0 ? void 0 : _f.response["Analytic Account"])
                    ? (_h = (_g = res.body) === null || _g === void 0 ? void 0 : _g.result) === null || _h === void 0 ? void 0 : _h.response["Analytic Account"].toString()
                    : null,
                odooDeliveryId: ((_k = (_j = res.body) === null || _j === void 0 ? void 0 : _j.result) === null || _k === void 0 ? void 0 : _k.response["Delivery Address"])
                    ? (_m = (_l = res.body) === null || _l === void 0 ? void 0 : _l.result) === null || _m === void 0 ? void 0 : _m.response["Delivery Address"].toString()
                    : null,
            };
        }
        else {
            return {
                code: 400,
                message: `Error in creating oddo project: ${((_p = (_o = res.body) === null || _o === void 0 ? void 0 : _o.error) === null || _p === void 0 ? void 0 : _p.message)
                    ? (_r = (_q = res.body) === null || _q === void 0 ? void 0 : _q.error) === null || _r === void 0 ? void 0 : _r.message
                    : (_t = (_s = res.body) === null || _s === void 0 ? void 0 : _s.result) === null || _t === void 0 ? void 0 : _t.message}`,
            };
        }
    }
    catch (e) {
        return { code: 400, message: e.message };
    }
};
const seperateAddressIntoStreets = async (customerData) => {
    try {
        const street1 = [], street2 = [];
        const streetAddress = customerData.addresses[0].street.split(" ");
        if (streetAddress.length === 2) {
            street1.push(streetAddress[0]);
            street2.push(streetAddress[1]);
        }
        if (streetAddress.length > 2) {
            for (let i = 0; i < streetAddress.length; i++) {
                const toInt = (streetAddress.length - 1) / 2;
                if (i <= parseInt(toInt.toString())) {
                    street1.push(streetAddress[i]);
                }
                else {
                    street2.push(streetAddress[i]);
                }
            }
        }
        console.log("street1 =>", street1.join(" "));
        console.log("street2 => ", street2.join(" "));
        const deliveryStreet1 = street1.join(" ");
        let deliveryStreet2 = street2.join(" ");
        if (deliveryStreet2.length <= 1) {
            deliveryStreet2 = deliveryStreet2.concat(",,");
        }
        else if (deliveryStreet2.length <= 2) {
            deliveryStreet2 = deliveryStreet2.concat(",");
        }
        return { deliveryStreet1, deliveryStreet2 };
    }
    catch (e) {
        return e.message;
    }
};
const createOdooSession = async () => {
    try {
        console.log(403403);
        const url = process.env.odooAdminUrl + "/web/session/authenticate";
        console.log(302, url);
        const res = await superagent__WEBPACK_IMPORTED_MODULE_2___default().post(url)
            .set(contentTypeString, contentType)
            .send({
            params: {
                db: process.env.odooDB,
                login: process.env.odooAdminEmail,
                password: process.env.odooAdminEmailPwd,
            },
        });
        console.log(414, res === null || res === void 0 ? void 0 : res.header);
        if (res === null || res === void 0 ? void 0 : res.header) {
            const sessionCookie = res.header["set-cookie"][0].split(";")[0];
            console.log("sessionCookie", sessionCookie);
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_odoocookie.update({
                where: {
                    id: 1,
                },
                data: {
                    cookie: sessionCookie,
                },
            });
            return sessionCookie;
        }
        return null;
    }
    catch (e) {
        console.log(e);
        return null;
    }
};
const getCustomerName = (customerData) => {
    const firstname = customerData.firstname ? customerData.firstname.trim() : "";
    const lastname = customerData.lastname ? customerData.lastname.trim() : "";
    return `${firstname ? firstname + " " : ""}${lastname}`;
};


/***/ }),

/***/ "./src/api/quotes/Mutations/preSales/postBetaQuoteApi.ts":
/*!***************************************************************!*\
  !*** ./src/api/quotes/Mutations/preSales/postBetaQuoteApi.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "postBetaQuote": () => (/* binding */ postBetaQuote)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uuid */ "uuid");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");






const postBetaQuote = async (_root, args, _context) => {
    try {
        const date = dayjs__WEBPACK_IMPORTED_MODULE_2___default()().format("YYYY-MM-DD");
        const quoteData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({
            where: { opportunityid: args.opportunityid },
        });
        if (!quoteData) {
            await updateOpportunityDetails(args.opportunityid, date);
        }
        const oppData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
            where: {
                sfid: args.opportunityid,
            },
        });
        if (!oppData) {
            return {
                code: 400,
                message: "Opportunity not found",
            };
        }
        if (oppData.stagename === "Closed Won") {
            return {
                code: 400,
                message: "Cannot update closed won lead / opportunity",
            };
        }
        const quote = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.create({
            data: {
                opportunityid: args.opportunityid,
                name: args.name,
                modular_fixed_discount__c: args.modularFixedDiscount
                    ? args.modularFixedDiscount
                    : 0,
                modular_amount__c: args.modularAmount ? args.modularAmount : 0,
                modular_discount__c: args.modularDiscount ? args.modularDiscount : 0,
                site_services_amount__c: args.siteServiceValue
                    ? args.siteServiceValue
                    : 0,
                site_services_discount__c: args.siteServiceDiscount
                    ? args.siteServiceDiscount
                    : 0,
                site_service_fixed_discount__c: args.siteServiceFixedDiscount
                    ? args.siteServiceFixedDiscount
                    : 0,
                decor_amount__c: 0,
                decor_amount_discount__c: 0,
                latest_quote__c: true,
                proposal_pdf__c: args.proposal_link,
                postgres_id__c: (0,uuid__WEBPACK_IMPORTED_MODULE_4__.v4)(),
            },
        });
        console.log(quote);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.create({
            data: {
                filekey: args.key,
                location: args.proposal_link,
                contenttype: args.contentType,
                ispreorpost: 0,
                leadid: oppData.lead_id__c
            }
        });
        return {
            code: 200,
            message: "Quote Added Scuccessfully",
            quoteid: quote.postgres_id__c,
        };
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, error);
    }
};
async function updateOpportunityDetails(oppoId, date) {
    try {
        console.log({
            where: { sfid: oppoId },
            data: { proposal_sent_date__c: date },
        });
        const updatedResponse = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.$executeRaw `UPDATE public.opportunity SET proposal_sent_date__c = TO_DATE(${date}, 'YYYY/MM/DD') WHERE sfid = ${oppoId};`;
        console.log(updatedResponse);
        return {
            code: 200,
            message: "Updated success",
        };
    }
    catch (e) {
        console.log(21365, e);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Something went wrong");
    }
}
async function postDatatoSalesForce(reqBody) {
    const conn = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_5__.getConnection)();
    const finalUrl = `${process.env.salesforceLoginUrl}services/data/v42.0/sobjects/Quote`;
    try {
        const res = await superagent__WEBPACK_IMPORTED_MODULE_3___default().post(finalUrl)
            .set("Content-Type", "application/json")
            .set("Authorization", "Bearer " + conn.accessToken)
            .send(reqBody);
        return res.body;
    }
    catch (error) {
        console.log(error);
        throw error;
    }
}


/***/ }),

/***/ "./src/api/quotes/Mutations/preSales/proposalSignedUrl.ts":
/*!****************************************************************!*\
  !*** ./src/api/quotes/Mutations/preSales/proposalSignedUrl.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "proposalSignedUrl": () => (/* binding */ proposalSignedUrl)
/* harmony export */ });
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ "uuid");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_3__);




const proposalSignedUrl = async (_root, args, _context) => {
    try {
        let user;
        try {
            user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticate)(_context, "DD");
        }
        catch (error) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_3___default())(401, error);
        }
        const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__.v4)();
        const filekey = `proposal/${id}_${args.key}`;
        const responseObj = {};
        responseObj.key = args.key;
        responseObj.contentType = args.contentType;
        responseObj.awsFileKey = filekey;
        const attachmentObj = {
            key: filekey,
            contentType: args.contentType,
            base64: args.base64,
            userid: user.userid,
            ispreorpost: 0,
            leadid: args.leadid,
        };
        const toS3 = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_0__.UploadFileOnS3)(attachmentObj);
        responseObj.fileLocation = toS3.location;
        responseObj.id = toS3.id;
        return {
            code: 200,
            message: "Success",
            data: responseObj,
        };
    }
    catch (error) {
        console.log("error ======> ", error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/quotes/Mutations/preSales/saveBetaQuoteDetails.ts":
/*!*******************************************************************!*\
  !*** ./src/api/quotes/Mutations/preSales/saveBetaQuoteDetails.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "saveBetaQuoteApi": () => (/* binding */ saveBetaQuoteApi)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");



const saveBetaQuoteApi = async (_root, args, _context) => {
    try {
        if (!args.modulerXmlLink) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Modular xml is mandatory");
        }
        const quoteData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({
            where: { postgres_id__c: args.postgresId },
        });
        if (!quoteData) {
            return {
                code: 400,
                message: "Quote not found",
            };
        }
        const dbQuoteObj = Object.assign(Object.assign({ name: args.name, modular_amount__c: args.modularAmount ? args.modularAmount : 0, site_services_amount__c: args.siteServiceValue
                ? args.siteServiceValue
                : 0, modular_discount__c: args.modularDiscount ? args.modularDiscount : 0, site_services_discount__c: args.siteServiceDiscount
                ? args.siteServiceDiscount
                : 0, latest_quote__c: true, dc_modular_xml__c: args.modulerXmlLink }, (args.siteServiceXmlLink && {
            dc_site_services_xml__c: args.siteServiceXmlLink,
        })), { sfid: args.quoteId, opportunityid: args.opportunityId, proposal_pdf__c: args.proposalLocation, dc_room_list__c: "", is_imos_project__c: true });
        const opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
            where: { sfid: args.opportunityId },
        });
        if (!opportunity) {
            return {
                code: 400,
                message: "Opportunity not found",
            };
        }
        const city = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findFirst({
            where: {
                name: opportunity.region__c,
            },
        });
        if (!city) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "City not found");
        }
        const custId = opportunity.customer_id__c;
        const roomListArray = [];
        if (args.modulerXmlLink) {
            const xmlModularObj = {
                file: args.modulerXmlLink,
                type: "modularXml",
                discount: args.modularDiscount ? args.modularDiscount : 0,
                customerId: custId,
                opportunityId: args.opportunityId,
                isPmFeeIncluded: opportunity.is_pm_site__c,
                cityPmFee: city.includepmfee,
                leadid: opportunity.lead_id__c,
                displayname: "Modular Quotation",
            };
            const forModular = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__.XmlToPdf)(xmlModularObj);
            roomListArray.push(...forModular.roomList);
            dbQuoteObj.quote_link__c = forModular.s3Location;
        }
        if (args.siteServiceXmlLink) {
            const xmlSiteServiceObj = {
                file: args.siteServiceXmlLink,
                type: "siteServiceXml",
                discount: args.siteServiceDiscount ? args.siteServiceDiscount : 0,
                customerId: custId,
                opportunityId: args.opportunityId,
                isPmFeeIncluded: opportunity.is_pm_site__c,
                cityPmFee: city.includepmfee,
                leadid: opportunity.lead_id__c,
                displayname: "Site Service Quotation",
            };
            const forSiteService = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__.XmlToPdf)(xmlSiteServiceObj);
            roomListArray.push(...forSiteService.roomList);
            dbQuoteObj.site_services_pdf__c = forSiteService.s3Location;
        }
        dbQuoteObj.dc_room_list__c = JSON.stringify(roomListArray);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.update({
            where: { postgres_id__c: args.postgresId },
            data: dbQuoteObj,
        });
        return {
            code: 200,
            message: "Details uploaded successfully",
        };
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(500, error);
    }
};


/***/ }),

/***/ "./src/api/quotes/Mutations/preSales/updateQuoteDetailsFromSF.ts":
/*!***********************************************************************!*\
  !*** ./src/api/quotes/Mutations/preSales/updateQuoteDetailsFromSF.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UpdateQuoteDetails": () => (/* binding */ UpdateQuoteDetails)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");



const UpdateQuoteDetails = async (_root, args, _context) => {
    try {
        const QuoteResponse = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({
            where: {
                sfid: args.quoteId,
                opportunityid: args.opportunityId,
            },
        });
        if (!QuoteResponse) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Quote not found");
        }
        const QuoteResponseObj = {};
        const opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
            where: { sfid: args.opportunityId },
        });
        if (!opportunity) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Opportunity not found");
        }
        const city = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findFirst({
            where: {
                name: opportunity.region__c,
            },
        });
        if (!city) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "City not found");
        }
        const custId = opportunity.customer_id__c;
        if (args.updateModular) {
            if (args.modularDiscount === null || args.modularFixedDiscount === null) {
                return {
                    code: 400,
                    message: "Please provide modular percentage & fixed discounts",
                };
            }
            QuoteResponseObj["modular_discount__c"] = args.modularDiscount;
            QuoteResponseObj["modular_fixed_discount__c"] = args.modularFixedDiscount;
            const xmlModularObj = {
                from: "Sales Force",
                file: args.modulerXmlLink,
                type: "modularXml",
                discount: args.modularDiscount ? args.modularDiscount : 0,
                absoluteDiscount: args.modularFixedDiscount
                    ? args.modularFixedDiscount
                    : 0,
                customerId: custId,
                opportunityId: args.opportunityId,
                isPmFeeIncluded: opportunity.is_pm_site__c,
                cityPmFee: city.includepmfee,
                leadid: opportunity.lead_id__c,
                displayname: "Modular Quotation",
            };
            const forModular = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__.XmlToPdf)(xmlModularObj);
            QuoteResponseObj["quote_link__c"] = forModular.s3Location;
        }
        if (args.updateSiteService) {
            if (args.siteServiceDiscount === null ||
                args.siteServiceFixedDiscount === null) {
                return {
                    code: 400,
                    message: "Please provide site service percentage & fixed discounts",
                };
            }
            QuoteResponseObj["site_services_discount__c"] = args.siteServiceDiscount;
            QuoteResponseObj["site_service_fixed_discount__c"] =
                args.siteServiceFixedDiscount;
            const xmlSiteServiceObj = {
                from: "Sales Force",
                file: args.siteServiceXmlLink,
                type: "siteServiceXml",
                discount: args.siteServiceDiscount ? args.siteServiceDiscount : 0,
                absoluteDiscount: args.siteServiceFixedDiscount
                    ? args.siteServiceFixedDiscount
                    : 0,
                customerId: custId,
                opportunityId: args.opportunityId,
                isPmFeeIncluded: opportunity.is_pm_site__c,
                cityPmFee: city.includepmfee,
                leadid: opportunity.lead_id__c,
                displayname: "Site Service Quotation",
            };
            const forSiteService = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_2__.XmlToPdf)(xmlSiteServiceObj);
            QuoteResponseObj["site_services_pdf__c"] = forSiteService.s3Location;
        }
        QuoteResponseObj["latest_quote__c"] = true;
        const dataToSF = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.update({
            where: {
                sfid: args.quoteId,
            },
            data: QuoteResponseObj,
        });
        return {
            code: dataToSF.id ? 200 : 400,
            message: dataToSF.id ? "Updated successfully" : "Something went wrong",
            data: dataToSF.id,
        };
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(500, error);
    }
};


/***/ }),

/***/ "./src/api/quotes/Mutations/preSales/validateXml.ts":
/*!**********************************************************!*\
  !*** ./src/api/quotes/Mutations/preSales/validateXml.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "validateXmlApi": () => (/* binding */ validateXmlApi)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xml-js */ "xml-js");
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(xml_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../domain/services/baseUseCase/baseUseCase */ "./src/domain/services/baseUseCase/baseUseCase.ts");
/* harmony import */ var _domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../domain/enumerations/RoomTypesEnums */ "./src/domain/enumerations/RoomTypesEnums.ts");





const validateXmlApi = async (_root, args, _context) => {
    try {
        const opportunityData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
            where: {
                lead_id__c: args.leadId,
            },
        });
        if (!opportunityData) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "Opportunity not found");
        }
        const file = {
            key: args.fileName,
            contentType: args.contentType,
            base64: args.base64File,
            leadid: args.leadId,
        };
        const attachmentObj = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.UploadFileOnS3)(file);
        const xml = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.getBuffer)(attachmentObj.filekey);
        const result = await xml_js__WEBPACK_IMPORTED_MODULE_1___default().xml2json(xml, { compact: true, spaces: 4 });
        const mainObj = JSON.parse(result);
        const clientName = mainObj.XML.Order.Head.CONTACT_ADDRESS1._text;
        if (!clientName) {
            await removeFromBlobAndDB(attachmentObj);
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "Customer name not found. Please upload appropriate file!");
        }
        if (clientName.split("-")[0] !== (opportunityData === null || opportunityData === void 0 ? void 0 : opportunityData.name.split("-")[0])) {
            await removeFromBlobAndDB(attachmentObj);
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "Customer name did not match. Please upload appropriate file!");
        }
        const commonAmount = parseFloat(mainObj.XML.Order.Head.ORDER_PRICE_INFO3._text) || 0;
        const totaltax = parseFloat(mainObj.XML.Order.Head.ORDER_PRICE_INFO4._text) || 0;
        const totalAmount = parseFloat(mainObj.XML.Order.Head.ORDER_PRICE_INFO5._text) || 0;
        const commonDiscountFromSplit = mainObj.XML.Order.Head.CUSTOM_INFO4._text.split("%");
        const commonDiscount = parseInt(commonDiscountFromSplit) || 0;
        const discountedAmount = parseFloat(mainObj.XML.Order.Head.CUSTOM_INFO3._text) || 0;
        const absoluteDiscount = parseInt(mainObj.XML.Order.Head.CUSTOM_INFO5._text) || 0;
        const responseObj = {};
        responseObj.location = attachmentObj.location;
        responseObj.attachment = attachmentObj === null || attachmentObj === void 0 ? void 0 : attachmentObj.id;
        responseObj.filekey = attachmentObj === null || attachmentObj === void 0 ? void 0 : attachmentObj.filekey;
        responseObj.customerName = clientName;
        if (args.modular) {
            responseObj.modularValue = commonAmount;
            responseObj.modularBaseAmount = commonAmount;
            responseObj.modularTotalTax = totaltax;
            responseObj.modularTotalAmount = totalAmount;
            responseObj.modularDiscountedAmount = discountedAmount;
            responseObj.modularDiscountValue = commonDiscount;
            responseObj.modularFixedDiscount = absoluteDiscount;
        }
        else if (args.siteService) {
            responseObj.siteServiceValue = commonAmount;
            responseObj.siteServiceBaseAmount = commonAmount;
            responseObj.siteServiceTotalTax = totaltax;
            responseObj.siteServiceTotalAmount = totalAmount;
            responseObj.siteServiceDiscountedAmount = discountedAmount;
            responseObj.siteServiceDiscountValue = commonDiscount;
            responseObj.siteServiceFixedDiscount = absoluteDiscount;
        }
        const builderList = mainObj.XML.Order.BuilderList.Set;
        if (args.modular) {
            const roomsArr = (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.getRoomNames)(builderList);
            const rooms = roomsArr;
            for (const val of rooms) {
                const room = val;
                const roomlower = room.toLowerCase();
                if (_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__.SITE_SERVICE.includes(roomlower)) {
                    await removeFromBlobAndDB(attachmentObj);
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "Oops! Looks like you've added incorrect room name on IMOS. Upload Site Services in a different field");
                }
            }
        }
        else if (args.siteService) {
            const roomsArr2 = [];
            let count2 = 1;
            let roomNameFromSplit2;
            let _list = [];
            if (!Array.isArray(builderList)) {
                _list.push(builderList);
            }
            else {
                _list = builderList;
            }
            _list.forEach((element) => {
                if (count2 === Math.floor(element.hierarchicalPos._text)) {
                    roomNameFromSplit2 = element.PVarString._text.split("ROOMNAME:=");
                    roomsArr2.push(roomNameFromSplit2[1]);
                    count2++;
                }
            });
            const rooms = roomsArr2;
            for (const value of rooms) {
                const room = value;
                const roomlower = room.toLowerCase();
                if (!_domain_enumerations_RoomTypesEnums__WEBPACK_IMPORTED_MODULE_4__.SITE_SERVICE.includes(roomlower)) {
                    await removeFromBlobAndDB(attachmentObj);
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, "Opps! Looks like you've added incorrect room name on IMOS. Upload Modular in a different field");
                }
            }
        }
        return {
            code: 200,
            data: responseObj,
            message: "Xml uploaded successfully!",
        };
        async function removeFromBlobAndDB(_attachment) {
            if (_attachment) {
                const attachmentFileKey = _attachment.location;
                const awsDeleteRes = await (0,_domain_services_baseUseCase_baseUseCase__WEBPACK_IMPORTED_MODULE_3__.deleteBlob)(attachmentFileKey);
                if (awsDeleteRes) {
                    await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments["delete"]({
                        where: {
                            id: _attachment.id,
                        },
                    });
                }
            }
        }
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_2___default())(400, error);
    }
};


/***/ }),

/***/ "./src/api/quotes/Queries/getQuotation.ts":
/*!************************************************!*\
  !*** ./src/api/quotes/Queries/getQuotation.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getQuotation": () => (/* binding */ getQuotation)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const getQuotation = async (_root, _args, context) => {
    let quoteResponseObj;
    try {
        const res = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticateDdCd)(context);
        const { opportunitysfid } = _args;
        let opportunity;
        if (res.user) {
            if (!opportunitysfid) {
                return { code: 400, message: "opportunitysfid is required" };
            }
            opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
                where: { sfid: opportunitysfid },
            });
        }
        else if (res.customer) {
            opportunity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findFirst({
                where: { mobile__c: res.customer.customerphone },
            });
        }
        let quotes;
        if (opportunity) {
            quotes = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findMany({
                where: {
                    opportunityid: opportunity.sfid,
                },
                orderBy: [
                    {
                        createddate: 'asc',
                    },
                ]
            });
        }
        quoteResponseObj = { code: 200, message: "success", quotes: quotes };
        return quoteResponseObj;
    }
    catch (error) {
        quoteResponseObj = { code: 400, message: error.message };
        return quoteResponseObj;
    }
};


/***/ }),

/***/ "./src/api/quotes/Queries/getQuotationById.ts":
/*!****************************************************!*\
  !*** ./src/api/quotes/Queries/getQuotationById.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getQuotationById": () => (/* binding */ getQuotationById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");


const getQuotationById = async (_root, args, _context) => {
    let quoteByIdResponseObj;
    try {
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_1__.authenticateDdCd)(_context);
        const quote = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({ where: { id: args.quoteid } });
        quoteByIdResponseObj = { code: 200, message: "success", quotes: quote };
        return quoteByIdResponseObj;
    }
    catch (error) {
        quoteByIdResponseObj = { code: 400, message: error.message };
        return quoteByIdResponseObj;
    }
};


/***/ }),

/***/ "./src/api/quotes/Queries/getRoomList.ts":
/*!***********************************************!*\
  !*** ./src/api/quotes/Queries/getRoomList.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getRoomList": () => (/* binding */ getRoomList)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);


const getRoomList = async (_root, args, _context) => {
    try {
        let quoteData, response, roomList;
        if (args.isPreSales) {
            if (!args.quoteSfId) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "Salesforce quote id is required.");
            }
            quoteData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findFirst({
                where: { sfid: args.quoteSfId },
            });
            if (quoteData.dc_room_list__c) {
                roomList = getRoomListArray(quoteData.dc_room_list__c);
            }
            response = roomList ? roomList : [];
        }
        else {
            if (!args.quoteId) {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(400, "project quote id is required.");
            }
            quoteData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_project_quotes.findFirst({
                where: { id: args.quoteId },
            });
            roomList = quoteData.roomlist;
            response = roomList ? roomList : [];
        }
        return {
            code: quoteData ? 200 : 201,
            data: response,
            message: quoteData ? "success" : "Quote not found",
        };
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(500, error.message);
    }
};
const getRoomListArray = (roomsArray) => {
    const stringifyRoomlist = JSON.parse(JSON.stringify(roomsArray).replace(/&quot;/g, '\\"'));
    return JSON.parse(stringifyRoomlist);
};


/***/ }),

/***/ "./src/api/quotes/resolver.ts":
/*!************************************!*\
  !*** ./src/api/quotes/resolver.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "quotationResolver": () => (/* binding */ quotationResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_getQuotation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/getQuotation */ "./src/api/quotes/Queries/getQuotation.ts");
/* harmony import */ var _Queries_getQuotationById__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Queries/getQuotationById */ "./src/api/quotes/Queries/getQuotationById.ts");
/* harmony import */ var _Queries_getRoomList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Queries/getRoomList */ "./src/api/quotes/Queries/getRoomList.ts");
/* harmony import */ var _Mutations_preSales_validateXml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mutations/preSales/validateXml */ "./src/api/quotes/Mutations/preSales/validateXml.ts");
/* harmony import */ var _Mutations_preSales_postBetaQuoteApi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Mutations/preSales/postBetaQuoteApi */ "./src/api/quotes/Mutations/preSales/postBetaQuoteApi.ts");
/* harmony import */ var _Mutations_preSales_updateQuoteDetailsFromSF__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Mutations/preSales/updateQuoteDetailsFromSF */ "./src/api/quotes/Mutations/preSales/updateQuoteDetailsFromSF.ts");
/* harmony import */ var _Mutations_preSales_saveBetaQuoteDetails__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Mutations/preSales/saveBetaQuoteDetails */ "./src/api/quotes/Mutations/preSales/saveBetaQuoteDetails.ts");
/* harmony import */ var _Mutations_preSales_proposalSignedUrl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Mutations/preSales/proposalSignedUrl */ "./src/api/quotes/Mutations/preSales/proposalSignedUrl.ts");
/* harmony import */ var _Mutations_postSales_deleteRoomwise__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Mutations/postSales/deleteRoomwise */ "./src/api/quotes/Mutations/postSales/deleteRoomwise.ts");
/* harmony import */ var _Mutations_postSales_postRoomWiseXml__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Mutations/postSales/postRoomWiseXml */ "./src/api/quotes/Mutations/postSales/postRoomWiseXml.ts");
/* harmony import */ var _Mutations_postSales_updateDiscountGeneratePdf__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Mutations/postSales/updateDiscountGeneratePdf */ "./src/api/quotes/Mutations/postSales/updateDiscountGeneratePdf.ts");
/* harmony import */ var _Mutations_postSales_updateProjectCommercial__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Mutations/postSales/updateProjectCommercial */ "./src/api/quotes/Mutations/postSales/updateProjectCommercial.ts");
/* harmony import */ var _Mutations_preSales_acceptProposal__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Mutations/preSales/acceptProposal */ "./src/api/quotes/Mutations/preSales/acceptProposal.ts");














const quotationResolver = {
    Query: {
        getQuotation: async (parent, _args, context) => (0,_Queries_getQuotation__WEBPACK_IMPORTED_MODULE_1__.getQuotation)(parent, _args, context),
        getQuotationById: async (parent, _args, context) => (0,_Queries_getQuotationById__WEBPACK_IMPORTED_MODULE_2__.getQuotationById)(parent, _args, context),
        getRoomList: async (parent, _args, context) => (0,_Queries_getRoomList__WEBPACK_IMPORTED_MODULE_3__.getRoomList)(parent, _args, context),
    },
    Mutation: {
        proposalSignedUrl: async (parent, _args, context) => (0,_Mutations_preSales_proposalSignedUrl__WEBPACK_IMPORTED_MODULE_8__.proposalSignedUrl)(parent, _args, context),
        postBetaQuote: async (parent, _args, context) => (0,_Mutations_preSales_postBetaQuoteApi__WEBPACK_IMPORTED_MODULE_5__.postBetaQuote)(parent, _args, context),
        saveBetaQuoteApi: async (parent, _args, context) => (0,_Mutations_preSales_saveBetaQuoteDetails__WEBPACK_IMPORTED_MODULE_7__.saveBetaQuoteApi)(parent, _args, context),
        validateXmlApi: async (parent, _args, context) => (0,_Mutations_preSales_validateXml__WEBPACK_IMPORTED_MODULE_4__.validateXmlApi)(parent, _args, context),
        UpdateQuoteDetails: async (parent, _args, context) => (0,_Mutations_preSales_updateQuoteDetailsFromSF__WEBPACK_IMPORTED_MODULE_6__.UpdateQuoteDetails)(parent, _args, context),
        acceptProposal: async (parent, _args, context) => (0,_Mutations_preSales_acceptProposal__WEBPACK_IMPORTED_MODULE_13__.acceptProposal)(parent, _args, context),
        PostRoomwiseXmlApi: async (parent, _args, context) => (0,_Mutations_postSales_postRoomWiseXml__WEBPACK_IMPORTED_MODULE_10__.PostRoomwiseXmlApi)(parent, _args, context),
        deleteRoomwise: async (parent, _args, context) => (0,_Mutations_postSales_deleteRoomwise__WEBPACK_IMPORTED_MODULE_9__.deleteRoomwise)(parent, _args, context),
        updateDiscountGeneratePdf: async (parent, _args, context) => (0,_Mutations_postSales_updateDiscountGeneratePdf__WEBPACK_IMPORTED_MODULE_11__.updateDiscountGeneratePdf)(parent, _args, context),
        updateProjectCommercial: async (parent, _args, context) => (0,_Mutations_postSales_updateProjectCommercial__WEBPACK_IMPORTED_MODULE_12__.updateProjectCommercial)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/quotes/typedefs.ts":
/*!************************************!*\
  !*** ./src/api/quotes/typedefs.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "quotationTypedef": () => (/* binding */ quotationTypedef)
/* harmony export */ });
const quotationTypedef = `
    type Quote {
        quotetogeocodeaccuracy:String
        discount:Float
        shippinglongitude:Float
        quotetocity:String
        quotetoname:String
        site_services_amount__c:Float
        site_service_fixed_discount__c:Float
        billingstatecode:String
        shippingstate:String
        quotetolatitude:Float
        igst__c:Float
        subtotal:Float
        totalprice:Float
        quotenumber:String
        site_services_pm_design_fee__c:Float
        site_services_amount_discounted__c:Float
        shippingpostalcode:String
        billingcity:String
        quote_link__c:String
        billingname:String
        quotetostatecode:String
        billinglatitude:Float
        accountid:String
        additionallongitude:Float
        billingcountrycode:String
        shippingcountry:String
        customer_email__c:String
        decor_amount_gst__c:Float
        shippinggeocodeaccuracy:String
        modular_fixed_discount__c:Float
        modular_amount_dis_incl_gst__c:Float
        additionalstate:String
        additionalstreet:String
        name:String
        tax:Float
        quotetocountrycode:String
        modular_discount__c:Float
        contractid:String
        modular_amount_gst__c:Float
        sgst__c:Float
        phone:String
        oppty_designer_email_add__c:String
        site_services_amount_incl_gst__c:Float
        opportunityid:String
        decor_amount_dis_incl_gst__c:Float
        additionalcountry:String
        quotetopostalcode:String
        isdeleted:Boolean
        additionalgeocodeaccuracy:String
        systemmodstamp:DateTime
        shippingstatecode:String
        modular_amount_discounted__c:Float
        decor_amount__c:Float
        modular_pm_design_fee__c:Float
        shippingstreet:String
        status:String
        additionalcity:String
        additionalname:String
        shippinghandling:Float
        additionallatitude:Float
        billingpostalcode:String
        billinglongitude:Float
        decor_amount_discount__c:Float
        shippingcountrycode:String
        decor_amount_discounted__c:Float
        modular_amount__c:Float
        createddate:DateTime
        billingstate:String
        additionalstatecode:String
        customer_name__c:String
        quotetolongitude:Float
        grandtotal:Float
        shippingcity:String
        shippingname:String
        site_services_amount_gst__c:Float
        site_services_discount__c:Float
        shippinglatitude:Float
        site_services_pdf__c:String
        quotetostate:String
        quotetostreet:String
        modular_amount_incl_gst__c:Float
        pricebook2id:String
        billingcountry:String
        contactid:String
        oppty_owner__c:String
        email:String
        description:String
        additionalcountrycode:String
        billinggeocodeaccuracy:String
        oppty_customer_email__c:String
        base_amount__c:Float
        issyncing:Boolean
        fax:String
        expirationdate:DateTime
        site_services_amount_dis_incl_gst__c:Float
        proposal_pdf__c:String
        cgst__c:Float
        send_notification_to_customer__c:Boolean
        billingstreet:String
        additionalpostalcode:String
        quotetocountry:String
        latest_quote__c:Boolean
        opportunity_amount__c:Float
        decor_amount_incl_gst__c:Float
        sfid:String
        id:Int!
        hc_lastop:String
        hc_err:String
        dc_modular_xml__c:String
        dc_site_service_xml__c:String
        dc_room_list__c: String
        change_request_list__c: String
        total_calculated_value__c: Float
        total_amount__c: Float
        postgres_id__c: String
        is_imos_project__c: Boolean
    }

    type proposalSignedUrlResponse{
        code: Int
        message: String
        data: JSON
    }

    type postBetaQuoteResponse{
        code:Int
        message:String
        quoteid:String
    }

    type saveBetaQuoteDetailsResponse{
        code: Int
        message: String
    }

    type UpdateQuoteDetailsResponse{
        code: Int
        message: String
        data: String
    }

    type ValidateXmlResponse{
        code: Int
        message: String
        data: XmlResponse
    }

    type XmlResponse{
        customerName: String
        attachment: String
        filekey: String
        location: String
        modularValue: Float
        modularDiscountValue: Int
        modularFixedDiscount: Int
        modularBaseAmount: Float
        modularTotalTax: Float
        modularTotalAmount: Float
        modularDiscountedAmount: Float
        siteServiceValue: Float
        siteServiceDiscountValue: Int
        siteServiceFixedDiscount: Int
        siteServiceBaseAmount: Float
        siteServiceTotalTax: Float
        siteServiceTotalAmount: Float
        siteServiceDiscountedAmount: Float
    }

    type XmlResponseProject{
        customerName: String
        attachment: String
        filekey: String
        modularValue: Float
        modularDiscountValue: Int
        modularFixedDiscount: Int
        modularBaseAmount: Float
        modularTotalTax: Float
        modularTotalAmount: Float
        modularDiscountedAmount: Float
        siteServiceValue: Float
        siteServiceDiscountValue: Int
        siteServiceFixedDiscount: Int
        siteServiceBaseAmount: Float
        siteServiceTotalTax: Float
        siteServiceTotalAmount: Float
        siteServiceDiscountedAmount: Float
        totalProjectValue: Float
        achievedRevenueValue: Float
        pendingAmountValue: Float
    }

    type postRoomwiseXmlResponse{
        code: Int
        message: String
        data: XmlResponseProject
    }

    type UpdateDiscountResponse{
        code: Int
        message: String
        data: JSON
    }

    type updateProjectCommercialResponse{
        code: Int
        message: String
        data: JSON
    }

    type deleteRoomwiseResponse{
        code: Int
        message: String
        data: JSON
    }

    type acceptProposalResponse {
        code: Int
        message: String
    }

    type Mutation{
        validateXmlApi(
            base64File: String!
            fileName: String!
            contentType: String!
            modular: Boolean
            siteService: Boolean
            leadId: String!
        ):ValidateXmlResponse

        acceptProposal(
            quoteId: String!,
            proposalStatus: String!,
            ): acceptProposalResponse

        proposalSignedUrl(
            key:String!,
            contentType:String!,
            base64:String!,leadId:String!): proposalSignedUrlResponse

        postBetaQuote(
            opportunityid: String!
            name: String!
            modularAmount: Float!,
            modularDiscount: Int!,
            modularFixedDiscount: Int!,
            siteServiceValue: Float,
            siteServiceDiscount: Int,
            siteServiceFixedDiscount: Int,
            decorValue: Float,
            proposal_link: String!
            contentType: String
            key: String
        ): postBetaQuoteResponse

        saveBetaQuoteApi(
            postgresId: String!,
            opportunityId: String!
            customerName: String!
            name: String!
            modularAmount: Float!,
            modularDiscount: Int!,
            siteServiceValue: Float,
            siteServiceDiscount: Int,
            modulerXmlLink: String!,
            siteServiceXmlLink: String,
            proposalKey: String!,
            proposalLocation: String!
        ): saveBetaQuoteDetailsResponse
        
        UpdateQuoteDetails(
            modularDiscount:Int
            modularFixedDiscount: Int
            siteServiceDiscount:Int
            siteServiceFixedDiscount: Int
            opportunityId:String!
            updateSiteService:Boolean
            updateModular:Boolean
            modulerXmlLink: String
            siteServiceXmlLink: String
            quoteId: String!
            name:String!
        ): UpdateQuoteDetailsResponse

        PostRoomwiseXmlApi(
            base64File: String!
            fileName: String!
            contentType: String!
            projectId: Int!
        ):postRoomwiseXmlResponse

        deleteRoomwise(
            roomType: String!
            ddQuoteId: Int!
        ):deleteRoomwiseResponse

        updateDiscountGeneratePdf(
            modularDiscount: Int
            projectId: Int!
            siteServiceDiscount: Int
            opportunityId: String!
            modularFixedDiscount: Int
            siteServiceFixedDiscount: Int
        ):UpdateDiscountResponse

        updateProjectCommercial(
            projectId: Int!
            projectModularValue: Float!
            projectSiteServicesValue: Float!
            projectPendingAmount: Float!
            totalProjectValue: Float!
            projectAchievedRevenue: Float!
            modularDiscount: Int!
            civilDiscount: Int
            isImosProject: Boolean
            modularPdfJson: pdfRequest
            siteServicePdfJson: pdfRequest
        ):updateProjectCommercialResponse
    }

    input pdfRequest{
        fileKey: String!
        location:String!

    }

    type getRoomlistResponse{
        code: Int,
        message: String,
        data: [JSON]
    }

    type QuotationResponse { 
        code:Int
        message: String
        quotes: [Quote]
    }
    type QuotationByIdResponse { 
        code:Int
        message: String
        quotes: Quote
    }

    type Query{
        getRoomList(
            isPreSales: Boolean!,
            quoteSfId: String,
            quoteId: Int
        ):getRoomlistResponse
        getQuotation(opportunitysfid: String): QuotationResponse
        getQuotationById(quoteid:Int): QuotationByIdResponse
    }

    scalar JSON
    scalar DateTime
`;


/***/ }),

/***/ "./src/api/schema.ts":
/*!***************************!*\
  !*** ./src/api/schema.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "schema": () => (/* binding */ schema)
/* harmony export */ });
/* harmony import */ var _graphql_tools_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/schema */ "@graphql-tools/schema");
/* harmony import */ var _graphql_tools_schema__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_graphql_tools_schema__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _cities_resolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cities/resolver */ "./src/api/cities/resolver.ts");
/* harmony import */ var _cities_typedef__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cities/typedef */ "./src/api/cities/typedef.ts");
/* harmony import */ var _teams_resolvers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./teams/resolvers */ "./src/api/teams/resolvers.ts");
/* harmony import */ var _teams_typedefs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./teams/typedefs */ "./src/api/teams/typedefs.ts");
/* harmony import */ var _users_resolver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./users/resolver */ "./src/api/users/resolver.ts");
/* harmony import */ var _users_typedef__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./users/typedef */ "./src/api/users/typedef.ts");
/* harmony import */ var _api_typedefs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../api/typedefs */ "./src/api/typedefs.ts");
/* harmony import */ var _departments_resolvers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./departments/resolvers */ "./src/api/departments/resolvers.ts");
/* harmony import */ var _api_departments_typedefs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../api/departments/typedefs */ "./src/api/departments/typedefs.ts");
/* harmony import */ var _customers_resolvers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./customers/resolvers */ "./src/api/customers/resolvers.ts");
/* harmony import */ var _customers_typedefs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./customers/typedefs */ "./src/api/customers/typedefs.ts");
/* harmony import */ var _experienceCenter_resolver__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./experienceCenter/resolver */ "./src/api/experienceCenter/resolver.ts");
/* harmony import */ var _experienceCenter_typedef__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./experienceCenter/typedef */ "./src/api/experienceCenter/typedef.ts");
/* harmony import */ var _profiles_typedef__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./profiles/typedef */ "./src/api/profiles/typedef.ts");
/* harmony import */ var _profiles_resolver__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./profiles/resolver */ "./src/api/profiles/resolver.ts");
/* harmony import */ var _projects_typedef__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./projects/typedef */ "./src/api/projects/typedef.ts");
/* harmony import */ var _projects_resolver__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./projects/resolver */ "./src/api/projects/resolver.ts");
/* harmony import */ var _projectMom_typedef__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./projectMom/typedef */ "./src/api/projectMom/typedef.ts");
/* harmony import */ var _projectMom_resolver__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./projectMom/resolver */ "./src/api/projectMom/resolver.ts");
/* harmony import */ var _projectMom_Comments_typedef__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./projectMom/Comments/typedef */ "./src/api/projectMom/Comments/typedef.ts");
/* harmony import */ var _projectMom_Comments_resolver__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./projectMom/Comments/resolver */ "./src/api/projectMom/Comments/resolver.ts");
/* harmony import */ var _paymentMicroservice_paymentRequest_resolver__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./paymentMicroservice/paymentRequest/resolver */ "./src/api/paymentMicroservice/paymentRequest/resolver.ts");
/* harmony import */ var _paymentMicroservice_paymentRequest_typedef__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./paymentMicroservice/paymentRequest/typedef */ "./src/api/paymentMicroservice/paymentRequest/typedef.ts");
/* harmony import */ var _paymentMicroservice_authentication_resolver__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./paymentMicroservice/authentication/resolver */ "./src/api/paymentMicroservice/authentication/resolver.ts");
/* harmony import */ var _paymentMicroservice_authentication_typedef__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./paymentMicroservice/authentication/typedef */ "./src/api/paymentMicroservice/authentication/typedef.ts");
/* harmony import */ var _paymentMicroservice_paymentReceipt_resolver__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./paymentMicroservice/paymentReceipt/resolver */ "./src/api/paymentMicroservice/paymentReceipt/resolver.ts");
/* harmony import */ var _paymentMicroservice_paymentReceipt_typedef__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./paymentMicroservice/paymentReceipt/typedef */ "./src/api/paymentMicroservice/paymentReceipt/typedef.ts");
/* harmony import */ var _paymentMicroservice_customer_resolver__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./paymentMicroservice/customer/resolver */ "./src/api/paymentMicroservice/customer/resolver.ts");
/* harmony import */ var _paymentMicroservice_customer_typedefs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./paymentMicroservice/customer/typedefs */ "./src/api/paymentMicroservice/customer/typedefs.ts");
/* harmony import */ var _paymentMicroservice_project_resolver__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./paymentMicroservice/project/resolver */ "./src/api/paymentMicroservice/project/resolver.ts");
/* harmony import */ var _paymentMicroservice_project_typedef__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./paymentMicroservice/project/typedef */ "./src/api/paymentMicroservice/project/typedef.ts");
/* harmony import */ var _paymentMicroservice_razorpay_resolvers__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./paymentMicroservice/razorpay/resolvers */ "./src/api/paymentMicroservice/razorpay/resolvers.ts");
/* harmony import */ var _paymentMicroservice_razorpay_typedefs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./paymentMicroservice/razorpay/typedefs */ "./src/api/paymentMicroservice/razorpay/typedefs.ts");
/* harmony import */ var _paymentMicroservice_invoice_resolvers__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./paymentMicroservice/invoice/resolvers */ "./src/api/paymentMicroservice/invoice/resolvers.ts");
/* harmony import */ var _paymentMicroservice_invoice_typedefs__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./paymentMicroservice/invoice/typedefs */ "./src/api/paymentMicroservice/invoice/typedefs.ts");
/* harmony import */ var _changeRequest_typedefs__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./changeRequest/typedefs */ "./src/api/changeRequest/typedefs.ts");
/* harmony import */ var _changeRequest_resolvers__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./changeRequest/resolvers */ "./src/api/changeRequest/resolvers.ts");
/* harmony import */ var _leads_typedef__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./leads/typedef */ "./src/api/leads/typedef.ts");
/* harmony import */ var _leads_resolver__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./leads/resolver */ "./src/api/leads/resolver.ts");
/* harmony import */ var _opportunities_typedef__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./opportunities/typedef */ "./src/api/opportunities/typedef.ts");
/* harmony import */ var _opportunities_resolver__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./opportunities/resolver */ "./src/api/opportunities/resolver.ts");
/* harmony import */ var _customers_requirementForm_typedefs__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./customers/requirementForm/typedefs */ "./src/api/customers/requirementForm/typedefs.ts");
/* harmony import */ var _customers_requirementForm_resolvers__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./customers/requirementForm/resolvers */ "./src/api/customers/requirementForm/resolvers.ts");
/* harmony import */ var _widgets_typedef__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./widgets/typedef */ "./src/api/widgets/typedef.ts");
/* harmony import */ var _widgets_resolver__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./widgets/resolver */ "./src/api/widgets/resolver.ts");
/* harmony import */ var _dcSupport_resolvers__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./dcSupport/resolvers */ "./src/api/dcSupport/resolvers.ts");
/* harmony import */ var _dcSupport_typedefs__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./dcSupport/typedefs */ "./src/api/dcSupport/typedefs.ts");
/* harmony import */ var _quotes_typedefs__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./quotes/typedefs */ "./src/api/quotes/typedefs.ts");
/* harmony import */ var _quotes_resolver__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./quotes/resolver */ "./src/api/quotes/resolver.ts");
/* harmony import */ var _customers_BookingForm_typedefs__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./customers/BookingForm/typedefs */ "./src/api/customers/BookingForm/typedefs.ts");
/* harmony import */ var _customers_BookingForm_resolver__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./customers/BookingForm/resolver */ "./src/api/customers/BookingForm/resolver.ts");
/* harmony import */ var _customers_DesignSignoff_typedefs__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./customers/DesignSignoff/typedefs */ "./src/api/customers/DesignSignoff/typedefs.ts");
/* harmony import */ var _customers_DesignSignoff_resolver__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./customers/DesignSignoff/resolver */ "./src/api/customers/DesignSignoff/resolver.ts");
/* harmony import */ var _projects_Smartsheet_resolver__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./projects/Smartsheet/resolver */ "./src/api/projects/Smartsheet/resolver.ts");
/* harmony import */ var _projects_Smartsheet_typedef__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./projects/Smartsheet/typedef */ "./src/api/projects/Smartsheet/typedef.ts");
/* harmony import */ var _homescreenWidgets_resolver__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./homescreenWidgets/resolver */ "./src/api/homescreenWidgets/resolver.ts");
/* harmony import */ var _homescreenWidgets_typedefs__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./homescreenWidgets/typedefs */ "./src/api/homescreenWidgets/typedefs.ts");
/* harmony import */ var _emailNotification_resolver__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./emailNotification/resolver */ "./src/api/emailNotification/resolver.ts");
/* harmony import */ var _emailNotification_typedef__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./emailNotification/typedef */ "./src/api/emailNotification/typedef.ts");




























































const schema = (0,_graphql_tools_schema__WEBPACK_IMPORTED_MODULE_0__.makeExecutableSchema)({
    typeDefs: [
        _cities_typedef__WEBPACK_IMPORTED_MODULE_2__.citiesTypedef,
        _teams_typedefs__WEBPACK_IMPORTED_MODULE_4__.teamsTypedef,
        _users_typedef__WEBPACK_IMPORTED_MODULE_6__.usersTypedef,
        _api_typedefs__WEBPACK_IMPORTED_MODULE_7__.GlobalTypedef,
        _api_departments_typedefs__WEBPACK_IMPORTED_MODULE_9__.departmentTypedef,
        _customers_typedefs__WEBPACK_IMPORTED_MODULE_11__.customerTypedefs,
        _experienceCenter_typedef__WEBPACK_IMPORTED_MODULE_13__.experienceCenterTypedef,
        _profiles_typedef__WEBPACK_IMPORTED_MODULE_14__.profilesTypedef,
        _dcSupport_typedefs__WEBPACK_IMPORTED_MODULE_47__.dcSupportTypedef,
        _projects_typedef__WEBPACK_IMPORTED_MODULE_16__.projectsTypedef,
        _projectMom_typedef__WEBPACK_IMPORTED_MODULE_18__.projectMomTypedef,
        _projectMom_Comments_typedef__WEBPACK_IMPORTED_MODULE_20__.momCommentsTypedef,
        _paymentMicroservice_paymentRequest_typedef__WEBPACK_IMPORTED_MODULE_23__.paymentRequestTypedef,
        _paymentMicroservice_authentication_typedef__WEBPACK_IMPORTED_MODULE_25__.authenticationTokenTypedef,
        _paymentMicroservice_paymentReceipt_typedef__WEBPACK_IMPORTED_MODULE_27__.paymentReceiptTypedef,
        _paymentMicroservice_customer_typedefs__WEBPACK_IMPORTED_MODULE_29__.customerPaymentTypedef,
        _paymentMicroservice_project_typedef__WEBPACK_IMPORTED_MODULE_31__.ProjectaymentTypedef,
        _paymentMicroservice_razorpay_typedefs__WEBPACK_IMPORTED_MODULE_33__.RazorpayTypedef,
        _customers_requirementForm_typedefs__WEBPACK_IMPORTED_MODULE_42__.requirementFormTypedef,
        _paymentMicroservice_invoice_typedefs__WEBPACK_IMPORTED_MODULE_35__.InvoiceTypedef,
        _changeRequest_typedefs__WEBPACK_IMPORTED_MODULE_36__.changeRequestTypedefs,
        _leads_typedef__WEBPACK_IMPORTED_MODULE_38__.leadsTypedef,
        _opportunities_typedef__WEBPACK_IMPORTED_MODULE_40__.opportunityTypedef,
        _customers_requirementForm_typedefs__WEBPACK_IMPORTED_MODULE_42__.requirementFormTypedef,
        _widgets_typedef__WEBPACK_IMPORTED_MODULE_44__.widgetsTypedef,
        _quotes_typedefs__WEBPACK_IMPORTED_MODULE_48__.quotationTypedef,
        _customers_BookingForm_typedefs__WEBPACK_IMPORTED_MODULE_50__.bookingFormTypedef,
        _customers_DesignSignoff_typedefs__WEBPACK_IMPORTED_MODULE_52__.designSignoffTypedef,
        _api_departments_typedefs__WEBPACK_IMPORTED_MODULE_9__.departmentTypedef,
        _projects_Smartsheet_typedef__WEBPACK_IMPORTED_MODULE_55__.smartSheetTypedef,
        _homescreenWidgets_typedefs__WEBPACK_IMPORTED_MODULE_57__.homescreenWidgetTypedef,
        _emailNotification_typedef__WEBPACK_IMPORTED_MODULE_59__.triggerEmailTypedef
    ],
    resolvers: [
        _cities_resolver__WEBPACK_IMPORTED_MODULE_1__.citiesResolver,
        _teams_resolvers__WEBPACK_IMPORTED_MODULE_3__.teamsResolver,
        _users_resolver__WEBPACK_IMPORTED_MODULE_5__.usersResolver,
        _customers_resolvers__WEBPACK_IMPORTED_MODULE_10__.customerResolver,
        _experienceCenter_resolver__WEBPACK_IMPORTED_MODULE_12__.experienceCenterResolver,
        _profiles_resolver__WEBPACK_IMPORTED_MODULE_15__.profilesResolver,
        _dcSupport_resolvers__WEBPACK_IMPORTED_MODULE_46__.dcSupportResolver,
        _projects_resolver__WEBPACK_IMPORTED_MODULE_17__.projectsResolver,
        _projectMom_resolver__WEBPACK_IMPORTED_MODULE_19__.projectMomResolver,
        _projectMom_Comments_resolver__WEBPACK_IMPORTED_MODULE_21__.momCommentResolver,
        _paymentMicroservice_paymentRequest_resolver__WEBPACK_IMPORTED_MODULE_22__.paymentRequestReslover,
        _paymentMicroservice_authentication_resolver__WEBPACK_IMPORTED_MODULE_24__.authenticationTokenReslover,
        _paymentMicroservice_paymentReceipt_resolver__WEBPACK_IMPORTED_MODULE_26__.paymentReceiptReslover,
        _paymentMicroservice_customer_resolver__WEBPACK_IMPORTED_MODULE_28__.customerPaymentReslovers,
        _paymentMicroservice_project_resolver__WEBPACK_IMPORTED_MODULE_30__.ProjectPaymentReslovers,
        _paymentMicroservice_razorpay_resolvers__WEBPACK_IMPORTED_MODULE_32__.RazorpayReslovers,
        _customers_requirementForm_resolvers__WEBPACK_IMPORTED_MODULE_43__.requirementFormResolver,
        _paymentMicroservice_invoice_resolvers__WEBPACK_IMPORTED_MODULE_34__.InvoiceResolver,
        _changeRequest_resolvers__WEBPACK_IMPORTED_MODULE_37__.changeRequestResolver,
        _leads_resolver__WEBPACK_IMPORTED_MODULE_39__.leadsResolver,
        _opportunities_resolver__WEBPACK_IMPORTED_MODULE_41__.opportunityResolver,
        _customers_requirementForm_resolvers__WEBPACK_IMPORTED_MODULE_43__.requirementFormResolver,
        _widgets_resolver__WEBPACK_IMPORTED_MODULE_45__.widgetsResolver,
        _quotes_resolver__WEBPACK_IMPORTED_MODULE_49__.quotationResolver,
        _customers_BookingForm_resolver__WEBPACK_IMPORTED_MODULE_51__.bookingFormResolver,
        _customers_DesignSignoff_resolver__WEBPACK_IMPORTED_MODULE_53__.designSignoffResolver,
        _departments_resolvers__WEBPACK_IMPORTED_MODULE_8__.departmentResolver,
        _projects_Smartsheet_resolver__WEBPACK_IMPORTED_MODULE_54__.smartSheetResolver,
        _homescreenWidgets_resolver__WEBPACK_IMPORTED_MODULE_56__.homescreenWgidgetResolver,
        _emailNotification_resolver__WEBPACK_IMPORTED_MODULE_58__.trigerEmailResolver
    ],
});


/***/ }),

/***/ "./src/api/teams/mutations.ts":
/*!************************************!*\
  !*** ./src/api/teams/mutations.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addTeam": () => (/* binding */ addTeam),
/* harmony export */   "updateTeam": () => (/* binding */ updateTeam)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../prismaConfig */ "./src/prismaConfig.ts");

const addTeam = async (root, args, context) => {
    let teamResponseObj;
    const { name, odoo_id, reportingmanager, teammailid, teamlead, experiencecenters, cities, teamsdepartment } = args;
    try {
        const team = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.create({
            data: {
                name,
                teammailid,
                reportingmanager,
                teamlead,
                odoo_id,
                create_at: new Date(),
                updated_at: new Date(),
                teamsdepartment
            },
        });
        const experiencecenterArr = [];
        experiencecenters.forEach(async (element) => {
            experiencecenterArr.push({
                teamid: team.id,
                centerid: element,
                created_at: new Date(),
                updated_at: new Date(),
            });
        });
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams_experiencecenters.createMany({ data: experiencecenterArr });
        const citiesArr = [];
        cities.forEach(async (element) => {
            citiesArr.push({
                teamid: team.id,
                cityid: element,
                created_at: new Date(),
                updated_at: new Date(),
            });
        });
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams_city.createMany({ data: citiesArr });
        const teams = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findMany({
            where: { id: team.id },
            include: {
                team_city: {
                    include: { city: true }
                },
                team_experiencecenters: {
                    include: { center: true }
                },
                departments: true
            }
        });
        let Team = await getteam(teams);
        Team = Team.Teams;
        teamResponseObj = { code: 200, message: "success", data: Team };
        return teamResponseObj;
    }
    catch (error) {
        console.log(63, error);
        teamResponseObj = { code: 400, message: error.message };
        return teamResponseObj;
    }
};
const updateTeam = async (root, args, context) => {
    let teamResponseObj;
    try {
        const { id, name, odoo_id, reportingmanager, teammailid, teamlead, teamsdepartment, experiencecenters, cities } = args;
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.update({
            data: {
                name,
                teammailid,
                reportingmanager,
                teamlead,
                odoo_id,
                updated_at: new Date(),
                teamsdepartment
            },
            where: {
                id: id,
            }
        });
        const teamCity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams_city.findMany({ where: { teamid: id } });
        const alreadyAssignedCities = [];
        if (teamCity) {
            teamCity.forEach(async (element) => {
                alreadyAssignedCities.push(element.cityid);
            });
        }
        let citiesInRequest = [];
        citiesInRequest = cities;
        var citiesToAdd = citiesInRequest.filter(function (n) {
            return !this.has(n);
        }, new Set(alreadyAssignedCities));
        let citiesToBeAdded = [];
        const citiesArr = [];
        if (citiesToAdd) {
            citiesToBeAdded = citiesToAdd;
            citiesToBeAdded.forEach(async (element) => {
                citiesArr.push({
                    teamid: id,
                    cityid: element,
                    created_at: new Date(),
                    updated_at: new Date(),
                });
            });
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams_city.createMany({ data: citiesArr });
        }
        var citiesToDelete = alreadyAssignedCities.filter(function (n) {
            return !this.has(n);
        }, new Set(citiesInRequest));
        let citiesToBeDeleted = [];
        if (citiesToDelete) {
            citiesToBeDeleted = citiesToDelete;
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams_city.deleteMany({
                where: {
                    cityid: { in: citiesToBeDeleted },
                    teamid: id
                },
            });
        }
        const teamEC = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams_experiencecenters.findMany({ where: { teamid: id } });
        const alreadyAssignedEC = [];
        if (teamEC === null || teamEC === void 0 ? void 0 : teamEC.length) {
            teamEC.forEach(async (element) => {
                alreadyAssignedEC.push(element.centerid);
            });
        }
        let ECInRequest = [];
        ECInRequest = experiencecenters;
        var ECsToAdd = ECInRequest.filter(function (n) {
            return !this.has(n);
        }, new Set(alreadyAssignedEC));
        let ECsToBeAdded = [];
        const experiencecenterArr = [];
        if (ECsToAdd === null || ECsToAdd === void 0 ? void 0 : ECsToAdd.length) {
            ECsToBeAdded = ECsToAdd;
            ECsToBeAdded.forEach(async (element) => {
                experiencecenterArr.push({
                    teamid: id,
                    centerid: element,
                    created_at: new Date(),
                    updated_at: new Date(),
                });
            });
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams_experiencecenters.createMany({ data: experiencecenterArr });
        }
        var ECsToDelete = alreadyAssignedEC.filter(function (n) {
            return !this.has(n);
        }, new Set(ECInRequest));
        let ECsToBeDeleted = [];
        if (ECsToDelete === null || ECsToDelete === void 0 ? void 0 : ECsToDelete.length) {
            ECsToBeDeleted = ECsToDelete;
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams_experiencecenters.deleteMany({
                where: {
                    centerid: { in: ECsToBeDeleted },
                    teamid: id
                },
            });
        }
        const teams = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findMany({
            where: { id: id },
            include: {
                team_city: {
                    include: { city: true }
                },
                team_experiencecenters: {
                    include: { center: true }
                },
                departments: true
            }
        });
        let Team = await getteam(teams);
        Team = Team.Teams;
        teamResponseObj = { code: 200, message: "success", data: Team };
        return teamResponseObj;
    }
    catch (error) {
        teamResponseObj = { code: 400, message: error.message };
        return teamResponseObj;
    }
};
const getteam = async (teams) => {
    return {
        Teams: teams.map((team) => {
            return Object.assign(Object.assign({}, team), { cities: team.team_city.map((c) => {
                    return { name: c.city.name, id: c.city.id };
                }), experiencecenters: team.team_experiencecenters.map((c) => {
                    return { name: c.center.name, centerid: c.center.centerid };
                }) });
        })
    };
};


/***/ }),

/***/ "./src/api/teams/queries.ts":
/*!**********************************!*\
  !*** ./src/api/teams/queries.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAllTeams": () => (/* binding */ getAllTeams),
/* harmony export */   "getFilteredTeam": () => (/* binding */ getFilteredTeam),
/* harmony export */   "getTeamById": () => (/* binding */ getTeamById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/commonUtils */ "./src/utils/commonUtils.ts");


const getAllTeams = async () => {
    const teams = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findMany({
        include: {
            team_city: {
                include: { city: true },
            },
            team_experiencecenters: {
                include: { center: true },
            },
            reportingmanageruser: true,
            departments: true,
        },
    });
    return {
        Teams: teams.map((team) => {
            return Object.assign(Object.assign({}, team), { cities: team.team_city.map((c) => {
                    return { name: c.city.name, id: c.city.id };
                }), experiencecenters: team.team_experiencecenters.map((c) => {
                    return { name: c.center.name, centerid: c.center.centerid };
                }) });
        }),
    };
};
const getTeamById = async (root, args, context) => {
    const { id } = args;
    try {
        const fetchedTeam = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findUnique({
            where: {
                id: id
            },
            include: {
                team_city: {
                    include: { city: true },
                },
                team_experiencecenters: {
                    include: { center: true },
                },
                departments: true,
            }
        });
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 200;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.data = Object.assign(Object.assign({}, fetchedTeam), { cities: fetchedTeam.team_city.map((c) => {
                return { name: c.city.name, id: c.city.id };
            }), experiencecenters: fetchedTeam.team_experiencecenters.map((c) => {
                return { name: c.center.name, centerid: c.center.centerid };
            }) });
    }
    catch (e) {
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = e.message;
    }
    return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
};
const getFilteredTeam = async (_root, args, _context) => {
    const { department } = args;
    const teams = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findMany({
        where: { department: department },
        include: {
            team_city: {
                include: { city: true },
            },
            departments: true,
        },
    });
    return {
        Teams: teams.map((team) => {
            return Object.assign(Object.assign({}, team), { cities: team.team_city.map((c) => {
                    return { name: c.city.name };
                }) });
        }),
    };
};


/***/ }),

/***/ "./src/api/teams/resolvers.ts":
/*!************************************!*\
  !*** ./src/api/teams/resolvers.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "teamsResolver": () => (/* binding */ teamsResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./queries */ "./src/api/teams/queries.ts");
/* harmony import */ var _mutations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mutations */ "./src/api/teams/mutations.ts");



const teamsResolver = {
    Query: {
        getAllTeams: async () => (0,_queries__WEBPACK_IMPORTED_MODULE_1__.getAllTeams)(),
        getFilteredTeams: async (parent, _args, context) => (0,_queries__WEBPACK_IMPORTED_MODULE_1__.getFilteredTeam)(parent, _args, context),
        getTeamById: async (parent, _args, context) => (0,_queries__WEBPACK_IMPORTED_MODULE_1__.getTeamById)(parent, _args, context)
    },
    Mutation: {
        addTeam: async (parent, _args, context) => (0,_mutations__WEBPACK_IMPORTED_MODULE_2__.addTeam)(parent, _args, context),
        updateTeam: async (parent, _args, context) => (0,_mutations__WEBPACK_IMPORTED_MODULE_2__.updateTeam)(parent, _args, context)
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/teams/typedefs.ts":
/*!***********************************!*\
  !*** ./src/api/teams/typedefs.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "teamsTypedef": () => (/* binding */ teamsTypedef)
/* harmony export */ });
const teamsTypedef = `
    type Teams{
        name:String
        teammailid:String
        reportingmanager:String
        teamlead:String
        department:String
        odoo_id:String
        create_at:DateTime
        updated_at:DateTime
        id:Int
        teamsdepartment:Int
        departments:Department
        cities: [Cities]
        experiencecenters: [ExperienceCenters],
        reportingmanageruser:Users
    }
 
    type getAllTeams{
        Teams: [Teams!]!
    }

    type TeamResponse { 
        code:Int
        message: String
        data:[Teams!]!
    }

    type GetTeamByIdResponse{
        code:Int
        message: String
        data:Teams
    }

    type Query{
        getTeamById(id:Int):GetTeamByIdResponse
        getAllTeams: getAllTeams
        getFilteredTeams(pageIndex: Int, pageSize: Int,department: String): getAllTeams
    }

    type Mutation{
        addTeam(name:String!,
            odoo_id:String,
            reportingmanager:Int!,
            teamlead:String,
            teammailid:String!,
            experiencecenters: [Int]!
            cities: [Int]!,
            teamsdepartment: Int!,
            create_at:DateTime,
            updated_at:DateTime): TeamResponse  
         
        updateTeam(
            id:Int!
            name:String,
            odoo_id:String,
            reportingmanager:Int,
            teamlead:String,
            teammailid:String,
            experiencecenters: [Int]
            cities: [Int],
            teamsdepartment: Int,
            updated_at:DateTime): TeamResponse
    }
    scalar DateTime
`;


/***/ }),

/***/ "./src/api/typedefs.ts":
/*!*****************************!*\
  !*** ./src/api/typedefs.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GlobalTypedef": () => (/* binding */ GlobalTypedef)
/* harmony export */ });
const GlobalTypedef = `
type Profiles {
    profileid: Int!
    profile_name: String
    status: Boolean
    created_date: DateTime
    updated_at: DateTime
}
`;


/***/ }),

/***/ "./src/api/users/Mutations/GetUser.ts":
/*!********************************************!*\
  !*** ./src/api/users/Mutations/GetUser.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUser": () => (/* binding */ getUser)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Queries/GetAllUsers */ "./src/api/users/Queries/GetAllUsers.ts");


const getUser = async (id) => {
    try {
        const fetchedUser = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findMany({
            where: { userid: id },
            include: {
                users_city: {
                    include: { city: true },
                },
                users_experiencecenters: {
                    include: { center: true }
                },
                users_team: {
                    include: { team: true }
                }
            }
        });
        return (0,_Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_1__.mapAllUsers)(fetchedUser);
    }
    catch (e) {
        return e.message;
    }
};


/***/ }),

/***/ "./src/api/users/Mutations/addUser.ts":
/*!********************************************!*\
  !*** ./src/api/users/Mutations/addUser.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addUser": () => (/* binding */ addUser)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/enumerations/ProfileTypeEnumUtil */ "./src/domain/enumerations/ProfileTypeEnumUtil.ts");
/* harmony import */ var _domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../domain/services/baseUseCase/supportpalBaseUseCase */ "./src/domain/services/baseUseCase/supportpalBaseUseCase.ts");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_4__);





const addUserToSf = async (user) => {
    const teamNamesArr = [];
    const experiencCentersArr = [];
    const citiesArr = [];
    const fetchedTeams = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findMany({
        where: {
            OR: user.designer_team.map((team) => {
                return {
                    id: team,
                };
            }),
        },
    });
    fetchedTeams.forEach((team) => {
        teamNamesArr.push(team.name);
    });
    const fetchedExperienceCenters = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findMany({
        where: {
            OR: user.experience_center.map((exp) => {
                return {
                    centerid: exp,
                };
            }),
        },
    });
    fetchedExperienceCenters.forEach((exp) => {
        experiencCentersArr.push(exp.name);
    });
    const fetchedCities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findMany({
        where: {
            OR: user.region.map((city) => {
                return {
                    id: city,
                };
            }),
        },
    });
    fetchedCities.forEach((city) => {
        citiesArr.push(city.name);
    });
    const fetchedProfile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findFirst({
        where: {
            profileid: user.role,
        },
    });
    const payload = {
        name: user.name,
        designer_dashboard_ID: user.designer_dashboard_ID,
        email: user.email,
        mobile: user.mobile,
        isActive: true,
        role: fetchedProfile.profile_name,
        designer_team: teamNamesArr.toString(),
        experience_center: experiencCentersArr.toString(),
        region: citiesArr.toString(),
    };
    const sfResponse = await superagent__WEBPACK_IMPORTED_MODULE_1___default().post(`${process.env.salesforceUrl}/designeruser`)
        .send(payload)
        .set("Content-Type", "application/json");
    if (sfResponse.body.StatusCode === "200") {
        return sfResponse.body.Designer_User_Id;
    }
    return null;
};
const addUser = async (_root, args, _context) => {
    let addUserResponseObj;
    try {
        const { empid, firstname, lastname, middlename, phonenumber, designcafeemail, profileid, reportingmanager, team, experiencecenters, city, } = args;
        const CheckEmailAlreadyExist = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.count({
            where: {
                designcafeemail: designcafeemail
            }
        });
        if (CheckEmailAlreadyExist > 0) {
            return { code: 400, message: 'Email already exists' };
        }
        const user = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.create({
            data: {
                empid: empid,
                firstname,
                lastname,
                middlename,
                phonenumber,
                profileid,
                designcafeemail,
                reportingmanager,
                created_at: new Date(),
                updated_at: new Date(),
            },
        });
        const userPayloadForSF = {
            name: `${firstname === null || firstname === void 0 ? void 0 : firstname.trim()}${middlename ? " " + (middlename === null || middlename === void 0 ? void 0 : middlename.trim()) + " " : " "}${lastname === null || lastname === void 0 ? void 0 : lastname.trim()}`,
            designer_dashboard_ID: user.userid,
            email: designcafeemail,
            mobile: phonenumber,
            isActive: true,
            role: profileid,
            designer_team: team,
            experience_center: experiencecenters,
            region: city,
        };
        const userSFId = await addUserToSf(userPayloadForSF);
        console.log(user.userid, userSFId);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.update({
            where: {
                userid: user.userid,
            },
            data: {
                salesforceuserid: userSFId,
            },
        });
        const userTeamArr = [];
        team.forEach(async (element) => {
            userTeamArr.push({
                userid: user.userid,
                teamid: element,
                created_at: new Date(),
                updated_at: new Date(),
            });
        });
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.createMany({ data: userTeamArr });
        const userCityArr = [];
        city.forEach(async (element) => {
            userCityArr.push({
                userid: user.userid,
                cityid: element,
                created_at: new Date(),
                updated_at: new Date(),
            });
        });
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_city.createMany({ data: userCityArr });
        const userEcArr = [];
        experiencecenters.forEach(async (element) => {
            userEcArr.push({
                userid: user.userid,
                centerid: element,
                created_at: new Date(),
                updated_at: new Date(),
            });
        });
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_experiencecenters.createMany({ data: userEcArr });
        const users = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findMany({
            where: { userid: user.userid },
            include: {
                users_city: {
                    include: { city: true },
                },
                users_experiencecenters: {
                    include: { center: true },
                },
                users_team: {
                    include: { team: true },
                },
            },
        });
        let response;
        if (user.profileid === _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.IN_HOUSE_DESIGNER ||
            user.profileid === _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.DESIGN_PARTNER) {
            await createSupportPalUser(user, 2, response);
        }
        else if (user.profileid === _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.CHM_EXECUTIVE) {
            await createSupportPalUser(user, 3, response);
        }
        addUserResponseObj = {
            code: 200,
            message: "Successfully added user",
            data: users.map((adduser) => {
                return Object.assign(Object.assign({}, adduser), { cities: adduser.users_city.map((c) => {
                        return { id: c.city.id };
                    }), experiencecenters: adduser.users_experiencecenters.map((c) => {
                        return { centerid: c.center.centerid };
                    }), teams: adduser.users_team.map((c) => {
                        return { id: c.team.id };
                    }) });
            }),
        };
        return addUserResponseObj;
    }
    catch (error) {
        addUserResponseObj = { code: 400, message: error.message };
        return addUserResponseObj;
    }
};
const createSupportPalUser = async (user, group, response) => {
    try {
        const operator = await (0,_domain_services_baseUseCase_supportpalBaseUseCase__WEBPACK_IMPORTED_MODULE_3__.SupportPalBaseUsecase)().createOperator({
            firstname: user.firstname,
            lastname: user.lastname,
            email: user.designcafeemail,
            password: process.env.supportPalDCPassword,
            group: group,
        });
        if (!operator.data.id) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_4___default())(400, "Unable to create operator in Salesforce!!");
        }
        console.log("operator.data.id ===========> ", operator.data.id);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.update({
            data: { supportpaloperatorid: operator.data.id },
            where: { userid: user.userid },
        });
        return response;
    }
    catch (error) {
        return { code: 400, message: error.message };
    }
};


/***/ }),

/***/ "./src/api/users/Mutations/editUsers.ts":
/*!**********************************************!*\
  !*** ./src/api/users/Mutations/editUsers.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "editUsers": () => (/* binding */ editUsers)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Queries/GetAllUsers */ "./src/api/users/Queries/GetAllUsers.ts");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_2__);



const addEditedUserDetailsToSf = async (user) => {
    const teamNamesArr = [];
    const experiencCentersArr = [];
    const citiesArr = [];
    const fetchedTeams = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findMany({
        where: {
            OR: user.designer_team.map((team) => {
                return {
                    id: team,
                };
            }),
        },
    });
    fetchedTeams.forEach((team) => {
        teamNamesArr.push(team.name);
    });
    const fetchedExperienceCenters = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findMany({
        where: {
            OR: user.experience_center.map((exp) => {
                return {
                    centerid: exp,
                };
            }),
        },
    });
    fetchedExperienceCenters.forEach((exp) => {
        experiencCentersArr.push(exp.name);
    });
    const fetchedCities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findMany({
        where: {
            OR: user.region.map((city) => {
                return {
                    id: city,
                };
            }),
        },
    });
    fetchedCities.forEach((city) => {
        citiesArr.push(city.name);
    });
    const fetchedProfile = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findFirst({
        where: {
            profileid: user.role,
        },
    });
    const payload = {
        name: user.name,
        designer_dashboard_ID: user.designer_dashboard_ID,
        email: user.email,
        mobile: user.mobile,
        isActive: true,
        role: fetchedProfile.profile_name,
        designer_team: teamNamesArr.toString(),
        experience_center: experiencCentersArr.toString(),
        region: citiesArr.toString(),
    };
    const sfResponse = await superagent__WEBPACK_IMPORTED_MODULE_2___default().post(`${process.env.salesforceUrl}/designeruser`)
        .send(payload)
        .set("Content-Type", "application/json");
    console.log(sfResponse.body);
    if (sfResponse.body.StatusCode === "200") {
        return sfResponse.body.Designer_User_Id;
    }
    return null;
};
const editUsers = async (parent, args, context) => {
    const editUserResponse = {
        code: 200,
        message: "",
        users: null
    };
    try {
        const { id, empid, departmentid, firstname, middlename, lastname, username, phonenumber, designcafeemail, reportingmanager, isbetauser, profileid, cities, experiencecenters, teams } = args;
        const user = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.update({
            data: { empid, departmentid, firstname, middlename, lastname, username, phonenumber, designcafeemail, reportingmanager, isbetauser, profileid },
            where: {
                userid: id
            }
        });
        const userPayloadForSF = {
            name: `${firstname === null || firstname === void 0 ? void 0 : firstname.trim()}${middlename ? " " + (middlename === null || middlename === void 0 ? void 0 : middlename.trim()) + " " : " "}${lastname === null || lastname === void 0 ? void 0 : lastname.trim()}`,
            designer_dashboard_ID: user.userid,
            email: designcafeemail,
            mobile: phonenumber,
            isActive: true,
            role: profileid,
            designer_team: teams,
            experience_center: experiencecenters,
            region: cities,
        };
        const userSFId = await addEditedUserDetailsToSf(userPayloadForSF);
        console.log('*************************');
        console.log(user.userid, userSFId);
        console.log('*************************');
        if (cities) {
            const userCity = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_city.findMany({ where: { userid: id } });
            await manageCitiesWhileEditing(userCity, cities, id);
        }
        if (experiencecenters) {
            const userEC = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_experiencecenters.findMany({ where: { userid: id } });
            await manageECwhileEditing(userEC, experiencecenters, id);
        }
        if (teams) {
            const userTeams = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.findMany({ where: { userid: id } });
            console.log(45, userTeams);
            await manageTeamsWhileEditing(userTeams, teams, id);
        }
        const fetchedUserByUserId = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findMany({
            where: {
                userid: id
            },
            include: {
                users_city: {
                    include: { city: true },
                },
                users_experiencecenters: {
                    include: { center: true }
                },
                users_team: {
                    include: { team: true }
                }
            }
        });
        editUserResponse.users = (0,_Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_1__.mapAllUsers)(fetchedUserByUserId);
    }
    catch (e) {
        console.log(69, e);
        editUserResponse.code = 400;
        editUserResponse.message = e.message;
        editUserResponse.users = null;
    }
    return editUserResponse;
};
const manageCitiesWhileEditing = async (userCity, cities, userid) => {
    const citiesToBeAdded = [];
    const citiesToBeDeleted = [];
    cities.forEach((city) => {
        const isCityAlreadyAdded = userCity.find((cityAssignedToUser) => {
            return cityAssignedToUser.cityid === city;
        });
        if (!isCityAlreadyAdded) {
            citiesToBeAdded.push({
                userid: userid,
                cityid: city,
                created_at: new Date(),
                updated_at: new Date()
            });
        }
    });
    userCity.forEach((cityAssignedToUser) => {
        if (!cities.includes(cityAssignedToUser.cityid)) {
            citiesToBeDeleted.push(cityAssignedToUser.cityid);
        }
    });
    if (citiesToBeAdded.length > 0) {
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_city.createMany({ data: citiesToBeAdded });
    }
    if (citiesToBeDeleted.length > 0) {
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_city.deleteMany({
            where: {
                cityid: { in: citiesToBeDeleted },
                userid: userid
            },
        });
    }
};
const manageECwhileEditing = async (userEC, experiencecenters, userid) => {
    const ecToBeAdded = [];
    const ecToBeDeleted = [];
    experiencecenters.forEach((ec) => {
        const isECAlreadyAdded = userEC.find((experiencCentersAssignedToUsers) => {
            return experiencCentersAssignedToUsers.centerid === ec;
        });
        if (!isECAlreadyAdded) {
            ecToBeAdded.push({
                userid: userid,
                centerid: ec,
                created_at: new Date(),
                updated_at: new Date()
            });
        }
    });
    userEC.forEach((experiencCentersAssignedToUsers) => {
        if (!experiencecenters.includes(experiencCentersAssignedToUsers.centerid)) {
            ecToBeDeleted.push(experiencCentersAssignedToUsers.centerid);
        }
    });
    if (ecToBeAdded.length > 0) {
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_experiencecenters.createMany({
            data: ecToBeAdded
        });
    }
    if (ecToBeDeleted.length > 0) {
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_experiencecenters.deleteMany({
            where: {
                centerid: { in: ecToBeDeleted },
                userid: userid
            },
        });
    }
};
const manageTeamsWhileEditing = async (userTeams, teams, userid) => {
    const teamsToBeAdded = [];
    const teamsToBeDeleted = [];
    teams.forEach((team) => {
        const isTeamsAlreadyAdded = userTeams.find((teamAssignedToUser) => {
            return teamAssignedToUser.teamid === team;
        });
        if (!isTeamsAlreadyAdded) {
            teamsToBeAdded.push({
                userid: userid,
                teamid: team,
                created_at: new Date(),
                updated_at: new Date()
            });
        }
    });
    userTeams.forEach((teamAssignedToUser) => {
        if (!teams.includes(teamAssignedToUser.teamid)) {
            teamsToBeDeleted.push(teamAssignedToUser.teamid);
        }
    });
    if (teamsToBeAdded.length > 0) {
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.createMany({
            data: teamsToBeAdded
        });
    }
    if (teamsToBeDeleted.length > 0) {
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users_team.deleteMany({
            where: {
                teamid: { in: teamsToBeDeleted },
                userid: userid
            },
        });
    }
};


/***/ }),

/***/ "./src/api/users/Queries/GetAllDesigners.ts":
/*!**************************************************!*\
  !*** ./src/api/users/Queries/GetAllDesigners.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAllDesigners": () => (/* binding */ getAllDesigners)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/enumerations/ProfileTypeEnumUtil */ "./src/domain/enumerations/ProfileTypeEnumUtil.ts");


const getAllDesigners = async (_root, _args, _context) => {
    const getAllDesignersResponse = {
        code: 200,
        message: "success",
        designers: null
    };
    try {
        const whereCondition = {};
        whereCondition.OR = [];
        whereCondition.OR.push({ profileid: _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_1__.ProfileTypeEnumCode.STUDIO_MANAGER_DP }, { profileid: _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_1__.ProfileTypeEnumCode.IN_HOUSE_DESIGNER }, { profileid: _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_1__.ProfileTypeEnumCode.ASSOCIATE_STUDIO_MANAGER }, { profileid: _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_1__.ProfileTypeEnumCode.STUDIO_MANAGER }, { profileid: _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_1__.ProfileTypeEnumCode.DESIGN_PARTNER });
        const allDesigners = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findMany({
            where: whereCondition
        });
        console.log(allDesigners);
        getAllDesignersResponse.designers = allDesigners;
    }
    catch (e) {
        getAllDesignersResponse.code = 400;
        getAllDesignersResponse.message = e.message;
        getAllDesignersResponse.designers = null;
    }
    return getAllDesignersResponse;
};


/***/ }),

/***/ "./src/api/users/Queries/GetAllUsers.ts":
/*!**********************************************!*\
  !*** ./src/api/users/Queries/GetAllUsers.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAllUsers": () => (/* binding */ getAllUsers),
/* harmony export */   "mapAllUsers": () => (/* binding */ mapAllUsers)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const getAllUsers = async (_root, args, _context) => {
    const { userType } = args;
    const getAllUsersResponse = {
        code: 200,
        message: "",
        users: null,
    };
    try {
        const allUsers = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findMany({
            where: {
                profileid: userType
            },
            include: {
                users_city: {
                    include: { city: true },
                },
                profile: true,
                users_experiencecenters: {
                    include: { center: true },
                },
                users_team: {
                    include: { team: true },
                },
            }
        });
        getAllUsersResponse.users = mapAllUsers(allUsers);
    }
    catch (e) {
        console.log(38, e);
        getAllUsersResponse.code = 400;
        getAllUsersResponse.message = e.message;
        getAllUsersResponse.users = null;
    }
    return getAllUsersResponse;
};
const mapAllUsers = (allUsers) => {
    return allUsers.map((user) => {
        return Object.assign(Object.assign({}, user), { cities: user.users_city.map((userCity) => {
                var _a, _b, _c, _d, _e, _f;
                return {
                    name: (_a = userCity.city) === null || _a === void 0 ? void 0 : _a.name,
                    status: (_b = userCity.city) === null || _b === void 0 ? void 0 : _b.status,
                    odoo_id: (_c = userCity.city) === null || _c === void 0 ? void 0 : _c.odoo_id,
                    created_at: (_d = userCity.city) === null || _d === void 0 ? void 0 : _d.created_at,
                    updated_at: (_e = userCity.city) === null || _e === void 0 ? void 0 : _e.updated_at,
                    id: (_f = userCity.city) === null || _f === void 0 ? void 0 : _f.id,
                };
            }), teams: user.users_team.map((usersTeam) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                return {
                    name: (_a = usersTeam.team) === null || _a === void 0 ? void 0 : _a.name,
                    teammailid: (_b = usersTeam.team) === null || _b === void 0 ? void 0 : _b.teammailid,
                    reportingmanager: (_c = usersTeam.team) === null || _c === void 0 ? void 0 : _c.reportingmanager,
                    teamlead: (_d = usersTeam.team) === null || _d === void 0 ? void 0 : _d.teamlead,
                    department: (_e = usersTeam.team) === null || _e === void 0 ? void 0 : _e.department,
                    odoo_id: (_f = usersTeam.team) === null || _f === void 0 ? void 0 : _f.odoo_id,
                    create_at: (_g = usersTeam.team) === null || _g === void 0 ? void 0 : _g.create_at,
                    updated_at: (_h = usersTeam.team) === null || _h === void 0 ? void 0 : _h.updated_at,
                    id: (_j = usersTeam.team) === null || _j === void 0 ? void 0 : _j.id,
                    teamsdepartment: (_k = usersTeam.team) === null || _k === void 0 ? void 0 : _k.teamsdepartment,
                };
            }), experiencecenters: user.users_experiencecenters.map((usersExperienceCenters) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                return {
                    centerid: (_a = usersExperienceCenters.center) === null || _a === void 0 ? void 0 : _a.centerid,
                    name: (_b = usersExperienceCenters.center) === null || _b === void 0 ? void 0 : _b.name,
                    odoo_id: (_c = usersExperienceCenters.center) === null || _c === void 0 ? void 0 : _c.odoo_id,
                    created_at: (_d = usersExperienceCenters.center) === null || _d === void 0 ? void 0 : _d.created_at,
                    updated_at: (_e = usersExperienceCenters.center) === null || _e === void 0 ? void 0 : _e.updated_at,
                    ectype: (_f = usersExperienceCenters.center) === null || _f === void 0 ? void 0 : _f.ectype,
                    address: (_g = usersExperienceCenters.center) === null || _g === void 0 ? void 0 : _g.address,
                    centerhead: (_h = usersExperienceCenters.center) === null || _h === void 0 ? void 0 : _h.centerhead,
                    city: (_j = usersExperienceCenters.center) === null || _j === void 0 ? void 0 : _j.city,
                };
            }) });
    });
};


/***/ }),

/***/ "./src/api/users/Queries/GetUserById.ts":
/*!**********************************************!*\
  !*** ./src/api/users/Queries/GetUserById.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUserById": () => (/* binding */ getUserById)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/commonUtils */ "./src/utils/commonUtils.ts");


const getUserById = async (_root, args, _context) => {
    const { id } = args;
    try {
        const fetchedUser = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_users.findUnique({
            where: {
                userid: id,
            },
            include: {
                users_city: {
                    include: { city: true },
                },
                profile: true,
                users_experiencecenters: {
                    include: { center: true },
                },
                users_team: {
                    include: { team: true },
                },
            },
        });
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 200;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.data = Object.assign(Object.assign({}, fetchedUser), { cities: fetchedUser.users_city.map((userCity) => {
                return {
                    name: userCity.city.name,
                    status: userCity.city.status,
                    odoo_id: userCity.city.odoo_id,
                    created_at: userCity.city.created_at,
                    updated_at: userCity.city.updated_at,
                    id: userCity.city.id,
                };
            }), teams: fetchedUser.users_team.map((usersTeam) => {
                return {
                    name: usersTeam.team.name,
                    teammailid: usersTeam.team.teammailid,
                    reportingmanager: usersTeam.team.reportingmanager,
                    teamlead: usersTeam.team.teamlead,
                    department: usersTeam.team.department,
                    odoo_id: usersTeam.team.odoo_id,
                    create_at: usersTeam.team.create_at,
                    updated_at: usersTeam.team.updated_at,
                    id: usersTeam.team.id,
                    teamsdepartment: usersTeam.team.teamsdepartment,
                };
            }), experiencecenters: fetchedUser.users_experiencecenters.map((usersExperienceCenters) => {
                return {
                    centerid: usersExperienceCenters.center.centerid,
                    name: usersExperienceCenters.center.name,
                    odoo_id: usersExperienceCenters.center.odoo_id,
                    created_at: usersExperienceCenters.center.created_at,
                    updated_at: usersExperienceCenters.center.updated_at,
                    ectype: usersExperienceCenters.center.ectype,
                    address: usersExperienceCenters.center.address,
                    centerhead: usersExperienceCenters.center.centerhead,
                    city: usersExperienceCenters.center.city,
                };
            }) });
    }
    catch (e) {
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.code = 400;
        _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj.message = e.message;
    }
    return _utils_commonUtils__WEBPACK_IMPORTED_MODULE_1__.defaultResponseObj;
};


/***/ }),

/***/ "./src/api/users/Queries/GetUserDetailsByAuth.ts":
/*!*******************************************************!*\
  !*** ./src/api/users/Queries/GetUserDetailsByAuth.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUserDetailsByAuth": () => (/* binding */ getUserDetailsByAuth)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");

const getUserDetailsByAuth = async (_parent, _args, context) => {
    const getUserByAuthResponse = { code: 200, message: "", data: null };
    try {
        const userDetails = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        getUserByAuthResponse.data = userDetails;
        getUserByAuthResponse.message = "Success";
    }
    catch (e) {
        getUserByAuthResponse.code = 400;
        getUserByAuthResponse.message = e.message;
    }
    return getUserByAuthResponse;
};


/***/ }),

/***/ "./src/api/users/Queries/ManageUsers.ts":
/*!**********************************************!*\
  !*** ./src/api/users/Queries/ManageUsers.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getManageUsersData": () => (/* binding */ getManageUsersData)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");

const getManageUsersData = async (parent, _args, context) => {
    return {
        Cities: _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_cities.findMany(),
        Departments: _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_department.findMany(),
        Teams: _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_teams.findMany(),
        Profiles: _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_profile.findMany(),
        ExperienceCenters: _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_experiencecenters.findMany(),
    };
};


/***/ }),

/***/ "./src/api/users/Queries/ReIssueAccessToken.ts":
/*!*****************************************************!*\
  !*** ./src/api/users/Queries/ReIssueAccessToken.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "reIssueAccessToken": () => (/* binding */ reIssueAccessToken)
/* harmony export */ });
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/authControl/JwtAuthControl */ "./src/core/authControl/JwtAuthControl.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities */ "./src/api/users/utilities.ts");





const reIssueAccessToken = async (_root, args, _context) => {
    var _a, _b, _c, _d, _e, _f;
    try {
        const token = args.refreshToken;
        const userInfo = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, process.env.jwtSecretRefreshToken, {
            ignoreExpiration: true,
        });
        if (!userInfo.payload.designCafeEmail) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(500, "Something went wrong");
        }
        const email = (_b = (_a = userInfo === null || userInfo === void 0 ? void 0 : userInfo.payload) === null || _a === void 0 ? void 0 : _a.designCafeEmail) === null || _b === void 0 ? void 0 : _b.toLowerCase();
        const user = await _prismaConfig__WEBPACK_IMPORTED_MODULE_3__.prisma.dc_users.findFirst({
            where: { designcafeemail: email },
            include: {
                profile: true,
            },
        });
        if (!user) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, "User not found");
        }
        const rfToken = user === null || user === void 0 ? void 0 : user.refreshtoken;
        if (rfToken !== token) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_3__.prisma.dc_users.update({
                where: { userid: user === null || user === void 0 ? void 0 : user.userid },
                data: {
                    refreshtoken: null,
                },
            });
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, "Bad request");
        }
        const dateNow = new Date();
        const utcSeconds = userInfo.exp;
        const expiry = new Date(0);
        expiry.setUTCSeconds(utcSeconds);
        const data = {};
        if (expiry < dateNow) {
            await _prismaConfig__WEBPACK_IMPORTED_MODULE_3__.prisma.dc_users.update({
                where: { userid: user === null || user === void 0 ? void 0 : user.userid },
                data: {
                    refreshtoken: null,
                },
            });
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(440, "Session expired. Please re-login");
        }
        const loginToken = (0,_core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__.sign)({
            id: user === null || user === void 0 ? void 0 : user.userid,
            designCafeEmail: email,
            role: (_c = user === null || user === void 0 ? void 0 : user.profile) === null || _c === void 0 ? void 0 : _c.profile_name,
            permissions: (0,_utilities__WEBPACK_IMPORTED_MODULE_4__.createPermissionsJson)((_d = user === null || user === void 0 ? void 0 : user.profile) === null || _d === void 0 ? void 0 : _d.permissions),
        }, process.env.jwtSecretAccessToken, process.env.jwtExpiryAccessToken);
        const refreshToken = (0,_core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__.sign)({
            id: user === null || user === void 0 ? void 0 : user.userid,
            designCafeEmail: email,
            role: (_e = user === null || user === void 0 ? void 0 : user.profile) === null || _e === void 0 ? void 0 : _e.profile_name,
        }, process.env.jwtSecretRefreshToken, process.env.jwtExpiryRefreshToken);
        const firstName = user.firstname ? user.firstname.trim() : "";
        const middleName = user.middlename ? user.middlename.trim() : "";
        const lastName = user.lastname ? user.lastname.trim() : "";
        const userName = `${firstName}${middleName ? " " + middleName + " " : " "}${lastName}`;
        data.role = (_f = user === null || user === void 0 ? void 0 : user.profile) === null || _f === void 0 ? void 0 : _f.profile_name;
        data.roleId = user === null || user === void 0 ? void 0 : user.profileid;
        data.loginToken = loginToken;
        data.refreshToken = refreshToken;
        data.userName = userName;
        data.email = user === null || user === void 0 ? void 0 : user.designcafeemail;
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_3__.prisma.dc_users.update({
            where: { userid: user === null || user === void 0 ? void 0 : user.userid },
            data: {
                lastlogindate: new Date(),
                refreshtoken: refreshToken,
            },
        });
        return { code: 200, message: "success", data };
    }
    catch (error) {
        console.error(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/users/Queries/UserAuthenticateApiUseCase.ts":
/*!*************************************************************!*\
  !*** ./src/api/users/Queries/UserAuthenticateApiUseCase.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "googleAuthorize": () => (/* binding */ googleAuthorize)
/* harmony export */ });
/* harmony import */ var _domain_services_oAuth_GoogleOAuth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../domain/services/oAuth/GoogleOAuth */ "./src/domain/services/oAuth/GoogleOAuth.ts");

const googleAuthorize = () => {
    try {
        const client = (0,_domain_services_oAuth_GoogleOAuth__WEBPACK_IMPORTED_MODULE_0__.GoogleOAuth)({
            clientId: process.env.googleAuthClientId,
            clientSecret: process.env.googleAuthSecretKey,
            redirectionUrl: process.env.googleAuthCallbackUrl,
        });
        const url = client.getAuthorizeUrl([
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile",
        ]);
        return { code: 200, message: "success", url: url };
    }
    catch (error) {
        console.error(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/users/Queries/UserAuthenticateCallBack.ts":
/*!***********************************************************!*\
  !*** ./src/api/users/Queries/UserAuthenticateCallBack.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "googleAuthorizeCallBack": () => (/* binding */ googleAuthorizeCallBack)
/* harmony export */ });
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _domain_services_oAuth_GoogleOAuth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/oAuth/GoogleOAuth */ "./src/domain/services/oAuth/GoogleOAuth.ts");
/* harmony import */ var _core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/authControl/JwtAuthControl */ "./src/core/authControl/JwtAuthControl.ts");
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities */ "./src/api/users/utilities.ts");






const googleAuthorizeCallBack = async (_root, args, _context) => {
    var _a, _b, _c, _d;
    try {
        const client = (0,_domain_services_oAuth_GoogleOAuth__WEBPACK_IMPORTED_MODULE_1__.GoogleOAuth)({
            clientId: process.env.googleAuthClientId,
            clientSecret: process.env.googleAuthSecretKey,
            redirectionUrl: process.env.googleAuthCallbackUrl,
        });
        const code = args.code;
        const token = await client.getAccessToken(code);
        const userInfo = (0,_core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__.decodeWithoutVerifying)(token === null || token === void 0 ? void 0 : token.id_token);
        if (!userInfo.email) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(201, "Something went wrong, please contact admin.");
        }
        const email = userInfo.email.toLowerCase();
        await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_3__.domainVerification)(email);
        const user = await _prismaConfig__WEBPACK_IMPORTED_MODULE_4__.prisma.dc_users.findFirst({
            where: { designcafeemail: email },
            include: {
                profile: true,
            },
        });
        if (!user) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, "Sorry Couldn't find your account on the dashboard contact Admin if your account was not created yet, else check if you've logged in with the correct email address");
        }
        const loginToken = (0,_core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__.sign)({
            id: user === null || user === void 0 ? void 0 : user.userid,
            designCafeEmail: email,
            role: (_a = user === null || user === void 0 ? void 0 : user.profile) === null || _a === void 0 ? void 0 : _a.profile_name,
            permissions: (0,_utilities__WEBPACK_IMPORTED_MODULE_5__.createPermissionsJson)((_b = user === null || user === void 0 ? void 0 : user.profile) === null || _b === void 0 ? void 0 : _b.permissions),
        }, process.env.jwtSecretAccessToken, process.env.jwtExpiryAccessToken);
        const refreshToken = (0,_core_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__.sign)({
            id: user === null || user === void 0 ? void 0 : user.userid,
            designCafeEmail: email,
            role: (_c = user === null || user === void 0 ? void 0 : user.profile) === null || _c === void 0 ? void 0 : _c.profile_name,
        }, process.env.jwtSecretRefreshToken, process.env.jwtExpiryRefreshToken);
        await _prismaConfig__WEBPACK_IMPORTED_MODULE_4__.prisma.dc_users.update({
            where: { userid: user === null || user === void 0 ? void 0 : user.userid },
            data: {
                lastlogindate: new Date(),
                refreshtoken: refreshToken,
            },
        });
        const firstName = user.firstname ? user.firstname.trim() : "";
        const middleName = user.middlename ? user.middlename.trim() : "";
        const lastName = user.lastname ? user.lastname.trim() : "";
        const userName = `${firstName}${middleName ? " " + middleName + " " : " "}${lastName}`;
        const data = {
            loginToken,
            refreshToken,
            role: (_d = user === null || user === void 0 ? void 0 : user.profile) === null || _d === void 0 ? void 0 : _d.profile_name,
            roleId: user === null || user === void 0 ? void 0 : user.profileid,
            userName,
            email: user === null || user === void 0 ? void 0 : user.designcafeemail,
        };
        return { code: 200, message: "success", data };
    }
    catch (error) {
        console.error(error);
        throw error;
    }
};


/***/ }),

/***/ "./src/api/users/resolver.ts":
/*!***********************************!*\
  !*** ./src/api/users/resolver.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "usersResolver": () => (/* binding */ usersResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _users_Queries_ManageUsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../users/Queries/ManageUsers */ "./src/api/users/Queries/ManageUsers.ts");
/* harmony import */ var _users_Queries_UserAuthenticateApiUseCase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../users/Queries/UserAuthenticateApiUseCase */ "./src/api/users/Queries/UserAuthenticateApiUseCase.ts");
/* harmony import */ var _users_Queries_UserAuthenticateCallBack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../users/Queries/UserAuthenticateCallBack */ "./src/api/users/Queries/UserAuthenticateCallBack.ts");
/* harmony import */ var _Mutations_editUsers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mutations/editUsers */ "./src/api/users/Mutations/editUsers.ts");
/* harmony import */ var _Mutations_addUser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Mutations/addUser */ "./src/api/users/Mutations/addUser.ts");
/* harmony import */ var _Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Queries/GetAllUsers */ "./src/api/users/Queries/GetAllUsers.ts");
/* harmony import */ var _Queries_ReIssueAccessToken__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Queries/ReIssueAccessToken */ "./src/api/users/Queries/ReIssueAccessToken.ts");
/* harmony import */ var _Queries_GetUserDetailsByAuth__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Queries/GetUserDetailsByAuth */ "./src/api/users/Queries/GetUserDetailsByAuth.ts");
/* harmony import */ var _Queries_GetAllDesigners__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Queries/GetAllDesigners */ "./src/api/users/Queries/GetAllDesigners.ts");
/* harmony import */ var _Queries_GetUserById__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Queries/GetUserById */ "./src/api/users/Queries/GetUserById.ts");











const usersResolver = {
    Query: {
        allManageUsersData: async (parent, _args, context) => (0,_users_Queries_ManageUsers__WEBPACK_IMPORTED_MODULE_1__.getManageUsersData)(parent, _args, context),
        googleAuthorize: () => (0,_users_Queries_UserAuthenticateApiUseCase__WEBPACK_IMPORTED_MODULE_2__.googleAuthorize)(),
        googleAuthorizeCallBack: async (parent, _args, context) => (0,_users_Queries_UserAuthenticateCallBack__WEBPACK_IMPORTED_MODULE_3__.googleAuthorizeCallBack)(parent, _args, context),
        reIssueAccessToken: async (parent, _args, context) => (0,_Queries_ReIssueAccessToken__WEBPACK_IMPORTED_MODULE_7__.reIssueAccessToken)(parent, _args, context),
        getAllUsers: async (parent, _args, context) => (0,_Queries_GetAllUsers__WEBPACK_IMPORTED_MODULE_6__.getAllUsers)(parent, _args, context),
        getUserDetailsByAuth: async (parent, _args, context) => (0,_Queries_GetUserDetailsByAuth__WEBPACK_IMPORTED_MODULE_8__.getUserDetailsByAuth)(parent, _args, context),
        getAllDesigners: async (parent, _args, context) => (0,_Queries_GetAllDesigners__WEBPACK_IMPORTED_MODULE_9__.getAllDesigners)(parent, _args, context),
        getUserById: async (parent, _args, context) => (0,_Queries_GetUserById__WEBPACK_IMPORTED_MODULE_10__.getUserById)(parent, _args, context),
    },
    Mutation: {
        updateUser: (parent, _args, context) => (0,_Mutations_editUsers__WEBPACK_IMPORTED_MODULE_4__.editUsers)(parent, _args, context),
        addUser: async (parent, _args, context) => (0,_Mutations_addUser__WEBPACK_IMPORTED_MODULE_5__.addUser)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/users/typedef.ts":
/*!**********************************!*\
  !*** ./src/api/users/typedef.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "usersTypedef": () => (/* binding */ usersTypedef)
/* harmony export */ });
const usersTypedef = `

    type AllManageUsersData{
        Cities: [Cities!]!,
        Departments: [Department!]!
        Teams: [Teams!]!
        Profiles: [Profiles!]!
        ExperienceCenters: [ExperienceCenters!]!    
    }

    type Users {
        userid : Int!
        roleid : Int
        profile: Profiles
        empid : String
        departmentid : Int
        salesforceimported : Boolean
        firstname : String
        lastname : String
        middlename : String
        username : String
        phonenumber : String
        designcafeemail : String
        reportingmanager : Int
        salesforceuserid : String
        isbetauser : Boolean
        profilepic : String
        lastlogindate : DateTime
        logintoken: String
        refreshtoken: String
        created_at : DateTime
        updated_at : DateTime
        cities: [Cities]
        teams : [Teams]
        experiencecenters : [ExperienceCenters]
    }

    type addUserResponse {
        code: Int
        message: String
        data: [Users]
    } 

    type GetUserDetailsByIdResponse{
        code: Int,
        message: String,
        data: Users
    }

    type GetAllUserResponse {
        code: Int,
        message: String,
        users: [Users]
    }

    type GetUserByIdResponse{
        code: Int,
        message: String,
        data: Users
    }

    type EditUserResponse {
        code: Int,
        message: String,
        users: [Users]
    }
    
    type GoogleAuthorizeResponse {
        code: Int,
        message: String
        url: String
    }

    type GoogleAuthorizeCallbackResponse {
        code: Int!
        message: String!
        data: tokenResponseDD!
    }

    type tokenResponseDD {
        loginToken: String!,
        refreshToken: String!,
        role: String,
        roleId: Int,
        userName: String!,
        email: String!
    }

    type reIssueAccessTokenResponse {
        code: Int!
        message: String!
        data: tokenResponseDD!
    }

    type GetAllDesignersResponse {
        code: Int,
        message: String,
        designers: [Users]
    }

    type Query {
        allManageUsersData: AllManageUsersData
        googleAuthorizeCallBack(code:String): GoogleAuthorizeCallbackResponse
        googleAuthorize: GoogleAuthorizeResponse
        getUserDetailsByAuth:GetUserDetailsByIdResponse
        reIssueAccessToken(refreshToken: String): reIssueAccessTokenResponse
        getAllUsers(userType:Int): GetAllUserResponse
        getAllDesigners: GetAllDesignersResponse
        getUserById(id:Int):GetUserByIdResponse 
    }

    type Mutation{
        updateUser(  
            id:Int,  
            empid:String,
            departmentid:Int,
            firstname:String,
            middlename:String
            lastname:String,
            username:String,
            phonenumber:String,
            designcafeemail:String,
            reportingmanager:Int,
            isbetauser:Boolean,
            profileid:Int,
            cities:[Int],
            experiencecenters:[Int],
            teams:[Int]
            ): EditUserResponse

            addUser (
                empid : String,
                firstname : String,
                lastname : String,
                middlename : String,      
                phonenumber : String,
                designcafeemail : String,
                reportingmanager : Int,
                experiencecenters: [Int],
                profileid:Int,
                team: [Int],
                city: [Int],
                created_at : DateTime,
                updated_at : DateTime
                ): addUserResponse
    }

    scalar DateTime
`;


/***/ }),

/***/ "./src/api/users/utilities.ts":
/*!************************************!*\
  !*** ./src/api/users/utilities.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPermissionsJson": () => (/* binding */ createPermissionsJson)
/* harmony export */ });
const createPermissionsJson = (jsonData) => {
    let data = JSON.stringify(jsonData.permission_details);
    switch (true) {
        case data.includes("true"):
            data = replaceElementInObject(data, "true", "1");
        case data.includes("false"):
            data = replaceElementInObject(data, "false", "0");
        case data.includes("screenName"):
            data = replaceElementInObject(data, "screenName", "sn");
        case data.includes("isChecked"):
            data = replaceElementInObject(data, "isChecked", "ic");
        case data.includes("components"):
            data = replaceElementInObject(data, "components", "c");
        case data.includes("componentName"):
            data = replaceElementInObject(data, "componentName", "cn");
        case data.includes("attributes"):
            data = replaceElementInObject(data, "attributes", "a");
        case data.includes("attributeName"):
            data = replaceElementInObject(data, "attributeName", "an");
        case data.includes("isEditable"):
            data = replaceElementInObject(data, "isEditable", "ie");
        case data.includes("subComponents"):
            data = replaceElementInObject(data, "subComponents", "sc");
        case data.includes("subComponentName"):
            data = replaceElementInObject(data, "subComponentName", "scn");
    }
    const changedData = JSON.parse(data);
    removeEmptyArrays(changedData);
    console.log({ changedData });
    return changedData;
};
const replaceElementInObject = (data, element, changeString) => {
    return data.replace(new RegExp(element, "g"), changeString);
};
const removeEmptyArrays = (changedData) => {
    changedData.forEach((element) => {
        for (const key in element) {
            if (Array.isArray(element[key])) {
                if (!element[key].length) {
                    delete element[key];
                }
                else {
                    removeEmptyArrays(element[key]);
                }
            }
        }
    });
};


/***/ }),

/***/ "./src/api/widgets/Queries/achievedRevenue.ts":
/*!****************************************************!*\
  !*** ./src/api/widgets/Queries/achievedRevenue.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "achievedRevenue": () => (/* binding */ achievedRevenue)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_widgetServices_achievedRevenueRatio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/widgetServices/achievedRevenueRatio */ "./src/domain/services/widgetServices/achievedRevenueRatio.ts");


const achievedRevenue = async (root, args, context) => {
    let totalAchievedRevenueRespone;
    try {
        let res;
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        switch (user.profile.access_level) {
            case 0:
            case 1:
                res = await (0,_domain_services_widgetServices_achievedRevenueRatio__WEBPACK_IMPORTED_MODULE_1__.achievedRevenueRatio)(user, args.month);
                break;
            default:
                totalAchievedRevenueRespone = { code: 200, message: "Dashboards will be added soon for this profile" };
                return totalAchievedRevenueRespone;
        }
        totalAchievedRevenueRespone = { code: 200, message: "success", totalachievedrevenue: res, monthlytarget: user.monthlytarget };
        return totalAchievedRevenueRespone;
    }
    catch (error) {
        totalAchievedRevenueRespone = { code: 400, message: error.message };
        return totalAchievedRevenueRespone;
    }
};


/***/ }),

/***/ "./src/api/widgets/Queries/broadcastedLeads.ts":
/*!*****************************************************!*\
  !*** ./src/api/widgets/Queries/broadcastedLeads.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "broadcastedLeads": () => (/* binding */ broadcastedLeads)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_widgetServices_broadcastedLeadsRatio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/widgetServices/broadcastedLeadsRatio */ "./src/domain/services/widgetServices/broadcastedLeadsRatio.ts");


const broadcastedLeads = async (root, args, context) => {
    let broadcastedLeadsResponse;
    try {
        let res;
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        switch (user.profile.access_level) {
            case 0:
            case 1:
                res = await (0,_domain_services_widgetServices_broadcastedLeadsRatio__WEBPACK_IMPORTED_MODULE_1__.broadcastedLeadsRatio)(user);
                break;
            default:
                broadcastedLeadsResponse = { code: 200, message: "Dashboards will be added soon for this profile" };
                return broadcastedLeadsResponse;
        }
        broadcastedLeadsResponse = { code: 200, message: "success", leads: res };
        return broadcastedLeadsResponse;
    }
    catch (error) {
        broadcastedLeadsResponse = { code: 400, message: error.message };
        return broadcastedLeadsResponse;
    }
};


/***/ }),

/***/ "./src/api/widgets/Queries/conversion.ts":
/*!***********************************************!*\
  !*** ./src/api/widgets/Queries/conversion.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "conversion": () => (/* binding */ conversion)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_widgetServices_leadSummaryRatio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/widgetServices/leadSummaryRatio */ "./src/domain/services/widgetServices/leadSummaryRatio.ts");


const conversion = async (root, args, context) => {
    const { month } = args;
    let conversionResponse;
    try {
        let res;
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        switch (user.profile.access_level) {
            case 0:
            case 1:
                res = await (0,_domain_services_widgetServices_leadSummaryRatio__WEBPACK_IMPORTED_MODULE_1__.leadSummaryRatio)(user, month);
                break;
            default:
                conversionResponse = { code: 200, message: "Dashboards will be added soon for this profile" };
                return conversionResponse;
        }
        conversionResponse = { code: 200, message: "success", percentage: res.percentage, totalMeetingDone: res.meetingDone, closedWon: res.closeWon };
        return conversionResponse;
    }
    catch (error) {
        conversionResponse = { code: 400, message: error.message };
        return conversionResponse;
    }
};


/***/ }),

/***/ "./src/api/widgets/Queries/leadSummary.ts":
/*!************************************************!*\
  !*** ./src/api/widgets/Queries/leadSummary.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "leadSummary": () => (/* binding */ leadSummary)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_widgetServices_leadSummaryRatio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/widgetServices/leadSummaryRatio */ "./src/domain/services/widgetServices/leadSummaryRatio.ts");


const leadSummary = async (root, args, context) => {
    const { month } = args;
    let leadSummaryResponse;
    try {
        let res;
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        switch (user.profile.access_level) {
            case 0:
            case 1:
                res = await (0,_domain_services_widgetServices_leadSummaryRatio__WEBPACK_IMPORTED_MODULE_1__.leadSummaryRatio)(user, month);
                break;
            default:
                leadSummaryResponse = { code: 200, message: "Dashboards will be added soon for this profile" };
                return leadSummaryResponse;
        }
        leadSummaryResponse = { code: 200, message: "success", data: res };
        return leadSummaryResponse;
    }
    catch (error) {
        leadSummaryResponse = { code: 200, message: error.message };
        return leadSummaryResponse;
    }
};


/***/ }),

/***/ "./src/api/widgets/Queries/proposalSent.ts":
/*!*************************************************!*\
  !*** ./src/api/widgets/Queries/proposalSent.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "proposalSent": () => (/* binding */ proposalSent)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_widgetServices_proposalSentRatio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/widgetServices/proposalSentRatio */ "./src/domain/services/widgetServices/proposalSentRatio.ts");


const proposalSent = async (root, args, context) => {
    let proposalSentResponse;
    const { month } = args;
    try {
        let res;
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        switch (user.profile.access_level) {
            case 0:
            case 1:
                res = await (0,_domain_services_widgetServices_proposalSentRatio__WEBPACK_IMPORTED_MODULE_1__.proposalSentRatio)(user, month);
                break;
            default:
                proposalSentResponse = { code: 200, message: "Dashboards will be added soon for this profile" };
                return proposalSentResponse;
        }
        console.log(res);
        proposalSentResponse = { code: 200, message: "success", percentage: res.percentage, totalMeetingDone: res.totalMeetingDone, totalProposalSent: res.totalProposalSent };
        return proposalSentResponse;
    }
    catch (error) {
        proposalSentResponse = { code: 400, message: error.message };
        return proposalSentResponse;
    }
};


/***/ }),

/***/ "./src/api/widgets/Queries/totalActiveProjects.ts":
/*!********************************************************!*\
  !*** ./src/api/widgets/Queries/totalActiveProjects.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "totalActiveProjects": () => (/* binding */ totalActiveProjects)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_widgetServices_totalActiveProjectsRatio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/widgetServices/totalActiveProjectsRatio */ "./src/domain/services/widgetServices/totalActiveProjectsRatio.ts");


const totalActiveProjects = async (root, args, context) => {
    let totalActiveProjectsResponse;
    try {
        let res;
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        switch (user.profile.access_level) {
            case 0:
            case 1:
                res = await (0,_domain_services_widgetServices_totalActiveProjectsRatio__WEBPACK_IMPORTED_MODULE_1__.totalActiveProjectsRatio)(user);
                break;
            default:
                totalActiveProjectsResponse = { code: 200, message: "Dashboards will be added soon for this profile" };
                return totalActiveProjectsResponse;
        }
        console.log(res);
        totalActiveProjectsResponse = { code: 200, message: "success", data: res };
        return totalActiveProjectsResponse;
    }
    catch (error) {
        totalActiveProjectsResponse = { code: 400, message: error.message };
        return totalActiveProjectsResponse;
    }
};


/***/ }),

/***/ "./src/api/widgets/Queries/upcomingMeetings.ts":
/*!*****************************************************!*\
  !*** ./src/api/widgets/Queries/upcomingMeetings.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "upcomingMeetings": () => (/* binding */ upcomingMeetings)
/* harmony export */ });
/* harmony import */ var _core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/authControl/verifyAuthUseCase */ "./src/core/authControl/verifyAuthUseCase.ts");
/* harmony import */ var _domain_services_widgetServices_upcomingMeetingsRatio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../domain/services/widgetServices/upcomingMeetingsRatio */ "./src/domain/services/widgetServices/upcomingMeetingsRatio.ts");


const upcomingMeetings = async (root, args, context) => {
    let upcomingMeetingsResponse;
    try {
        let res;
        const user = await (0,_core_authControl_verifyAuthUseCase__WEBPACK_IMPORTED_MODULE_0__.authenticate)(context, "DD");
        switch (user.profile.access_level) {
            case 0:
            case 1:
                res = await (0,_domain_services_widgetServices_upcomingMeetingsRatio__WEBPACK_IMPORTED_MODULE_1__.upcomingMeetingsRatio)(user, args.timeperiod);
                break;
            default:
                upcomingMeetingsResponse = { code: 200, message: "Dashboards will be added soon for this profile" };
                return upcomingMeetingsResponse;
        }
        upcomingMeetingsResponse = { code: 200, message: "success", data: res.upcomingMeeting };
        return upcomingMeetingsResponse;
    }
    catch (error) {
        upcomingMeetingsResponse = { code: 400, message: error.message };
        return upcomingMeetingsResponse;
    }
};


/***/ }),

/***/ "./src/api/widgets/resolver.ts":
/*!*************************************!*\
  !*** ./src/api/widgets/resolver.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "widgetsResolver": () => (/* binding */ widgetsResolver)
/* harmony export */ });
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-scalars */ "graphql-scalars");
/* harmony import */ var graphql_scalars__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_scalars__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Queries_leadSummary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queries/leadSummary */ "./src/api/widgets/Queries/leadSummary.ts");
/* harmony import */ var _Queries_conversion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Queries/conversion */ "./src/api/widgets/Queries/conversion.ts");
/* harmony import */ var _Queries_upcomingMeetings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Queries/upcomingMeetings */ "./src/api/widgets/Queries/upcomingMeetings.ts");
/* harmony import */ var _Queries_broadcastedLeads__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Queries/broadcastedLeads */ "./src/api/widgets/Queries/broadcastedLeads.ts");
/* harmony import */ var _Queries_proposalSent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Queries/proposalSent */ "./src/api/widgets/Queries/proposalSent.ts");
/* harmony import */ var _Queries_totalActiveProjects__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Queries/totalActiveProjects */ "./src/api/widgets/Queries/totalActiveProjects.ts");
/* harmony import */ var _Queries_achievedRevenue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Queries/achievedRevenue */ "./src/api/widgets/Queries/achievedRevenue.ts");








const widgetsResolver = {
    Query: {
        leadSummary: async (parent, _args, context) => (0,_Queries_leadSummary__WEBPACK_IMPORTED_MODULE_1__.leadSummary)(parent, _args, context),
        conversion: async (parent, _args, context) => (0,_Queries_conversion__WEBPACK_IMPORTED_MODULE_2__.conversion)(parent, _args, context),
        upcomingMeetings: async (parent, _args, context) => (0,_Queries_upcomingMeetings__WEBPACK_IMPORTED_MODULE_3__.upcomingMeetings)(parent, _args, context),
        broadcastedLeads: async (parent, _args, context) => (0,_Queries_broadcastedLeads__WEBPACK_IMPORTED_MODULE_4__.broadcastedLeads)(parent, _args, context),
        proposalSent: async (parent, _args, context) => (0,_Queries_proposalSent__WEBPACK_IMPORTED_MODULE_5__.proposalSent)(parent, _args, context),
        totalActiveProjects: async (parent, _args, context) => (0,_Queries_totalActiveProjects__WEBPACK_IMPORTED_MODULE_6__.totalActiveProjects)(parent, _args, context),
        achievedRevenue: async (parent, _args, context) => (0,_Queries_achievedRevenue__WEBPACK_IMPORTED_MODULE_7__.achievedRevenue)(parent, _args, context),
    },
    DateTime: graphql_scalars__WEBPACK_IMPORTED_MODULE_0__.DateTimeResolver,
};


/***/ }),

/***/ "./src/api/widgets/typedef.ts":
/*!************************************!*\
  !*** ./src/api/widgets/typedef.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "widgetsTypedef": () => (/* binding */ widgetsTypedef)
/* harmony export */ });
const widgetsTypedef = `

type leadSummaryResponse {
    code: Int
    message: String
    data: JSON
}
type conversionResponse {
    code: Int
    message: String
    percentage: Float
    totalMeetingDone: Int
    closedWon: Int
}
type upcomingMeetingsResponse {
    code:Int
    message: String
    data: JSON
}
type broadcastedLeadsResponse {
    code:Int
    message: String
    leads: Int 
}
type proposalSentResponse {
    code:Int
    message: String
    percentage: Float
    totalMeetingDone: Int
    totalProposalSent: Int
}
type totalActiveProjectsResponse {
    code:Int
    message: String
    data: [JSON]
}
type achievedRevenueResponse {
    code:Int
    message: String
    totalachievedrevenue: Int
    monthlytarget: Float
}
   
    type Query {
        leadSummary(month:Int): leadSummaryResponse
        conversion(month:Int): conversionResponse
        upcomingMeetings(timeperiod:Int):upcomingMeetingsResponse
        broadcastedLeads:broadcastedLeadsResponse
        proposalSent(month:Int):proposalSentResponse
        totalActiveProjects:totalActiveProjectsResponse
        achievedRevenue(month: Int):achievedRevenueResponse

    }
  
    scalar DateTime
`;


/***/ }),

/***/ "./src/config.ts":
/*!***********************!*\
  !*** ./src/config.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const config = process.env;
if (false) {}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (config);


/***/ }),

/***/ "./src/core/authControl/JwtAuthControl.ts":
/*!************************************************!*\
  !*** ./src/core/authControl/JwtAuthControl.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decode": () => (/* binding */ decode),
/* harmony export */   "decodeRequestHeader": () => (/* binding */ decodeRequestHeader),
/* harmony export */   "decodeWithoutVerifying": () => (/* binding */ decodeWithoutVerifying),
/* harmony export */   "sign": () => (/* binding */ sign)
/* harmony export */ });
/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);


const sign = (valueToEncode, secret, expiresIn) => {
    try {
        const options = {
            expiresIn,
            issuer: "https://DesignCafe.com",
        };
        return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign({ payload: valueToEncode }, secret, options);
    }
    catch (error) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(500, "InternalServerError");
    }
};
const decode = (verifyToken, secret) => {
    try {
        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(verifyToken, secret, { ignoreExpiration: true });
        console.log(555, decoded);
        return decoded.payload;
    }
    catch (error) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(401, "Unauthorized");
    }
};
const decodeRequestHeader = (req, secret) => {
    try {
        const token = req.headers.authorization;
        return decode(token, secret);
    }
    catch (error) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(401, "Unauthorized");
    }
};
const decodeWithoutVerifying = (token) => {
    try {
        return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().decode(token);
    }
    catch (error) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(401, "Unauthorized");
    }
};


/***/ }),

/***/ "./src/core/authControl/verifyAuthUseCase.ts":
/*!***************************************************!*\
  !*** ./src/core/authControl/verifyAuthUseCase.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "authenticate": () => (/* binding */ authenticate),
/* harmony export */   "authenticateDdCd": () => (/* binding */ authenticateDdCd),
/* harmony export */   "authorize": () => (/* binding */ authorize),
/* harmony export */   "domainVerification": () => (/* binding */ domainVerification),
/* harmony export */   "getAllRoleList": () => (/* binding */ getAllRoleList)
/* harmony export */ });
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../authControl/JwtAuthControl */ "./src/core/authControl/JwtAuthControl.ts");
/* harmony import */ var _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../domain/enumerations/ProfileTypeEnums */ "./src/domain/enumerations/ProfileTypeEnums.ts");




function getAllRoleList() {
    return [
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.SYSTEM_ADMINISTRATOR,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.IN_HOUSE_DESIGNER,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.DESIGN_PARTNER,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.ASSOCIATE_STUDIO_MANAGER,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.STUDIO_MANAGER,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.STUDIO_MANAGER_DP,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.CENTER_DELIVERY_HEAD,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.CITY_DELIVERY_HEAD,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.ALL_INDIA_BUSINESS_HEAD,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.CEO,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.CHM_EXECUTIVE,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.CHM_MANAGER,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.SURVEY_EXECUTIVE,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.SURVEY_MANAGER,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.FINANCE_EXECUTIVE,
        _domain_enumerations_ProfileTypeEnums__WEBPACK_IMPORTED_MODULE_3__.ProfileTypeEnumNames.FRANCHISE_OWNER,
    ];
}
const domainVerification = async (email) => {
    try {
        console.log(575, email);
        const domain = email.split("@")[1];
        if (domain.toLowerCase() !== process.env.emailDomainDC &&
            domain.toLowerCase() !== process.env.emailDomainDCPartner) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, "Unauthorized, email should be a DesignCafe email.");
        }
    }
    catch (error) {
        console.error(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(500, error);
    }
};
const authorize = async (requiredProfileTypes, user) => {
    var _a;
    try {
        if (requiredProfileTypes.indexOf((_a = user === null || user === void 0 ? void 0 : user.profile) === null || _a === void 0 ? void 0 : _a.profile_name) === -1) {
            console.log("BaseUseCase authorize error one");
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, "Unauthorized");
        }
    }
    catch (error) {
        console.log("BaseUseCase authorize error", error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(500, error);
    }
};
const authenticate = async (context, app) => {
    try {
        const token = context.headers.authorization;
        if (!token) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, "Unauthorized");
        }
        const payload = await (0,_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__.decode)(token, process.env.jwtSecretAccessToken);
        const id = payload === null || payload === void 0 ? void 0 : payload.id;
        console.log(payload);
        if (!id) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(403, "Forbidden");
        }
        const dateNow = new Date();
        const utcSeconds = payload.exp;
        const expiry = new Date(0);
        expiry.setUTCSeconds(utcSeconds);
        if (expiry < dateNow) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(498, "Token Expired");
        }
        let user;
        if (app === "CD") {
            user = await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_customer.findFirst({
                where: { customerid: id },
            });
        }
        else if (app === "DD") {
            await domainVerification(payload.designCafeEmail);
            user = await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_users.findFirst({
                where: { userid: id },
                include: {
                    profile: true,
                    users_city: true,
                    users_experiencecenters: true,
                    users_team: true,
                },
            });
        }
        if (user) {
            return user;
        }
        else {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, "UnAuthorized");
        }
    }
    catch (error) {
        console.error(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, error);
    }
};
const authenticateDdCd = async (context) => {
    try {
        const accessToken = context.headers.authorization;
        if (!accessToken) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, "Unauthorized");
        }
        const payloadData = await (0,_authControl_JwtAuthControl__WEBPACK_IMPORTED_MODULE_2__.decode)(accessToken, process.env.jwtSecretAccessToken);
        const id = payloadData === null || payloadData === void 0 ? void 0 : payloadData.id;
        if (!id) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(403, "Forbidden");
        }
        const currentDate = new Date();
        const utcInSeconds = payloadData.exp;
        const expiresIn = new Date(0);
        expiresIn.setUTCSeconds(utcInSeconds);
        if (expiresIn < currentDate) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(498, "Token Expired");
        }
        let customer;
        if (payloadData === null || payloadData === void 0 ? void 0 : payloadData.customerphone) {
            customer = await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_customer.findFirst({
                where: { customerphone: payloadData === null || payloadData === void 0 ? void 0 : payloadData.customerphone },
            });
        }
        let user;
        if (payloadData === null || payloadData === void 0 ? void 0 : payloadData.designCafeEmail) {
            user = await _prismaConfig__WEBPACK_IMPORTED_MODULE_1__.prisma.dc_users.findFirst({
                where: { designcafeemail: payloadData.designCafeEmail },
                include: {
                    users_city: true,
                    users_experiencecenters: true,
                    users_team: true,
                },
            });
        }
        if (user) {
            await domainVerification(payloadData.designCafeEmail);
        }
        if (customer || user) {
            return { user, customer };
        }
        else {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, "UnAuthorized");
        }
    }
    catch (error) {
        console.error(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(500, error);
    }
};


/***/ }),

/***/ "./src/core/email/Email.ts":
/*!*********************************!*\
  !*** ./src/core/email/Email.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var nodemailer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nodemailer */ "nodemailer");
/* harmony import */ var nodemailer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nodemailer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var mailgen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mailgen */ "mailgen");
/* harmony import */ var mailgen__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mailgen__WEBPACK_IMPORTED_MODULE_1__);


class Email {
    constructor(emailId, userName, password, senderId) {
        this.emailId = emailId;
        this.userName = userName;
        this.password = password;
        this.senderId = senderId;
    }
    async sendMail(name, to, subject, body, cc, bcc, attachments) {
        let Response;
        try {
            const mailGenerator = new mailgen__WEBPACK_IMPORTED_MODULE_1__({
                theme: "default",
                product: {
                    name: "Team DC",
                    link: "https://www.designcafe.com/",
                    logo: "https://s3-ap-south-1.amazonaws.com/designcafe-dev/wp-content/uploads/2019/11/17060713/Logo.png",
                },
            });
            const email = {
                body: {
                    greeting: "Dear",
                    name,
                    outro: body,
                    signature: `Thank You!`,
                },
            };
            const transporter = nodemailer__WEBPACK_IMPORTED_MODULE_0__.createTransport({
                host: "email-smtp.ap-south-1.amazonaws.com",
                port: 465,
                secure: true,
                auth: {
                    user: this.userName,
                    pass: this.password,
                },
            });
            const mailOptions = {
                from: `"${this.senderId}" <${this.emailId}>`,
                to,
                cc,
                subject,
                text: mailGenerator.generatePlaintext(email),
                html: body,
                attachments: attachments,
            };
            await transporter.sendMail(mailOptions);
            Response = { code: 200, message: "success" };
        }
        catch (error) {
            console.error("Unable to send Email error", error);
        }
        return Response;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Email);


/***/ }),

/***/ "./src/core/fileStorageServices/AwsStorage.ts":
/*!****************************************************!*\
  !*** ./src/core/fileStorageServices/AwsStorage.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "create": () => (/* binding */ create)
/* harmony export */ });
/* harmony import */ var aws_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-sdk */ "aws-sdk");
/* harmony import */ var aws_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aws_sdk__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_1__);


const create = (awsConstants) => {
    aws_sdk__WEBPACK_IMPORTED_MODULE_0__.config.update({
        accessKeyId: awsConstants.accessKeyId,
        secretAccessKey: awsConstants.secretAccessKey,
        region: awsConstants.region,
    });
    const uploadFileAsBase64 = async (key, contentType, file) => {
        const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3({ params: { Bucket: process.env.awsBucket } });
        const data = {
            Key: key,
            Body: file,
            ContentEncoding: "base64",
            ContentType: contentType,
        };
        return s3.putObject(data).promise();
    };
    const getFileAsBase64 = async (key) => {
        const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3();
        const options = {
            Bucket: process.env.awsBucket,
            Key: key,
        };
        const data = await s3.getObject(options).promise();
        console.log(data, "datainAWs");
        return data ? Buffer.from(data.Body.toString()).toString("binary") : "";
    };
    const getBufferAsBase64 = async (key) => {
        const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3();
        const options = {
            Bucket: process.env.awsBucket,
            Key: key,
        };
        const data = await s3.getObject(options).promise();
        return data ? Buffer.from(data.Body.toString()).toString("base64") : "";
    };
    const getBuffer = async (key) => {
        try {
            const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3();
            const options = {
                Bucket: process.env.awsBucket,
                Key: key,
            };
            const data = await s3.getObject(options).promise();
            return data.Body;
        }
        catch (error) {
            console.log(error);
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_1___default())(500, error);
        }
    };
    const uploadDocumentBuffer = async (key, contentType, base64File) => {
        const buffer = Buffer.from(base64File, "base64");
        return new Promise((resolve, reject) => {
            const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3();
            s3.upload({
                Bucket: process.env.awsBucket,
                Key: key,
                Body: buffer,
                ContentType: contentType,
            }, (err, response) => {
                if (err) {
                    reject(err);
                }
                resolve(response);
            });
        });
    };
    const deleteFromAws = (keys) => {
        const command = { Objects: [], Quiet: true };
        for (const key of keys) {
            command.Objects.push({
                Key: key,
            });
        }
        const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3();
        const options = {
            Bucket: awsConstants.bucket,
            Delete: command,
        };
        return new Promise((resolve) => {
            s3.deleteObjects(options, (error, _data) => {
                error ? resolve(false) : resolve(true);
            });
        });
    };
    const uploadImageBase64 = async (key, contentType, image) => {
        const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3({ params: { Bucket: process.env.awsBucket } });
        const data = {
            Key: key,
            Body: image,
            ContentEncoding: "base64",
            ContentType: contentType,
        };
        await s3.putObject(data).promise();
    };
    const imageAsBase64 = async (key) => {
        const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3();
        const options = {
            Bucket: process.env.awsBucket,
            Key: key,
        };
        const data = await s3.getObject(options).promise();
        return data ? Buffer.from(data.Body.toString()).toString("binary") : "";
    };
    const getFileUrl = async (key, contentType) => {
        const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3();
        return s3.getSignedUrl("getObject", {
            Bucket: process.env.awsBucket,
            Key: key,
            ResponseContentType: contentType,
        });
    };
    const getFileUrlToUpload = async (key, signedUrlExpireTime, contentType) => {
        const s3 = new aws_sdk__WEBPACK_IMPORTED_MODULE_0__.S3();
        return s3.getSignedUrl("putObject", {
            Bucket: process.env.awsBucket,
            Key: key,
            Expires: signedUrlExpireTime,
            ACL: "bucket-owner-full-control",
            ContentType: contentType,
        });
    };
    return {
        getBuffer,
        getFileAsBase64,
        uploadFileAsBase64,
        getBufferAsBase64,
        uploadDocumentBuffer,
        deleteFromAws,
        uploadImageBase64,
        imageAsBase64,
        getFileUrl,
        getFileUrlToUpload,
    };
};


/***/ }),

/***/ "./src/domain/Requestdata/Invoicegenerationrequestmodel.ts":
/*!*****************************************************************!*\
  !*** ./src/domain/Requestdata/Invoicegenerationrequestmodel.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class CreatePayMiInvoice {
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CreatePayMiInvoice);


/***/ }),

/***/ "./src/domain/Requestdata/Microserviceinvoicerequestmodel.ts":
/*!*******************************************************************!*\
  !*** ./src/domain/Requestdata/Microserviceinvoicerequestmodel.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddOnPaymentObject": () => (/* binding */ AddOnPaymentObject),
/* harmony export */   "AddressModel": () => (/* binding */ AddressModel),
/* harmony export */   "MicroserviceResponseModel": () => (/* binding */ MicroserviceResponseModel),
/* harmony export */   "PaymentMilestoneUpdateRequestModel": () => (/* binding */ PaymentMilestoneUpdateRequestModel),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class MicroserviceInvoiceRequestModel {
}
class AddressModel {
}
class AddOnPaymentObject {
}
class MicroserviceResponseModel {
}
class PaymentMilestoneUpdateRequestModel {
}
var PaymentStatusEnum;
(function (PaymentStatusEnum) {
    PaymentStatusEnum["PAID"] = "Paid";
    PaymentStatusEnum["PENDING"] = "Pending";
    PaymentStatusEnum["PARTIAL_PAYMENT"] = "Paid Partially";
})(PaymentStatusEnum || (PaymentStatusEnum = {}));

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MicroserviceInvoiceRequestModel);


/***/ }),

/***/ "./src/domain/Requestdata/Paymentmilestoneupdaterequestmodel.ts":
/*!**********************************************************************!*\
  !*** ./src/domain/Requestdata/Paymentmilestoneupdaterequestmodel.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddOnPaymentObject": () => (/* binding */ AddOnPaymentObject),
/* harmony export */   "AddPaymentReceiptRequestData": () => (/* binding */ AddPaymentReceiptRequestData),
/* harmony export */   "AddressModel": () => (/* binding */ AddressModel),
/* harmony export */   "CaptureManualPaymentModel": () => (/* binding */ CaptureManualPaymentModel),
/* harmony export */   "ClearPaymentRequestModel": () => (/* binding */ ClearPaymentRequestModel),
/* harmony export */   "MicroserviceManualInvoiceRequestModel": () => (/* binding */ MicroserviceManualInvoiceRequestModel),
/* harmony export */   "MilestoneUpdateRequestModel": () => (/* binding */ MilestoneUpdateRequestModel),
/* harmony export */   "PaymentStatusEnum": () => (/* binding */ PaymentStatusEnum),
/* harmony export */   "ProjectUpdateRequestModel": () => (/* binding */ ProjectUpdateRequestModel),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class PaymentMilestoneUpdateRequestModel {
}
class AddPaymentReceiptRequestData {
}
class CaptureManualPaymentModel {
}
class MilestoneUpdateRequestModel {
}
class ProjectUpdateRequestModel {
}
var PaymentStatusEnum;
(function (PaymentStatusEnum) {
    PaymentStatusEnum["PAID"] = "Paid";
    PaymentStatusEnum["PENDING"] = "Pending";
    PaymentStatusEnum["PARTIAL_PAYMENT"] = "Paid Partially";
})(PaymentStatusEnum || (PaymentStatusEnum = {}));
class ClearPaymentRequestModel {
}
class MicroserviceManualInvoiceRequestModel {
}
class AddressModel {
}
class AddOnPaymentObject {
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PaymentMilestoneUpdateRequestModel);


/***/ }),

/***/ "./src/domain/enumerations/ChangeRequestEnums.ts":
/*!*******************************************************!*\
  !*** ./src/domain/enumerations/ChangeRequestEnums.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BookingFormStatusEnumNames": () => (/* binding */ BookingFormStatusEnumNames),
/* harmony export */   "ProjectProposalEnums": () => (/* binding */ ProjectProposalEnums),
/* harmony export */   "ProjectStatusEnum": () => (/* binding */ ProjectStatusEnum),
/* harmony export */   "requestStage": () => (/* binding */ requestStage)
/* harmony export */ });
var requestStage;
(function (requestStage) {
    requestStage["BOOKINGFORM"] = "booking form";
    requestStage["PROJECTPROPOSAL"] = "project proposal";
    requestStage["DESIGNSIGNOFF"] = "design signoff";
})(requestStage || (requestStage = {}));
var BookingFormStatusEnumNames;
(function (BookingFormStatusEnumNames) {
    BookingFormStatusEnumNames["NULL"] = "null";
    BookingFormStatusEnumNames["GENERATED"] = "generated";
    BookingFormStatusEnumNames["CHANGE_REQUESTED"] = "change_requested";
    BookingFormStatusEnumNames["UPDATED"] = "updated";
    BookingFormStatusEnumNames["ACCEPTED"] = "accepted";
})(BookingFormStatusEnumNames || (BookingFormStatusEnumNames = {}));
var ProjectProposalEnums;
(function (ProjectProposalEnums) {
    ProjectProposalEnums["CREATED"] = "created";
    ProjectProposalEnums["PENDING"] = "pending";
    ProjectProposalEnums["ACCEPTED"] = "accepted";
    ProjectProposalEnums["CHANGE_REQUESTED"] = "change_requested";
})(ProjectProposalEnums || (ProjectProposalEnums = {}));
var ProjectStatusEnum;
(function (ProjectStatusEnum) {
    ProjectStatusEnum["DRAFT"] = "Draft";
    ProjectStatusEnum["ACTIVE"] = "Active";
    ProjectStatusEnum["HOLD"] = "Hold";
    ProjectStatusEnum["WITHDRAWN"] = "Withdrawn";
    ProjectStatusEnum["COMPLETED"] = "Completed";
})(ProjectStatusEnum || (ProjectStatusEnum = {}));



/***/ }),

/***/ "./src/domain/enumerations/DesingerAssignStatus.ts":
/*!*********************************************************!*\
  !*** ./src/domain/enumerations/DesingerAssignStatus.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var DesignerAssignStatus;
(function (DesignerAssignStatus) {
    DesignerAssignStatus["PENDING"] = "Designer Assigned, Acceptance Pending";
    DesignerAssignStatus["ACCEPTED"] = "Designer Accepted";
    DesignerAssignStatus["REJECTED"] = "Designer Rejected";
})(DesignerAssignStatus || (DesignerAssignStatus = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DesignerAssignStatus);


/***/ }),

/***/ "./src/domain/enumerations/FileCheckListEnums.ts":
/*!*******************************************************!*\
  !*** ./src/domain/enumerations/FileCheckListEnums.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FileCheckListName": () => (/* binding */ FileCheckListName),
/* harmony export */   "getFileChecklistName": () => (/* binding */ getFileChecklistName)
/* harmony export */ });
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_0__);

var FileCheckListName;
(function (FileCheckListName) {
    FileCheckListName["SURVEY_DRAWINGS"] = "Survey Drawings";
    FileCheckListName["SITE_IMAGES"] = "Site Images";
    FileCheckListName["DESIGN_PRESENTATION"] = "Design Presentation";
    FileCheckListName["MODULAR_QUOTATION"] = "Modular Quotation";
    FileCheckListName["SITE_SERVICES_QUOTATION"] = "Site Services Quotation";
    FileCheckListName["MODULAR_DRAWINGS"] = "Modular Drawings";
    FileCheckListName["SITE_SERVICE_DRAWINGS"] = "Site Service Drawings";
    FileCheckListName["SIGN_OFF_PPT"] = "Sign-off PPT";
    FileCheckListName["FINISHES_AND_HANDLES"] = "Finishes & Handles";
})(FileCheckListName || (FileCheckListName = {}));
var MilestoneCheckListName;
(function (MilestoneCheckListName) {
    MilestoneCheckListName["SURVEY_DRAWINGS"] = "Upload Survey Drawings";
    MilestoneCheckListName["SITE_IMAGES"] = "Upload Site Images";
    MilestoneCheckListName["DESIGN_PRESENTATION"] = "Upload Design Presentation";
})(MilestoneCheckListName || (MilestoneCheckListName = {}));
const getFileChecklistName = async (checkListnameInRequest) => {
    if (!checkListnameInRequest) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, "filename is required");
    }
    const checklistname = checkListnameInRequest.trim();
    if (checklistname === FileCheckListName.SURVEY_DRAWINGS) {
        return MilestoneCheckListName.SURVEY_DRAWINGS;
    }
    else if (checklistname === FileCheckListName.SITE_IMAGES) {
        return MilestoneCheckListName.SITE_IMAGES;
    }
    else if (checklistname === FileCheckListName.DESIGN_PRESENTATION) {
        return MilestoneCheckListName.DESIGN_PRESENTATION;
    }
    else if (checklistname === FileCheckListName.MODULAR_QUOTATION) {
        return FileCheckListName.MODULAR_QUOTATION;
    }
    else if (checklistname === FileCheckListName.SITE_SERVICES_QUOTATION) {
        return FileCheckListName.SITE_SERVICES_QUOTATION;
    }
    else if (checklistname === FileCheckListName.MODULAR_DRAWINGS) {
        return FileCheckListName.MODULAR_DRAWINGS;
    }
    else if (checklistname === FileCheckListName.SITE_SERVICE_DRAWINGS) {
        return FileCheckListName.SITE_SERVICE_DRAWINGS;
    }
    else if (checklistname === FileCheckListName.SIGN_OFF_PPT) {
        return FileCheckListName.SIGN_OFF_PPT;
    }
    else if (checklistname === FileCheckListName.FINISHES_AND_HANDLES) {
        return FileCheckListName.FINISHES_AND_HANDLES;
    }
    else {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, "Invalid filename");
    }
};



/***/ }),

/***/ "./src/domain/enumerations/PaymentCategoryEnum.ts":
/*!********************************************************!*\
  !*** ./src/domain/enumerations/PaymentCategoryEnum.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var PaymentCategoryEnum;
(function (PaymentCategoryEnum) {
    PaymentCategoryEnum["MODULAR"] = "modular";
    PaymentCategoryEnum["SITE_SERVICE"] = "site services";
})(PaymentCategoryEnum || (PaymentCategoryEnum = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PaymentCategoryEnum);


/***/ }),

/***/ "./src/domain/enumerations/PaymentModeEnum.ts":
/*!****************************************************!*\
  !*** ./src/domain/enumerations/PaymentModeEnum.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var PaymentModeEnum;
(function (PaymentModeEnum) {
    PaymentModeEnum[PaymentModeEnum["CHEQUE"] = 0] = "CHEQUE";
    PaymentModeEnum[PaymentModeEnum["CASH"] = 1] = "CASH";
    PaymentModeEnum[PaymentModeEnum["IMPS"] = 2] = "IMPS";
    PaymentModeEnum[PaymentModeEnum["NEFT"] = 3] = "NEFT";
    PaymentModeEnum[PaymentModeEnum["ONLINE"] = 4] = "ONLINE";
    PaymentModeEnum[PaymentModeEnum["CARD"] = 5] = "CARD";
})(PaymentModeEnum || (PaymentModeEnum = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PaymentModeEnum);


/***/ }),

/***/ "./src/domain/enumerations/ProfileTypeEnumUtil.ts":
/*!********************************************************!*\
  !*** ./src/domain/enumerations/ProfileTypeEnumUtil.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProfileTypeEnumCode": () => (/* binding */ ProfileTypeEnumCode)
/* harmony export */ });
var ProfileTypeEnumCode;
(function (ProfileTypeEnumCode) {
    ProfileTypeEnumCode[ProfileTypeEnumCode["SYSTEM_ADMINISTRATOR"] = 8] = "SYSTEM_ADMINISTRATOR";
    ProfileTypeEnumCode[ProfileTypeEnumCode["IN_HOUSE_DESIGNER"] = 4] = "IN_HOUSE_DESIGNER";
    ProfileTypeEnumCode[ProfileTypeEnumCode["DESIGN_PARTNER"] = 17] = "DESIGN_PARTNER";
    ProfileTypeEnumCode[ProfileTypeEnumCode["ASSOCIATE_STUDIO_MANAGER"] = 10] = "ASSOCIATE_STUDIO_MANAGER";
    ProfileTypeEnumCode[ProfileTypeEnumCode["STUDIO_MANAGER"] = 11] = "STUDIO_MANAGER";
    ProfileTypeEnumCode[ProfileTypeEnumCode["STUDIO_MANAGER_DP"] = 3] = "STUDIO_MANAGER_DP";
    ProfileTypeEnumCode[ProfileTypeEnumCode["CENTER_DELIVERY_HEAD"] = 14] = "CENTER_DELIVERY_HEAD";
    ProfileTypeEnumCode[ProfileTypeEnumCode["CITY_DELIVERY_HEAD"] = 1] = "CITY_DELIVERY_HEAD";
    ProfileTypeEnumCode[ProfileTypeEnumCode["ALL_INDIA_BUSINESS_HEAD"] = 6] = "ALL_INDIA_BUSINESS_HEAD";
    ProfileTypeEnumCode[ProfileTypeEnumCode["CEO"] = 9] = "CEO";
    ProfileTypeEnumCode[ProfileTypeEnumCode["CHM_EXECUTIVE"] = 16] = "CHM_EXECUTIVE";
    ProfileTypeEnumCode[ProfileTypeEnumCode["CHM_MANAGER"] = 13] = "CHM_MANAGER";
    ProfileTypeEnumCode[ProfileTypeEnumCode["SURVEY_EXECUTIVE"] = 15] = "SURVEY_EXECUTIVE";
    ProfileTypeEnumCode[ProfileTypeEnumCode["SURVEY_MANAGER"] = 2] = "SURVEY_MANAGER";
    ProfileTypeEnumCode[ProfileTypeEnumCode["THREE_D_DESIGNER_RENDERS"] = 19] = "THREE_D_DESIGNER_RENDERS";
    ProfileTypeEnumCode[ProfileTypeEnumCode["THREE_D_DESIGNER_SHELL"] = 18] = "THREE_D_DESIGNER_SHELL";
    ProfileTypeEnumCode[ProfileTypeEnumCode["THREE_D_MANAGER"] = 7] = "THREE_D_MANAGER";
    ProfileTypeEnumCode[ProfileTypeEnumCode["FINANCE_EXECUTIVE"] = 5] = "FINANCE_EXECUTIVE";
    ProfileTypeEnumCode[ProfileTypeEnumCode["FRANCHISE_OWNER"] = 12] = "FRANCHISE_OWNER";
})(ProfileTypeEnumCode || (ProfileTypeEnumCode = {}));



/***/ }),

/***/ "./src/domain/enumerations/ProfileTypeEnums.ts":
/*!*****************************************************!*\
  !*** ./src/domain/enumerations/ProfileTypeEnums.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ProfileTypeEnumNames": () => (/* binding */ ProfileTypeEnumNames)
/* harmony export */ });
var ProfileTypeEnumNames;
(function (ProfileTypeEnumNames) {
    ProfileTypeEnumNames["SYSTEM_ADMINISTRATOR"] = "System Administrator";
    ProfileTypeEnumNames["IN_HOUSE_DESIGNER"] = "Inhouse Designer";
    ProfileTypeEnumNames["DESIGN_PARTNER"] = "Design Partner";
    ProfileTypeEnumNames["ASSOCIATE_STUDIO_MANAGER"] = "Associate Studio Manager";
    ProfileTypeEnumNames["STUDIO_MANAGER"] = "Studio Manager";
    ProfileTypeEnumNames["STUDIO_MANAGER_DP"] = "Studio Manager - DP";
    ProfileTypeEnumNames["CENTER_DELIVERY_HEAD"] = "Center Delivery Head";
    ProfileTypeEnumNames["CITY_DELIVERY_HEAD"] = "City Delivery Head";
    ProfileTypeEnumNames["ALL_INDIA_BUSINESS_HEAD"] = "All India Business Head";
    ProfileTypeEnumNames["CEO"] = "CEO";
    ProfileTypeEnumNames["CHM_EXECUTIVE"] = "CHM Executive";
    ProfileTypeEnumNames["CHM_MANAGER"] = "CHM Manager";
    ProfileTypeEnumNames["SURVEY_EXECUTIVE"] = "Survey Executive";
    ProfileTypeEnumNames["SURVEY_MANAGER"] = "Survey Manager";
    ProfileTypeEnumNames["FINANCE_EXECUTIVE"] = "Finance Executive";
    ProfileTypeEnumNames["FRANCHISE_OWNER"] = "Franchise Owner";
    ProfileTypeEnumNames["FRANCHISE_DESIGNER"] = "Franchise Designer";
})(ProfileTypeEnumNames || (ProfileTypeEnumNames = {}));



/***/ }),

/***/ "./src/domain/enumerations/ProjectFilterEnum.ts":
/*!******************************************************!*\
  !*** ./src/domain/enumerations/ProjectFilterEnum.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ProjectFilterEnum;
(function (ProjectFilterEnum) {
    ProjectFilterEnum["DESIGNER"] = "designer";
    ProjectFilterEnum["STUDIO"] = "studio";
    ProjectFilterEnum["EC"] = "ec";
    ProjectFilterEnum["CITY"] = "city";
    ProjectFilterEnum["SIGNUP_DATE"] = "sign-up date";
    ProjectFilterEnum["STATUS"] = "status";
    ProjectFilterEnum["CURRENT_STAGE"] = "current stage";
    ProjectFilterEnum["PROJECT_NAME"] = "project name";
})(ProjectFilterEnum || (ProjectFilterEnum = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProjectFilterEnum);


/***/ }),

/***/ "./src/domain/enumerations/ProjectMileStoneEnum.ts":
/*!*********************************************************!*\
  !*** ./src/domain/enumerations/ProjectMileStoneEnum.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ProjectMileStoneEnum;
(function (ProjectMileStoneEnum) {
    ProjectMileStoneEnum["PROJECT_SIGNUP"] = "project signup";
    ProjectMileStoneEnum["SITE_SURVEY"] = "site survey";
    ProjectMileStoneEnum["KNOW_YOUR_CLIENT"] = "know your client";
    ProjectMileStoneEnum["DESIGN_PRESENTATION"] = "design presentation";
    ProjectMileStoneEnum["DESIGN_FINALIZATION"] = "design finalization";
    ProjectMileStoneEnum["SITE_VALIDATION_REQUEST"] = "site validation request";
    ProjectMileStoneEnum["SITE_VALIDATION_MEETING"] = "site validation";
    ProjectMileStoneEnum["POST_SITE_VALIDATION_REVISION"] = "post site validation revision";
    ProjectMileStoneEnum["GFC_CHECKING"] = "gfc checking";
    ProjectMileStoneEnum["DESIGN_SIGNOFF"] = "design sign-off";
    ProjectMileStoneEnum["PRODUCTION_REQUEST"] = "production request";
    ProjectMileStoneEnum["PRODUCTION"] = "production";
    ProjectMileStoneEnum["READY_FOR_DISPATCH"] = "ready for dispatch";
    ProjectMileStoneEnum["READY_FOR_HANDOVER"] = "ready for handover";
    ProjectMileStoneEnum["HANDOVER"] = "handover";
    ProjectMileStoneEnum["DEFAULT_CURRENT_MILESTONE"] = "Site Survey";
    ProjectMileStoneEnum["THIRTYFIVE_PAYMENT"] = "35% Payment Confirmation";
    ProjectMileStoneEnum["FOURTYFIVE_PAYMENT_CONFIRMATION"] = "45% Payment Confirmation";
    ProjectMileStoneEnum["DESIGN_ITERATION"] = "Design Iteration";
    ProjectMileStoneEnum["MATERIAL_SELECTION"] = "Material Selection";
    ProjectMileStoneEnum["FIFTEEN_PAYMENT_CONFIRMATION"] = "15% Payment Confirmation";
})(ProjectMileStoneEnum || (ProjectMileStoneEnum = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProjectMileStoneEnum);


/***/ }),

/***/ "./src/domain/enumerations/ProjectStageEnums.ts":
/*!******************************************************!*\
  !*** ./src/domain/enumerations/ProjectStageEnums.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FifteenPercentStageEnum": () => (/* binding */ FifteenPercentStageEnum),
/* harmony export */   "FortyFivePercentStageEnum": () => (/* binding */ FortyFivePercentStageEnum),
/* harmony export */   "ProjectStageEnumUtil": () => (/* binding */ ProjectStageEnumUtil),
/* harmony export */   "ThirtyFivePercentStageEnum": () => (/* binding */ ThirtyFivePercentStageEnum)
/* harmony export */ });
var FifteenPercentStageEnum;
(function (FifteenPercentStageEnum) {
    FifteenPercentStageEnum[FifteenPercentStageEnum["Project Signup"] = 0] = "Project Signup";
    FifteenPercentStageEnum[FifteenPercentStageEnum["Site Survey"] = 1] = "Site Survey";
    FifteenPercentStageEnum[FifteenPercentStageEnum["KYC"] = 2] = "KYC";
    FifteenPercentStageEnum[FifteenPercentStageEnum["Design Presentation"] = 3] = "Design Presentation";
    FifteenPercentStageEnum[FifteenPercentStageEnum["Design Finalization"] = 4] = "Design Finalization";
})(FifteenPercentStageEnum || (FifteenPercentStageEnum = {}));
var ThirtyFivePercentStageEnum;
(function (ThirtyFivePercentStageEnum) {
    ThirtyFivePercentStageEnum[ThirtyFivePercentStageEnum["Site Validation Request"] = 0] = "Site Validation Request";
    ThirtyFivePercentStageEnum[ThirtyFivePercentStageEnum["Site Validation"] = 1] = "Site Validation";
    ThirtyFivePercentStageEnum[ThirtyFivePercentStageEnum["Post Site Validation Revision"] = 2] = "Post Site Validation Revision";
    ThirtyFivePercentStageEnum[ThirtyFivePercentStageEnum["GFC Checking"] = 3] = "GFC Checking";
    ThirtyFivePercentStageEnum[ThirtyFivePercentStageEnum["Design Sign-Off"] = 4] = "Design Sign-Off";
})(ThirtyFivePercentStageEnum || (ThirtyFivePercentStageEnum = {}));
var FortyFivePercentStageEnum;
(function (FortyFivePercentStageEnum) {
    FortyFivePercentStageEnum[FortyFivePercentStageEnum["Production Request"] = 0] = "Production Request";
    FortyFivePercentStageEnum[FortyFivePercentStageEnum["Production"] = 1] = "Production";
    FortyFivePercentStageEnum[FortyFivePercentStageEnum["Ready for Dispatch"] = 2] = "Ready for Dispatch";
    FortyFivePercentStageEnum[FortyFivePercentStageEnum["Ready for Handover"] = 3] = "Ready for Handover";
    FortyFivePercentStageEnum[FortyFivePercentStageEnum["Handover"] = 4] = "Handover";
})(FortyFivePercentStageEnum || (FortyFivePercentStageEnum = {}));
var ProjectStageEnum;
(function (ProjectStageEnum) {
    ProjectStageEnum["PROJECT_SIGNUP"] = "Project Signup";
    ProjectStageEnum["SITE_SURVEY"] = "Site Survey";
    ProjectStageEnum["KYC"] = "KYC";
    ProjectStageEnum["DESIGN_PRESENTATION"] = "Design Presentation";
    ProjectStageEnum["DESIGN_FINALIZATION"] = "Design Finalization";
    ProjectStageEnum["SITE_VALIDATION_REQUEST"] = "Site Validation Request";
    ProjectStageEnum["SITE_VALIDATION"] = "Site Validation";
    ProjectStageEnum["POST_SITE_VALIDATION_REVISION"] = "Post Site Validation Revision";
    ProjectStageEnum["GFC_CHECKING"] = "GFC Checking";
    ProjectStageEnum["DESIGN_SIGNOFF"] = "Design Sign-Off";
    ProjectStageEnum["PRODUCTION_REQUEST"] = "Production Request";
    ProjectStageEnum["PRODUCTION"] = "Production";
    ProjectStageEnum["READY_FOR_DISPATCH"] = "Ready for Dispatch";
    ProjectStageEnum["READY_FOR_HANDOVER"] = "Ready for Handover";
    ProjectStageEnum["HANDOVER"] = "Handover";
})(ProjectStageEnum || (ProjectStageEnum = {}));
var ProjectStageValue;
(function (ProjectStageValue) {
    ProjectStageValue["FIVE_FIFTEEN"] = "5% - 15%";
    ProjectStageValue["FIFTEEN_THIRTYFIVE"] = "15% - 35%";
    ProjectStageValue["THIRTYFIVE_FORTYFIVE"] = "35% - 45%";
    ProjectStageValue["FORTYFIVE_HANDOVER"] = "45% to handover";
})(ProjectStageValue || (ProjectStageValue = {}));
class ProjectStageEnumUtil {
    static getCurrentMilestone(milestone) {
        let paymentStage;
        switch (milestone) {
            case ProjectStageEnum.PROJECT_SIGNUP:
                paymentStage = ProjectStageValue.FIVE_FIFTEEN;
                break;
            case ProjectStageEnum.SITE_SURVEY:
                paymentStage = ProjectStageValue.FIVE_FIFTEEN;
                break;
            case ProjectStageEnum.KYC:
                paymentStage = ProjectStageValue.FIVE_FIFTEEN;
                break;
            case ProjectStageEnum.DESIGN_PRESENTATION:
                paymentStage = ProjectStageValue.FIVE_FIFTEEN;
                break;
            case ProjectStageEnum.DESIGN_FINALIZATION:
                paymentStage = ProjectStageValue.FIVE_FIFTEEN;
                break;
            case ProjectStageEnum.SITE_VALIDATION_REQUEST:
                paymentStage = ProjectStageValue.FIFTEEN_THIRTYFIVE;
                break;
            case ProjectStageEnum.SITE_VALIDATION:
                paymentStage = ProjectStageValue.FIFTEEN_THIRTYFIVE;
                break;
            case ProjectStageEnum.POST_SITE_VALIDATION_REVISION:
                paymentStage = ProjectStageValue.FIFTEEN_THIRTYFIVE;
                break;
            case ProjectStageEnum.GFC_CHECKING:
                paymentStage = ProjectStageValue.FIFTEEN_THIRTYFIVE;
                break;
            case ProjectStageEnum.DESIGN_SIGNOFF:
                paymentStage = ProjectStageValue.FIFTEEN_THIRTYFIVE;
                break;
            case ProjectStageEnum.PRODUCTION_REQUEST:
                paymentStage = ProjectStageValue.THIRTYFIVE_FORTYFIVE;
                break;
            case ProjectStageEnum.PRODUCTION:
                paymentStage = ProjectStageValue.THIRTYFIVE_FORTYFIVE;
                break;
            case ProjectStageEnum.READY_FOR_DISPATCH:
                paymentStage = ProjectStageValue.THIRTYFIVE_FORTYFIVE;
                break;
            case ProjectStageEnum.READY_FOR_HANDOVER:
                paymentStage = ProjectStageValue.THIRTYFIVE_FORTYFIVE;
                break;
            case ProjectStageEnum.HANDOVER:
                paymentStage = ProjectStageValue.FORTYFIVE_HANDOVER;
                break;
        }
        return paymentStage;
    }
}



/***/ }),

/***/ "./src/domain/enumerations/RoomTypesEnums.ts":
/*!***************************************************!*\
  !*** ./src/domain/enumerations/RoomTypesEnums.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SITE_SERVICE": () => (/* binding */ SITE_SERVICE),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var RoomTypesEnum;
(function (RoomTypesEnum) {
    RoomTypesEnum["KITCHEN"] = "kitchen";
    RoomTypesEnum["UTILITY"] = "Utility";
    RoomTypesEnum["KBR"] = "kbr";
    RoomTypesEnum["MBR"] = "mbr";
    RoomTypesEnum["PBR"] = "pbr";
    RoomTypesEnum["PARENTS_BEDROOM"] = "parent's bedroom";
    RoomTypesEnum["FOYER"] = "foyer";
    RoomTypesEnum["POOJA"] = "pooja";
    RoomTypesEnum["POOJA_ROOM"] = "pooja room";
    RoomTypesEnum["DINING"] = "dining room";
    RoomTypesEnum["MASTER"] = "master";
    RoomTypesEnum["MASTER_BEDROOM"] = "master bedroom";
    RoomTypesEnum["ROOM1"] = "room 1";
    RoomTypesEnum["CBR"] = "cbr";
    RoomTypesEnum["CHILDREN_ROOM"] = "children's bedroom";
    RoomTypesEnum["KIDS_ROOM"] = "kids bedroom";
    RoomTypesEnum["ROOM2"] = "room 2";
    RoomTypesEnum["GBR"] = "gbr";
    RoomTypesEnum["GUEST_BEDROOM"] = "guest bedroom";
    RoomTypesEnum["GUEST_ROOM"] = "guest room";
    RoomTypesEnum["ROOM3"] = "room 3";
    RoomTypesEnum["BDR4"] = "bdr4";
    RoomTypesEnum["BEDROOM4"] = "bedroom 4";
    RoomTypesEnum["ROOM4"] = "room 4";
    RoomTypesEnum["LIVING_DINING"] = "living dining";
    RoomTypesEnum["LIVING"] = "living";
    RoomTypesEnum["LIVING_N_DINING"] = "living & dining";
    RoomTypesEnum["LIVING_AND_DINING"] = "living and dining";
    RoomTypesEnum["SITE_SERVISES"] = "site services";
    RoomTypesEnum["CIVIL"] = "civil";
    RoomTypesEnum["CIVIL_SERVICES"] = "civil services";
    RoomTypesEnum["CIVIL_WORK"] = "civil work";
    RoomTypesEnum["SITE_WORK"] = "site work";
})(RoomTypesEnum || (RoomTypesEnum = {}));
const SITE_SERVICE = [
    RoomTypesEnum.SITE_SERVISES,
    RoomTypesEnum.SITE_WORK,
    RoomTypesEnum.CIVIL,
    RoomTypesEnum.CIVIL_SERVICES,
    RoomTypesEnum.CIVIL_WORK,
];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RoomTypesEnum);


/***/ }),

/***/ "./src/domain/enumerations/SmartSheetCellValueEnum.ts":
/*!************************************************************!*\
  !*** ./src/domain/enumerations/SmartSheetCellValueEnum.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var SmartSheetCellValueEnum;
(function (SmartSheetCellValueEnum) {
    SmartSheetCellValueEnum["CLIENT_NAME"] = "client name";
    SmartSheetCellValueEnum["CLIENT_ID"] = "client id";
    SmartSheetCellValueEnum["CLIENT_EMAIL"] = "client email";
    SmartSheetCellValueEnum["CLIENT_CONTACT"] = "client contact";
    SmartSheetCellValueEnum["PROPERTY_NAME"] = "property name";
    SmartSheetCellValueEnum["PROPERTY_ADDRESS"] = "property address";
    SmartSheetCellValueEnum["DESIGNER_NAME"] = "designer name";
    SmartSheetCellValueEnum["DESIGN_STUDIO"] = "design studio";
    SmartSheetCellValueEnum["SALES_OWNER"] = "sales owner";
    SmartSheetCellValueEnum["PROJECT_SIGNUP_VALUE"] = "project signup value";
    SmartSheetCellValueEnum["STATUS"] = "status";
    SmartSheetCellValueEnum["DESIGN_STAGE"] = "design stage";
    SmartSheetCellValueEnum["DESIGN_ITERATION"] = "design iteration";
    SmartSheetCellValueEnum["MATERIAL_SELECTION"] = "material selection";
    SmartSheetCellValueEnum["PREPARE_GFC"] = "prepare gfc (production drawings)";
    SmartSheetCellValueEnum["SEND_DWGS_GFC"] = "send dwgs for gfc checking";
    SmartSheetCellValueEnum["HANDOVER_DATE"] = "handover date";
    SmartSheetCellValueEnum["REVISED_HANDOVER_DATE"] = "revised handover date";
    SmartSheetCellValueEnum["PROJECT_MANAGER"] = "project manager";
    SmartSheetCellValueEnum["PROJECT_SIGNUP"] = "project signup";
    SmartSheetCellValueEnum["SITE_SURVEY"] = "site survey";
    SmartSheetCellValueEnum["KNOW_YOUR_CLIENT"] = "know your client (kyc)";
    SmartSheetCellValueEnum["FIRST_CUT_MEETING"] = "first cut meeting";
    SmartSheetCellValueEnum["DESIGN_FINALIZATION"] = "design finalization";
    SmartSheetCellValueEnum["REQUEST_PM_FOR_KICKOFF"] = "request pm for kickoff";
    SmartSheetCellValueEnum["KICKOFF_MEETING_AT_SITE"] = "kickoff meeting at site";
    SmartSheetCellValueEnum["DWG_REVISIONS"] = "dwg revisions completed";
    SmartSheetCellValueEnum["GFC_CHECKING"] = "gfc checking";
    SmartSheetCellValueEnum["DESIGN_SIGN_OFF"] = "design sign off";
    SmartSheetCellValueEnum["PROJECT_RECEIVED_FOR_PLANNING"] = "project received for planning";
    SmartSheetCellValueEnum["THIRTYFIVE_PAYMENT_CONFIRMATION"] = "35% payment confirmation";
    SmartSheetCellValueEnum["PRODUCTION"] = "production";
    SmartSheetCellValueEnum["READY_FOR_DISPATCH"] = "ready for dispatch";
    SmartSheetCellValueEnum["READY_FOR_HANDOVER"] = "ready for handover";
    SmartSheetCellValueEnum["HANDOVER"] = "handover";
    SmartSheetCellValueEnum["DESIGN_SIGN_OFF_PRESENTATION"] = "design sign off presentation";
    SmartSheetCellValueEnum["PENDING_HARDWARE_QC"] = "pending hardware qc";
    SmartSheetCellValueEnum["SITE_SURVEY_COMPLETE"] = "site survey complete";
    SmartSheetCellValueEnum["DESIGN_PRESENTATION"] = "design presentation";
    SmartSheetCellValueEnum["FOURTYFIVE_PAYMENT_CONFIRMATION"] = "45% payment confirmation";
    SmartSheetCellValueEnum["FIFTEEN_PAYMENT_CONFIRMATION"] = "15% payment confirmation";
})(SmartSheetCellValueEnum || (SmartSheetCellValueEnum = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SmartSheetCellValueEnum);


/***/ }),

/***/ "./src/domain/enumerations/SmartSheetColumnNameEnum.ts":
/*!*************************************************************!*\
  !*** ./src/domain/enumerations/SmartSheetColumnNameEnum.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var SmartSheetColumnNameEnum;
(function (SmartSheetColumnNameEnum) {
    SmartSheetColumnNameEnum["SUMMARY_DETAILS"] = "summary details";
    SmartSheetColumnNameEnum["ACTUAL_START"] = "actual start";
    SmartSheetColumnNameEnum["ACTUAL_FINISH"] = "actual finish";
    SmartSheetColumnNameEnum["ORIGINAL_PLANNED_START_DATE"] = "original planned start";
    SmartSheetColumnNameEnum["ORIGINAL_PLANNED_FINISH_DATE"] = "original planned finish";
    SmartSheetColumnNameEnum["ASSIGN_TO"] = "assigned to";
    SmartSheetColumnNameEnum["TASK_STATUS"] = "task status";
    SmartSheetColumnNameEnum["CURRENT_FORECAST_START"] = "current forecast start";
    SmartSheetColumnNameEnum["CURRENT_FORECAST_FINISH"] = "current forecast finish";
    SmartSheetColumnNameEnum["TASK_NAME"] = "task name";
})(SmartSheetColumnNameEnum || (SmartSheetColumnNameEnum = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SmartSheetColumnNameEnum);


/***/ }),

/***/ "./src/domain/enumerations/SupportCaseStatusEnum .ts":
/*!***********************************************************!*\
  !*** ./src/domain/enumerations/SupportCaseStatusEnum .ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var SupportCaseStatusEnum;
(function (SupportCaseStatusEnum) {
    SupportCaseStatusEnum[SupportCaseStatusEnum["OPEN"] = 1] = "OPEN";
    SupportCaseStatusEnum[SupportCaseStatusEnum["CLOSED"] = 2] = "CLOSED";
    SupportCaseStatusEnum[SupportCaseStatusEnum["AWAITING_REPLY"] = 3] = "AWAITING_REPLY";
    SupportCaseStatusEnum[SupportCaseStatusEnum["IN_PROGRESS"] = 4] = "IN_PROGRESS";
})(SupportCaseStatusEnum || (SupportCaseStatusEnum = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SupportCaseStatusEnum);


/***/ }),

/***/ "./src/domain/enumerations/SupportPalConcernTypeEnum.ts.ts":
/*!*****************************************************************!*\
  !*** ./src/domain/enumerations/SupportPalConcernTypeEnum.ts.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var SupportPalConcernTypeEnum;
(function (SupportPalConcernTypeEnum) {
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Customer Dashboard"] = 0] = "Customer Dashboard";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["3D Render"] = 1] = "3D Render";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Cancel the Project"] = 2] = "Cancel the Project";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Clarification on Costing"] = 3] = "Clarification on Costing";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Delay compensation"] = 4] = "Delay compensation";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Delay in Design Phase"] = 5] = "Delay in Design Phase";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Design Error"] = 6] = "Design Error";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Incorrect committment on Material"] = 7] = "Incorrect committment on Material";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Incorrect committment on Price"] = 8] = "Incorrect committment on Price";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Issue with design"] = 9] = "Issue with design";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Issue with proposal"] = 10] = "Issue with proposal";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Lack of Communication"] = 11] = "Lack of Communication";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Lack of internal co-ordination"] = 12] = "Lack of internal co-ordination";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Material Selection"] = 13] = "Material Selection";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Not happy with team"] = 14] = "Not happy with team";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Partial refund"] = 15] = "Partial refund";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Poor behaviour"] = 16] = "Poor behaviour";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Project Timelines"] = 17] = "Project Timelines";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Refund"] = 18] = "Refund";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Request for change in PM / Designer"] = 19] = "Request for change in PM / Designer";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Site maintenance"] = 20] = "Site maintenance";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Discounts / EMI Scheme"] = 21] = "Discounts / EMI Scheme";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Dispatch delayed after payment"] = 22] = "Dispatch delayed after payment";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Invoice Related"] = 23] = "Invoice Related";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Referral"] = 24] = "Referral";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Clarity on Warranty"] = 25] = "Clarity on Warranty";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Client Site damaged during installation"] = 26] = "Client Site damaged during installation";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Delay in Production & Installation"] = 27] = "Delay in Production & Installation";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Delay in sharing quote"] = 28] = "Delay in sharing quote";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Design Error Found during Installation"] = 29] = "Design Error Found during Installation";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Execution Delay"] = 30] = "Execution Delay";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Execution Quality"] = 31] = "Execution Quality";
    SupportPalConcernTypeEnum[SupportPalConcernTypeEnum["Issues with site works"] = 32] = "Issues with site works";
})(SupportPalConcernTypeEnum || (SupportPalConcernTypeEnum = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SupportPalConcernTypeEnum);


/***/ }),

/***/ "./src/domain/enumerations/TimePeriodLeadMeetingEnum.ts":
/*!**************************************************************!*\
  !*** ./src/domain/enumerations/TimePeriodLeadMeetingEnum.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TimePeriodLeadMeetingEnum": () => (/* binding */ TimePeriodLeadMeetingEnum),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var TimePeriodLeadMeetingEnum;
(function (TimePeriodLeadMeetingEnum) {
    TimePeriodLeadMeetingEnum[TimePeriodLeadMeetingEnum["THIS_WEEK"] = 0] = "THIS_WEEK";
    TimePeriodLeadMeetingEnum[TimePeriodLeadMeetingEnum["NEXT_WEEK"] = 1] = "NEXT_WEEK";
    TimePeriodLeadMeetingEnum[TimePeriodLeadMeetingEnum["ALL"] = -1] = "ALL";
})(TimePeriodLeadMeetingEnum || (TimePeriodLeadMeetingEnum = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TimePeriodLeadMeetingEnum);


/***/ }),

/***/ "./src/domain/services/baseUseCase/baseUseCase.ts":
/*!********************************************************!*\
  !*** ./src/domain/services/baseUseCase/baseUseCase.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UploadFileOnS3": () => (/* binding */ UploadFileOnS3),
/* harmony export */   "XmlToPdf": () => (/* binding */ XmlToPdf),
/* harmony export */   "addComponentDataToRoomListAndReturn": () => (/* binding */ addComponentDataToRoomListAndReturn),
/* harmony export */   "addRoomNamesAndReturnRoomList": () => (/* binding */ addRoomNamesAndReturnRoomList),
/* harmony export */   "deleteBlob": () => (/* binding */ deleteBlob),
/* harmony export */   "getBuffer": () => (/* binding */ getBuffer),
/* harmony export */   "getConnection": () => (/* binding */ getConnection),
/* harmony export */   "getRoomListArrayFromXmlData": () => (/* binding */ getRoomListArrayFromXmlData),
/* harmony export */   "getRoomNames": () => (/* binding */ getRoomNames),
/* harmony export */   "getUrlToUpload": () => (/* binding */ getUrlToUpload),
/* harmony export */   "triggerEmailNotification": () => (/* binding */ triggerEmailNotification),
/* harmony export */   "uploadFloorPlanAtSalesForce": () => (/* binding */ uploadFloorPlanAtSalesForce)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _core_fileStorageServices_AwsStorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/fileStorageServices/AwsStorage */ "./src/core/fileStorageServices/AwsStorage.ts");
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xml-js */ "xml-js");
/* harmony import */ var xml_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xml_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var jsforce__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jsforce */ "jsforce");
/* harmony import */ var jsforce__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jsforce__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _domain_services_notification_NotificationService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../domain/services/notification/NotificationService */ "./src/domain/services/notification/NotificationService.ts");







async function getConnection() {
    var conn = new jsforce__WEBPACK_IMPORTED_MODULE_3__.Connection({
        loginUrl: process.env.salesforceLoginUrl,
    });
    await conn.login(process.env.salesforceEmail, process.env.salesforcePassword, function (err, _userInfo) {
        console.log(err, "error");
        console.log(conn.accessToken, "ssss");
    });
    return conn;
}
async function UploadFileOnS3(attachment) {
    const key = attachment.key;
    const fileObj = await (0,_core_fileStorageServices_AwsStorage__WEBPACK_IMPORTED_MODULE_1__.create)({
        accessKeyId: process.env.awsAccessKeyId,
        secretAccessKey: process.env.awsSecretAccessKey,
        region: process.env.awsRegion,
        bucket: process.env.awsBucket,
    }).uploadDocumentBuffer(key, attachment.contentType, attachment.base64);
    const attachmentObj = {
        filekey: key,
        location: fileObj.Location,
        contenttype: attachment.contentType,
        customer: attachment.customerid,
        user: attachment.userid,
        ispreorpost: attachment.ispreorpost,
        leadid: attachment.leadid,
        opportunityid: attachment.opportunityid,
        momid: attachment.momid,
        commentid: attachment.commentid,
        displayname: attachment.displayname,
        created_at: new Date(),
    };
    console.log(234, attachmentObj);
    const saveToDb = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.upsert({
        where: {
            location: attachmentObj.location,
        },
        update: attachmentObj,
        create: attachmentObj,
    });
    console.log(saveToDb);
    return saveToDb;
}
const triggerEmailNotification = async (to, subject, content, cc, attachments = null) => {
    content = content.replace(/(\r\n|\r|\n)/g, "<br>");
    const notificationService = new _domain_services_notification_NotificationService__WEBPACK_IMPORTED_MODULE_6__["default"]();
    return notificationService.sendEmail(null, to, subject, content, cc, null, attachments);
};
const deleteBlob = async (keys) => {
    return (0,_core_fileStorageServices_AwsStorage__WEBPACK_IMPORTED_MODULE_1__.create)({
        accessKeyId: process.env.awsAccessKeyId,
        secretAccessKey: process.env.awsSecretAccessKey,
        region: process.env.awsRegion,
        bucket: process.env.awsBucket,
    }).deleteFromAws(keys);
};
async function getBuffer(key) {
    return (0,_core_fileStorageServices_AwsStorage__WEBPACK_IMPORTED_MODULE_1__.create)({
        accessKeyId: process.env.awsAccessKeyId,
        secretAccessKey: process.env.awsSecretAccessKey,
        region: process.env.awsRegion,
        bucket: process.env.awsBucket,
    }).getBuffer(key);
}
async function getUrlToUpload(key, signedUrlExpireTime, contentType) {
    return (0,_core_fileStorageServices_AwsStorage__WEBPACK_IMPORTED_MODULE_1__.create)({
        accessKeyId: process.env.awsAccessKeyId,
        secretAccessKey: process.env.awsSecretAccessKey,
        region: process.env.awsRegion,
        bucket: process.env.awsBucket,
    }).getFileUrlToUpload(key, signedUrlExpireTime, contentType);
}
function getRoomNames(builderList) {
    try {
        const roomsArr = [];
        let count = 1;
        let roomNameObj;
        let roomNameFromSplit;
        let _list = [];
        if (!Array.isArray(builderList)) {
            _list.push(builderList);
        }
        else {
            _list = builderList;
        }
        _list.forEach((element) => {
            if (count === Math.floor(element.hierarchicalPos._text)) {
                roomNameFromSplit = element.PVarString._text.split("ROOMNAME:=");
                if (!roomNameFromSplit[1]) {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_5___default())(400, "Room name not found. Please upload appropriate Xml!");
                }
                roomNameObj = roomNameFromSplit[1];
                roomsArr.push(roomNameObj);
                count++;
            }
        });
        return roomsArr;
    }
    catch (error) {
        console.log(error);
        throw error;
    }
}
function getRoomListArrayFromXmlData(xmlJsonObj, roomList) {
    try {
        const builderList = xmlJsonObj.XML.Order.BuilderList.Set;
        let _list = [];
        if (!Array.isArray(builderList)) {
            _list.push(builderList);
        }
        else {
            _list = builderList;
        }
        let roomsArr = [];
        roomsArr = getRoomNames(_list);
        roomList = addRoomNamesAndReturnRoomList(roomList, roomsArr);
        roomList = addComponentDataToRoomListAndReturn(roomList, _list);
        return roomList;
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_5___default())(500, error);
    }
}
function addRoomNamesAndReturnRoomList(roomList, roomsArr) {
    try {
        let obj;
        for (const room of roomsArr) {
            obj = {
                custRoomName: "",
                roomPrice: "",
                roomCost: "",
                compData: [],
                roomName: "",
                totalQuantity: "",
            };
            obj.custRoomName = room;
            obj.roomName = room;
            roomList.push(obj);
        }
        return roomList;
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_5___default())(500, error);
    }
}
function addComponentDataToRoomListAndReturn(roomList, compSet) {
    try {
        let compObj;
        roomList.forEach((room, index) => {
            let price = 0, totalQuantity = 0;
            compSet.forEach((comp) => {
                compObj = {
                    componentCost: 0,
                    description: "",
                    componentName: "",
                    componentImage: "",
                    componentIndex: "",
                    quantity: 0,
                    totalCompCost: 0,
                };
                if (Math.floor(comp.hierarchicalPos._text) === index + 1) {
                    compObj.componentIndex = comp.hierarchicalPos._text;
                    compObj.componentCost = +comp.ARTICLE_PRICE_INFO1._text;
                    compObj.componentName = comp.ARTICLE_TEXT_INFO1._text;
                    compObj.description = comp.ARTICLE_TEXT_INFO2._text;
                    compObj.componentImage = comp.ARTICLE_IMAGE._text
                        ? comp.ARTICLE_IMAGE._text
                        : "";
                    compObj.quantity = +comp.Count._text;
                    compObj.totalCompCost = +compObj.quantity * +compObj.componentCost;
                    room.compData.push(compObj);
                    price += +compObj.totalCompCost;
                    totalQuantity += compObj.quantity;
                    return;
                }
            });
            room.roomPrice = price.toFixed(2);
            room.roomCost = price.toFixed(2);
            room.totalQuantity = totalQuantity;
        });
        return roomList;
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_5___default())(500, error);
    }
}
async function XmlToPdf(xmlObj) {
    var _a, _b;
    try {
        const { from, file, type, discount, customerId, absoluteDiscount, opportunityId, isPmFeeIncluded, cityPmFee, leadid, displayname, } = xmlObj;
        let pdfName;
        const attachmentObj = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_attachments.findFirst({
            where: {
                location: file,
            },
        });
        if (!attachmentObj) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_5___default())(400, "Attachment not found");
        }
        let _commonRoomList = [];
        const xml = await getBuffer(attachmentObj.filekey);
        const result = await xml_js__WEBPACK_IMPORTED_MODULE_2___default().xml2json(xml, {
            compact: true,
            spaces: 4,
        });
        const mainObj = JSON.parse(result);
        const clientName = mainObj.XML.Order.Head.CONTACT_ADDRESS1._text;
        const absoluteDiscountVal = from === "Sales Force"
            ? absoluteDiscount
            : parseInt(mainObj.XML.Order.Head.CUSTOM_INFO5._text);
        const quote = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.quote.findMany({
            where: { opportunityid: opportunityId },
        });
        const count = quote === null || quote === void 0 ? void 0 : quote.length;
        if (type === "modularXml") {
            pdfName = `${customerId}_${clientName}(${count})modular_myQuote.pdf`;
        }
        else if (type === "siteServiceXml") {
            pdfName = `${customerId}_${clientName}(${count})site_myQuote.pdf`;
        }
        _commonRoomList = getRoomListArrayFromXmlData(mainObj, _commonRoomList);
        const Obj = {
            pdfName,
            leadId: leadid,
            displayName: displayname,
            parsedData: mainObj,
            roomsArray: _commonRoomList,
            discount: discount,
            absoluteDiscount: absoluteDiscountVal || 0,
            opportunityId,
            isPmFeeIncluded,
            cityPmFee,
            clientOrProjectName: clientName,
        };
        const response = await superagent__WEBPACK_IMPORTED_MODULE_4___default().put(`${process.env.PDFGENERATE}/generateProposalPdf`)
            .send(Obj)
            .timeout(180000)
            .set("Content-Type", "application/json");
        return {
            roomList: _commonRoomList,
            s3Location: (_b = (_a = response === null || response === void 0 ? void 0 : response._body) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.Location,
            clientName: clientName,
        };
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_5___default())(500, error);
    }
}
const uploadFloorPlanAtSalesForce = async (body) => {
    try {
        const url = `${process.env.floorPlanSFUrl}/Floorplan`;
        const res = await superagent__WEBPACK_IMPORTED_MODULE_4___default().post(url)
            .send(body)
            .set("Content-Type", "application/json");
        return res === null || res === void 0 ? void 0 : res.body;
    }
    catch (error) {
        console.log(error);
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_5___default())(400, error);
    }
};


/***/ }),

/***/ "./src/domain/services/baseUseCase/supportpalBaseUseCase.ts":
/*!******************************************************************!*\
  !*** ./src/domain/services/baseUseCase/supportpalBaseUseCase.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SupportPalBaseUsecase": () => (/* binding */ SupportPalBaseUsecase)
/* harmony export */ });
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! standard-http-error */ "standard-http-error");
/* harmony import */ var standard_http_error__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(standard_http_error__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../supportpal/SupportPalApi */ "./src/domain/services/supportpal/SupportPalApi.ts");
/* harmony import */ var _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../domain/enumerations/ProfileTypeEnumUtil */ "./src/domain/enumerations/ProfileTypeEnumUtil.ts");



const supportpalapi = new _supportpal_SupportPalApi__WEBPACK_IMPORTED_MODULE_1__["default"]();
const message = "Operator not found";
const SupportPalBaseUsecase = () => {
    const spurl = "ticket/ticket";
    const getAllTickets = async (user, status = null, casenumber = null) => {
        let url = spurl;
        const operatorId = user.supportpaloperatorid;
        const operatorEmail = user.customeremail;
        console.log("OPERATOR EMAIL====>" + operatorEmail);
        console.log("OPERATOR ID====>" + operatorId);
        if (operatorEmail || operatorId) {
            if (operatorId) {
                url += "?user=" + operatorId;
            }
            else if (operatorEmail) {
                const operatorIdFromEmail = await getOrAddUserAndReturnId(operatorEmail, user.name);
                user.supportpaloperatorid = operatorIdFromEmail;
                await user.save();
                if (operatorIdFromEmail) {
                    url += "?user=" + operatorIdFromEmail;
                }
            }
        }
        else {
            throw Error("Kindly update email in view profile");
        }
        if (url !== spurl) {
            if (status) {
                url += "&status=" + status;
            }
            if (casenumber) {
                url += "&number=" + casenumber;
            }
            console.log("SupportPalApi URL ===================================>>>>>>>>>>>>>>>>" +
                url);
            const tickets = await supportpalapi.getFromSupportPalApi(url);
            return tickets;
        }
        else {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, message);
        }
    };
    const getAllTicketsBasedOnUser = async (id, user, supportreq, status, searchKey, searchValue, pageRequestBody) => {
        const { pageSize, pageIndex } = pageRequestBody;
        let url = spurl;
        if (user) {
            switch (user.profileid) {
                case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.IN_HOUSE_DESIGNER:
                case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.DESIGN_PARTNER:
                    url += `?customfield[` + `${id}` + `]=` + `${user.designcafeemail}`;
                    break;
                case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.ASSOCIATE_STUDIO_MANAGER:
                case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.STUDIO_MANAGER:
                case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.STUDIO_MANAGER_DP:
                case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.CENTER_DELIVERY_HEAD:
                case _domain_enumerations_ProfileTypeEnumUtil__WEBPACK_IMPORTED_MODULE_2__.ProfileTypeEnumCode.CITY_DELIVERY_HEAD:
                    url += `?customfield[` + `${id}` + `]=` + `${supportreq}`;
                    break;
                default:
                    url += "?assigned=" + id;
                    break;
            }
        }
        if (url !== spurl) {
            url = await getUrl(url, status, searchKey, searchValue);
            if (pageSize) {
                url += "&limit=" + pageSize;
            }
            if (pageIndex) {
                url += "&start=" + pageIndex;
            }
        }
        else {
            if (pageSize) {
                url += "?limit=" + pageSize;
            }
            if (pageIndex) {
                url += "&start=" + pageIndex;
            }
            url = await getUrl(url, status, searchKey, searchValue);
        }
        console.log("SupportPalApi URL ===================================>>>>>>>>>>>>>>>>" +
            url);
        const tickets = await supportpalapi.getFromSupportPalApi(url);
        return tickets;
    };
    const getTicketMessages = async (ticketId) => {
        const url = `ticket/message?ticket_id=${ticketId}&is_draft=0`;
        const messages = await supportpalapi.getFromSupportPalApi(url);
        return messages;
    };
    const getSupportpalCustomField = () => {
        return {
            MGDC: 133,
            WDC: 134,
            HSRDC: 135,
            "Mumbai DC": 136,
            "Hyderabad DC": 137,
            "Chennai DC": 138,
            JPDC: 272,
            KDRMYS: 273,
            YERPUN: 274,
            BHHYD: 275,
            "Thane DC": 276,
            SJPBLR: 277,
            KHMUM: 278,
            WLMUM: 279,
            OMRCH: 280,
            HRBRBLR: 281,
            Unknown: 139,
            "Pre 5%": 46,
            "5% - 15%": 47,
            "15% - 35%": 48,
            "35% - 45%": 49,
            "45% to handover": 50,
            "Post Handover": 51,
            "Customer Dashboard": 157,
            cf_experienceCenterPk: 22,
            cf_projectNamePk: 3,
            cf_clientidPk: 27,
            cf_projectStagePk: 14,
            cf_sourcePk: 25,
            cf_ticketBucket: 21,
            cf_assigned_designer: 13,
            cf_team_name: 26,
            "TEAM_BHHYD-DPStd-1": 158,
            "TEAM_BHHYD-Std-1": 159,
            "TEAM_Chennai DP": 160,
            "TEAM_Chennai Studio 1": 161,
            "TEAM_DP Bangalore HSRDC": 162,
            "TEAM_DP Bangalore MGDC": 163,
            "TEAM_DP Bangalore WDC": 164,
            "TEAM_DP Hyderabad": 165,
            "TEAM_DP Mumbai": 166,
            "TEAM_DP Thane": 167,
            "TEAM_HSRDC Studio 1": 168,
            "TEAM_Hyderabad Studio 1": 169,
            "TEAM_MGDC Studio 1": 170,
            "TEAM_MGDC Studio 2": 171,
            "TEAM_Mumbai Studio 1": 172,
            "TEAM_Mumbai Studio 2": 173,
            "TEAM_Mumbai Studio 3": 174,
            "TEAM_SJPBLR-Std-1": 288,
            "TEAM_Thane Studio 1": 175,
            "TEAM_WDC Studio 1": 176,
            "TEAM_JPDC XPresso": 283,
            "TEAM_KDRMYS-Std-1": 284,
            "TEAM_KDRMYS-DPStd-1": 285,
            "TEAM_YERPUN-Std-1": 286,
            "TEAM_YERPUN-DPStd-1": 287,
            "TEAM_KHMUM-Std-1": 289,
            "TEAM_KHMUM-DPStd-1": 290,
            "TEAM_WLMUM-Std-1": 291,
            "TEAM_WLMUM-DPStd-1": 292,
            "TEAM_OMRCH-Std-1": 340,
            "TEAM_HRBRBLR-Std-1": 293,
            46: "Pre 5%",
            47: "5% - 15%",
            48: "15% - 35%",
            49: "35% - 45%",
            50: "45% to handover",
            51: "Post Handover",
        };
    };
    return {
        getAllTickets,
        getOrAddOperatorAndReturnId,
        getOrAddUserAndReturnId,
        getSupportpalCustomField,
        getAllTicketsBasedOnUser,
        createOperator,
        createUser,
        getTicketMessages,
    };
};
const getOrAddOperatorAndReturnId = async (email, name, operatorGroup) => {
    var _a, _b;
    let operatorId;
    let response;
    try {
        response = await supportpalapi.getFromSupportPalApi("user/operator?email=" + email);
    }
    catch (err) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, err.message);
    }
    const res = response;
    if (res.data && res.data[0]) {
        operatorId = (_a = res.data[0]) === null || _a === void 0 ? void 0 : _a.id;
    }
    else {
        console.log("name =================> ", name);
        const split = name.split(" ");
        const fn = split[0];
        const ln = split[1];
        const operator = await createOperator({
            firstname: fn,
            lastname: ln,
            email: email,
            password: process.env.supportPalDCPassword,
            group: operatorGroup,
        });
        if (operator) {
            if ((operator === null || operator === void 0 ? void 0 : operator.status) === "error") {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, operator.message);
            }
            operatorId = (_b = operator.data) === null || _b === void 0 ? void 0 : _b.id;
        }
        else {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, message);
        }
    }
    return operatorId;
};
const createOperator = async (operatorBody) => {
    const { firstname, lastname, email, password, group } = operatorBody;
    const body = {
        firstname,
        lastname,
        email,
        password,
        country: "IN",
        timezone: "Asia/Kolkata",
        active: 1,
        groups: [group],
        depts: [process.env.supportPalDepartment],
    };
    const users = await supportpalapi.postToSupportPalApi("user/operator", body);
    return users;
};
const getOrAddUserAndReturnId = async (email, name) => {
    var _a, _b;
    try {
        let operatorId;
        let response;
        try {
            response = await supportpalapi.getFromSupportPalApi("user/user?email=" + email);
        }
        catch (err) {
            throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, err.message);
        }
        const res = response;
        if (res.data && res.data[0]) {
            operatorId = (_a = res.data[0]) === null || _a === void 0 ? void 0 : _a.id;
        }
        else {
            const split = name.split(" ");
            const fn = split[0] ? split[0] : " ";
            const ln = split[1] ? split[1] : " ";
            const operator = await createUser({
                firstname: fn,
                lastname: ln,
                email: email,
                password: process.env.supportPalDCPassword,
                group: 4,
            });
            if (operator) {
                if ((operator === null || operator === void 0 ? void 0 : operator.status) === "error") {
                    throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(401, operator.message);
                }
                operatorId = (_b = operator.data) === null || _b === void 0 ? void 0 : _b.id;
            }
            else {
                throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, "Operator not found");
            }
        }
        return operatorId;
    }
    catch (error) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, error.message);
    }
};
const createUser = async (userBody) => {
    console.log("CREATE USER CALLED");
    try {
        const { firstname, lastname, email, password, group } = userBody;
        const body = {
            firstname,
            lastname,
            email,
            password,
            country: "IN",
            timezone: "Asia/Kolkata",
            active: 1,
            groups: [group],
            depts: [process.env.supportPalDepartment],
        };
        const users = await supportpalapi.postToSupportPalApi("user/user", body);
        return users;
    }
    catch (error) {
        throw new (standard_http_error__WEBPACK_IMPORTED_MODULE_0___default())(400, error.message);
    }
};
const getUrl = async (url, status, searchKey, searchValue) => {
    if (status) {
        url += "&status=" + status;
    }
    if (searchKey && searchValue) {
        if (searchKey === "casenumber") {
            url += "&number=" + searchValue;
        }
        else if (searchKey === "projectname") {
            url += "&customfield[1]=" + searchValue;
        }
    }
    return url;
};


/***/ }),

/***/ "./src/domain/services/notification/NotificationService.ts":
/*!*****************************************************************!*\
  !*** ./src/domain/services/notification/NotificationService.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_email_Email__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/email/Email */ "./src/core/email/Email.ts");

class NotificationService {
    constructor() {
        this.emailService = new _core_email_Email__WEBPACK_IMPORTED_MODULE_0__["default"](process.env.adminEmailId, process.env.emailUserName, process.env.emailPassword, process.env.emailSenderId);
    }
    async sendEmail(name, email, title, body, cc, bcc, attachments) {
        try {
            return this.emailService.sendMail(name, email, title, body, cc, bcc, attachments);
        }
        catch (error) {
            console.log(error);
            throw error;
        }
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NotificationService);


/***/ }),

/***/ "./src/domain/services/oAuth/GoogleOAuth.ts":
/*!**************************************************!*\
  !*** ./src/domain/services/oAuth/GoogleOAuth.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GoogleOAuth": () => (/* binding */ GoogleOAuth)
/* harmony export */ });
/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! googleapis */ "googleapis");
/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(googleapis__WEBPACK_IMPORTED_MODULE_0__);

const GoogleOAuth = ({ clientId, clientSecret, redirectionUrl }) => {
    const oauth2Client = new googleapis__WEBPACK_IMPORTED_MODULE_0__.google.auth.OAuth2(clientId, clientSecret, redirectionUrl);
    googleapis__WEBPACK_IMPORTED_MODULE_0__.google.fitness({
        version: "v1",
        auth: oauth2Client,
    });
    const getAuthorizeUrl = (scope) => {
        return oauth2Client.generateAuthUrl({
            access_type: "offline",
            scope: scope,
            prompt: "consent",
        });
    };
    const getAccessToken = async (code) => {
        try {
            const response = await oauth2Client.getToken(code);
            oauth2Client.setCredentials(response.tokens);
            return response.tokens;
        }
        catch (error) {
            console.error(error);
            throw error;
        }
    };
    const refreshAccessToken = async () => {
        try {
            oauth2Client.refreshAccessToken((err, resp) => {
                return {
                    refreshToken: resp.refresh_token,
                    accessToken: resp.access_token,
                };
            });
        }
        catch (error) {
            console.error(error);
            throw error;
        }
    };
    return { getAuthorizeUrl, getAccessToken, refreshAccessToken };
};


/***/ }),

/***/ "./src/domain/services/supportpal/SupportPalApi.ts":
/*!*********************************************************!*\
  !*** ./src/domain/services/supportpal/SupportPalApi.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-datasource-rest */ "apollo-datasource-rest");
/* harmony import */ var apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__);

const btoa = __webpack_require__(/*! btoa */ "btoa");
class SupportPalApicopy extends apollo_datasource_rest__WEBPACK_IMPORTED_MODULE_0__.RESTDataSource {
    constructor() {
        super();
        this.baseURL = process.env.supportPalUrl;
        this.initialize({});
    }
    deleteCacheForRequest(request) {
        this.memoizedResults.delete(this.cacheKeyFor(request));
    }
    didReceiveResponse(response, request) {
        this.deleteCacheForRequest(request);
        return super.didReceiveResponse(response, request);
    }
    didEncounterError(error, request) {
        this.deleteCacheForRequest(request);
        return super.didEncounterError(error, request);
    }
    willSendRequest(request) {
        request.headers.set('Content-Type', "application/json");
        request.headers.set('Cache-Control', "no-cache");
        request.headers.set('Authorization', 'Basic ' + btoa('BU!VO!pUe!2JJ9tO!com7I35oQi5xSi9:DC@123'));
        console.log(87, JSON.stringify(request.headers));
    }
    async getFromSupportPalApi(url) {
        const data = await this.get(url);
        return data;
    }
    async postToSupportPalApi(url, body) {
        const data = await this.post(url, body);
        return data;
    }
    async updateToSupportPalApi(url, body) {
        const data = await this.put(url, body);
        return data;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SupportPalApicopy);


/***/ }),

/***/ "./src/domain/services/template/EmailTemplate.ts":
/*!*******************************************************!*\
  !*** ./src/domain/services/template/EmailTemplate.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const bookingFormGenerateTemplate = () => {
    return `
    It has been a pleasure interacting with you and we are delighted that you have chosen Design Cafe as your home interiors partner. <br/>

    Your booking form is generated with all the requirement, payment details and terms & condition of the engagement.<br/> 
    
    Please review and confirm your booking form by visiting your customer dashboard <a href=${process.env.customerDashboardUrl}> here </a>. <br/>

    Please login using your registered mobile no. You will recieve an auto generated OTP to help you login. 

  
  `;
};
const bookingFormAcceptTemplate = () => {
    return `
    Thank you for choosing us as your home interiors partner and accepting the booking form. Please find your signed booking form attached for future reference. <br/>

    You can also access your booking form anytime by visiting your customer dashboard <a href=${process.env.customerDashboardUrl}> here </a>. <br/>

    You are now just a step away to saying yes, to your dream home. 

 `;
};
const paymentRequestTemplate = (customer, clientId) => {
    return `Hi ${customer.firstname}
  <br><br>
  There's a new payment request for your project ${clientId}. Click on the link below to login to dashboard and process the payment.
  <br>
  ${process.env.customerDashboardUrl}
  <br><br>
  1. Once logged in, go to the Invoice & Payment section.
  <br>
  2. Select the payment request and click on continue.
  <br>
  3. Confirm Billing and shipping information.
  <br>
  4. Process the payment.
  <br><br>
  *Please ignore if the payment is already processed.
  `;
};
const exportFile = {
    bookingFormGenerateTemplate,
    bookingFormAcceptTemplate,
    paymentRequestTemplate
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (exportFile);


/***/ }),

/***/ "./src/domain/services/widgetServices/achievedRevenueRatio.ts":
/*!********************************************************************!*\
  !*** ./src/domain/services/widgetServices/achievedRevenueRatio.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "achievedRevenueRatio": () => (/* binding */ achievedRevenueRatio)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs/plugin/isBetween */ "dayjs/plugin/isBetween");
/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs/plugin/isoWeek */ "dayjs/plugin/isoWeek");
/* harmony import */ var dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_3__);




dayjs__WEBPACK_IMPORTED_MODULE_1___default().extend((dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_2___default()));
dayjs__WEBPACK_IMPORTED_MODULE_1___default().extend((dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_3___default()));
const achievedRevenueRatio = async (user, month) => {
    var _a;
    const projectPredicate = {};
    let res;
    switch (user.profile.access_level) {
        case 0:
            projectPredicate.designerid = user.userid;
            res = getAchievedRevenueForProjects(projectPredicate, month);
            break;
        case 1:
            (_a = user.users_team) === null || _a === void 0 ? void 0 : _a.map(async (team) => {
                projectPredicate.designstudioid = team.teamid;
            });
            res = getAchievedRevenueForProjects(projectPredicate, month);
            break;
    }
    return res;
};
const getAchievedRevenueForProjects = async (projectPredicate, month) => {
    console.log("project Predicate", projectPredicate);
    let totalRevenue = 0;
    const date = new Date();
    const currentMonthStart = new Date(date.getFullYear(), date.getMonth(), 1);
    const currentMonthEnd = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    const lastMonthStart = new Date(date.getFullYear(), date.getMonth() - 1, 1);
    const lastMonthEnd = new Date(date.getFullYear(), date.getMonth() - 1 + 1, 0);
    const projects = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findMany({ where: projectPredicate });
    await Promise.all(projects.map(async (project) => {
        const payments = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_paymentreceipts.findMany({ where: { clientid: project.projectid } });
        if (payments) {
            payments.map(async (payment) => {
                const paymentRecievedDate = payment.paymentreceiveddate;
                if (paymentRecievedDate) {
                    const paymentRecievedDateToDate = dayjs__WEBPACK_IMPORTED_MODULE_1___default()(paymentRecievedDate);
                    if (month === 0) {
                        if (paymentRecievedDateToDate.isBetween(currentMonthStart, currentMonthEnd, "days", "[]")) {
                            totalRevenue = totalRevenue + payment.receivedamount;
                        }
                    }
                    else if (month === 1) {
                        if (paymentRecievedDateToDate.isBetween(lastMonthStart, lastMonthEnd, "days", "[]")) {
                            totalRevenue = totalRevenue + payment.receivedamount;
                        }
                    }
                }
            });
        }
    }));
    return totalRevenue;
};


/***/ }),

/***/ "./src/domain/services/widgetServices/broadcastedLeadsRatio.ts":
/*!*********************************************************************!*\
  !*** ./src/domain/services/widgetServices/broadcastedLeadsRatio.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "broadcastedLeadsRatio": () => (/* binding */ broadcastedLeadsRatio)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");


const broadcastedLeadsRatio = async (user) => {
    let count;
    const fetchedUser = await (0,_api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__.getUser)(user.userid);
    const whereCondition = {};
    switch (user.profile.access_level) {
        case 0:
            if (fetchedUser[0].iseligibleforleadmeetings) {
                whereCondition.broadcast_status__c = "0";
                whereCondition.OR = [];
                fetchedUser[0].teams.forEach((teamAssignedToUser) => {
                    whereCondition.OR.push({
                        designer_team_name__c: teamAssignedToUser.name,
                    });
                });
                const leadsForDesigner = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({ where: whereCondition });
                count = await fetchMatchingLeads(leadsForDesigner);
            }
            else {
                count = 0;
            }
            break;
        case 1:
            whereCondition.broadcast_status__c = "0";
            whereCondition.OR = [];
            fetchedUser[0].teams.forEach((team) => {
                whereCondition.OR.push({
                    designer_team_name__c: team.name,
                });
            });
            const leadsForStudio = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({ where: whereCondition });
            count = await fetchMatchingLeads(leadsForStudio);
            break;
    }
    return count;
};
const fetchMatchingLeads = async (leads) => {
    let newleads = 0;
    const date = new Date();
    const today = `${date.getFullYear()}` + `-` + `${(date.getMonth() + 1)}` + `-` + `${date.getDate()}`;
    leads.map((lead) => {
        const leadDateWithTime = lead.willingness_for_meeting__c;
        if (leadDateWithTime) {
            const lddate = `${leadDateWithTime.getFullYear()}` + `-` + `${(leadDateWithTime.getMonth() + 1)}` + `-` + `${leadDateWithTime.getDate()}`;
            const todayDate = new Date(today);
            const leadDate = new Date(lddate);
            if (leadDate > todayDate) {
                console.log(lead.id);
                newleads++;
            }
        }
    });
    return newleads;
};


/***/ }),

/***/ "./src/domain/services/widgetServices/leadSummaryRatio.ts":
/*!****************************************************************!*\
  !*** ./src/domain/services/widgetServices/leadSummaryRatio.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "leadSummaryRatio": () => (/* binding */ leadSummaryRatio)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs/plugin/isBetween */ "dayjs/plugin/isBetween");
/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs/plugin/isoWeek */ "dayjs/plugin/isoWeek");
/* harmony import */ var dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_4__);





dayjs__WEBPACK_IMPORTED_MODULE_2___default().extend((dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_3___default()));
dayjs__WEBPACK_IMPORTED_MODULE_2___default().extend((dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_4___default()));
const leadSummaryRatio = async (user, monthInReq) => {
    var _a;
    let leadPredicate = {};
    let opportunitypredicate = {};
    let res;
    switch (user.profile.access_level) {
        case 0:
            leadPredicate.OR = [];
            leadPredicate.OR.push({ status: "Meeting Scheduled" }, { status: "Meeting Confirmed" }, { status: "Converted" });
            leadPredicate.AND = { design_user__c: user.salesforceuserid };
            opportunitypredicate.design_user__c = user.salesforceuserid;
            res = getLeadSummaryData(leadPredicate, opportunitypredicate, monthInReq);
            break;
        case 1:
            const fetchedUser = await (0,_api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__.getUser)(user.userid);
            const teamArr = [];
            const stageNameArr = [];
            const designers = {};
            designers.OR = [];
            opportunitypredicate.OR = [];
            const statusQuery = [
                { status: "Meeting Scheduled" },
                { status: "Meeting Confirmed" },
                { status: "Converted" }
            ];
            await Promise.all((_a = fetchedUser[0].teams) === null || _a === void 0 ? void 0 : _a.map(async (team) => {
                teamArr.push({
                    designer_team_name__c: team.name
                });
                stageNameArr.push({
                    studio_name__c: team.name
                });
            }));
            leadPredicate = {
                OR: statusQuery,
                AND: {
                    OR: teamArr,
                }
            };
            opportunitypredicate = {
                OR: stageNameArr
            };
            res = getLeadSummaryData(leadPredicate, opportunitypredicate, monthInReq);
            break;
    }
    return res;
};
const getLeadSummaryData = async (predicate, opportunityPredicate, month) => {
    console.log("Lead predicate", predicate);
    console.log("OPportunity Predicate", opportunityPredicate);
    const leads = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({
        where: predicate
    });
    const opportunities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findMany({
        where: opportunityPredicate
    });
    let leadMeetingScheduledCount = 0, opportunityMeetingDoneCount = 0, opportunityClosedWonCount = 0, opportunityClosedLostCount = 0;
    const date = new Date();
    const currentMonthStart = new Date(date.getFullYear(), date.getMonth(), 1);
    const currentMonthEnd = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    const lastMonthStart = new Date(date.getFullYear(), date.getMonth() - 1, 1);
    const lastMonthEnd = new Date(date.getFullYear(), date.getMonth() - 1 + 1, 0);
    if (month === 0) {
        leads.map((lead) => {
            const meetingScheduledDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(lead.willingness_for_meeting__c);
            if (meetingScheduledDate.isBetween(currentMonthStart, currentMonthEnd, "days", "[]")) {
                leadMeetingScheduledCount++;
            }
        });
        opportunities.map((opportunity) => {
            const stagename = opportunity.stagename;
            const createdDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(opportunity.createddate);
            const closedDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(opportunity.closedate);
            if (createdDate.isBetween(currentMonthStart, currentMonthEnd, "days", "[]")) {
                opportunityMeetingDoneCount++;
            }
            if (closedDate.isBetween(currentMonthStart, currentMonthEnd, "days", "[]") && stagename === "Closed Won") {
                opportunityClosedWonCount++;
            }
            if (closedDate.isBetween(currentMonthStart, currentMonthEnd, "days", "[]") && stagename === "Closed Lost") {
                opportunityClosedLostCount++;
            }
        });
    }
    else if (month === 1) {
        leads.map((lead) => {
            const meetingScheduledDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(lead.willingness_for_meeting__c);
            if (meetingScheduledDate.isBetween(lastMonthStart, lastMonthEnd, "days", "[]")) {
                leadMeetingScheduledCount++;
            }
        });
        opportunities.map((opportunity) => {
            const stagename = opportunity.stagename;
            const createdDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(opportunity.createddate);
            const closedDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(opportunity.closedate);
            if (createdDate.isBetween(lastMonthStart, lastMonthEnd, "days", "[]")) {
                opportunityMeetingDoneCount++;
            }
            if (closedDate.isBetween(lastMonthStart, lastMonthEnd, "days", "[]") && stagename === "Closed Won") {
                opportunityClosedWonCount++;
            }
            if (closedDate.isBetween(lastMonthStart, lastMonthEnd, "days", "[]") && stagename === "Closed Lost") {
                opportunityClosedLostCount++;
            }
        });
    }
    let leadConversion;
    if (opportunityMeetingDoneCount !== 0) {
        leadConversion = (opportunityClosedWonCount * 100) / opportunityMeetingDoneCount;
    }
    else {
        leadConversion = 0;
    }
    return {
        meetingScheduled: leadMeetingScheduledCount,
        meetingDone: opportunityMeetingDoneCount,
        closeWon: opportunityClosedWonCount,
        closedLost: opportunityClosedLostCount,
        percentage: leadConversion
    };
};


/***/ }),

/***/ "./src/domain/services/widgetServices/proposalSentRatio.ts":
/*!*****************************************************************!*\
  !*** ./src/domain/services/widgetServices/proposalSentRatio.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "proposalSentRatio": () => (/* binding */ proposalSentRatio)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs/plugin/isBetween */ "dayjs/plugin/isBetween");
/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs/plugin/isoWeek */ "dayjs/plugin/isoWeek");
/* harmony import */ var dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_4__);





dayjs__WEBPACK_IMPORTED_MODULE_2___default().extend((dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_3___default()));
dayjs__WEBPACK_IMPORTED_MODULE_2___default().extend((dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_4___default()));
const proposalSentRatio = async (user, month) => {
    var _a;
    const oppopredicate = {};
    let res;
    switch (user.profile.access_level) {
        case 0:
            oppopredicate.design_user__c = user.salesforceuserid;
            res = getProposalSentData(oppopredicate, month);
            break;
        case 1:
            const fetchedUser = await (0,_api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__.getUser)(user.userid);
            oppopredicate.OR = [];
            await Promise.all((_a = fetchedUser[0].teams) === null || _a === void 0 ? void 0 : _a.map(async (team) => {
                oppopredicate.OR.push({
                    studio_name__c: team.name
                });
            }));
            res = getProposalSentData(oppopredicate, month);
            break;
    }
    return res;
};
const getProposalSentData = async (opportunityPredicate, month) => {
    console.log("OPportunity Predicate", opportunityPredicate);
    let opportunityCount = 0;
    let oppotunityProposalSentCount = 0;
    const opportunities = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.opportunity.findMany({
        where: opportunityPredicate
    });
    const date = new Date();
    const currentMonthStart = new Date(date.getFullYear(), date.getMonth(), 1);
    const currentMonthEnd = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    const lastMonthStart = new Date(date.getFullYear(), date.getMonth() - 1, 1);
    const lastMonthEnd = new Date(date.getFullYear(), date.getMonth() - 1 + 1, 0);
    opportunities.map((opportunity) => {
        const createdDate = dayjs__WEBPACK_IMPORTED_MODULE_2___default()(opportunity.createddate);
        const stagename = opportunity.stagename;
        if (month === 0) {
            if (createdDate.isBetween(currentMonthStart, currentMonthEnd, "days", "[]")) {
                opportunityCount++;
            }
            if (createdDate.isBetween(currentMonthStart, currentMonthEnd, "days", "[]") && stagename === "Proposal Sent") {
                oppotunityProposalSentCount++;
            }
        }
        else if (month === 1) {
            if (createdDate.isBetween(lastMonthStart, lastMonthEnd, "days", "[]")) {
                opportunityCount++;
            }
            if (createdDate.isBetween(lastMonthStart, lastMonthEnd, "days", "[]") && stagename === "Proposal Sent") {
                oppotunityProposalSentCount++;
            }
        }
    });
    let percentage;
    if (opportunityCount !== 0) {
        percentage = (oppotunityProposalSentCount * 100) / opportunityCount;
    }
    else {
        percentage = 0;
    }
    return {
        percentage: percentage,
        totalProposalSent: oppotunityProposalSentCount,
        totalMeetingDone: opportunityCount
    };
};


/***/ }),

/***/ "./src/domain/services/widgetServices/totalActiveProjectsRatio.ts":
/*!************************************************************************!*\
  !*** ./src/domain/services/widgetServices/totalActiveProjectsRatio.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "totalActiveProjectsRatio": () => (/* binding */ totalActiveProjectsRatio)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../api/users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");
/* harmony import */ var _enumerations_ProjectStageEnums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../enumerations/ProjectStageEnums */ "./src/domain/enumerations/ProjectStageEnums.ts");



const totalActiveProjectsRatio = async (user) => {
    var _a;
    const projectPredicate = {};
    let res;
    switch (user.profile.access_level) {
        case 0:
            projectPredicate.OR = [];
            projectPredicate.OR.push({
                designerid: user.userid,
                projectstatus: "Active"
            });
            res = getTotalActiveProjects(projectPredicate);
            break;
        case 1:
            const fetchUser = await (0,_api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_1__.getUser)(user.userid);
            projectPredicate.OR = [];
            (_a = fetchUser[0].teams) === null || _a === void 0 ? void 0 : _a.map(async (team) => {
                projectPredicate.OR.push({
                    designstudioid: team.id,
                    projectstatus: "Active"
                });
            });
            res = getTotalActiveProjects(projectPredicate);
            break;
    }
    return res;
};
const getTotalActiveProjects = async (projectPredicate) => {
    console.log("project Predicate", projectPredicate);
    const projects = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.dc_projects.findMany({ where: projectPredicate });
    let fifteenPercCount = 0;
    let thiryFivePercCount = 0;
    let fortyFivePercCount = 0;
    const fifteenStageData = [], thirtyFiveStageData = [], fortyFiveStageData = [];
    const ProjectDataArr = [];
    if (projects && projects.length > 0) {
        projects.forEach(project => {
            if (project.currentmilestone) {
                const fifteenPercStageArr = Object.values(_enumerations_ProjectStageEnums__WEBPACK_IMPORTED_MODULE_2__.FifteenPercentStageEnum);
                const thirtyFivePercStageArr = Object.values(_enumerations_ProjectStageEnums__WEBPACK_IMPORTED_MODULE_2__.ThirtyFivePercentStageEnum);
                const fortyFivePercStageArr = Object.values(_enumerations_ProjectStageEnums__WEBPACK_IMPORTED_MODULE_2__.FortyFivePercentStageEnum);
                if (fifteenPercStageArr.includes(project.currentmilestone)) {
                    fifteenPercCount++;
                    fifteenStageData.push({
                        projectname: project.projectname,
                        delayStatus: project.projectdelay
                    });
                }
                else if (thirtyFivePercStageArr.includes(project.currentmilestone)) {
                    thiryFivePercCount++;
                    thirtyFiveStageData.push({
                        projectname: project.projectname,
                        delayStatus: project.projectdelay
                    });
                }
                else if (fortyFivePercStageArr.includes(project.currentmilestone)) {
                    fortyFivePercCount++;
                    fortyFiveStageData.push({
                        projectname: project.projectname,
                        delayStatus: project.projectdelay
                    });
                }
            }
            else {
                fifteenPercCount++;
            }
        });
    }
    ProjectDataArr.push({
        totalCount: projects.length,
        fifteenStageData,
        thirtyFiveStageData,
        fortyFiveStageData
    });
    console.log("======projects", fifteenPercCount, thiryFivePercCount, fortyFivePercCount);
    return ProjectDataArr;
};


/***/ }),

/***/ "./src/domain/services/widgetServices/upcomingMeetingsRatio.ts":
/*!*********************************************************************!*\
  !*** ./src/domain/services/widgetServices/upcomingMeetingsRatio.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "upcomingMeetingsRatio": () => (/* binding */ upcomingMeetingsRatio)
/* harmony export */ });
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../prismaConfig */ "./src/prismaConfig.ts");
/* harmony import */ var _enumerations_TimePeriodLeadMeetingEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enumerations/TimePeriodLeadMeetingEnum */ "./src/domain/enumerations/TimePeriodLeadMeetingEnum.ts");
/* harmony import */ var _api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../api/users/Mutations/GetUser */ "./src/api/users/Mutations/GetUser.ts");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs */ "dayjs");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dayjs/plugin/isBetween */ "dayjs/plugin/isBetween");
/* harmony import */ var dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dayjs/plugin/isoWeek */ "dayjs/plugin/isoWeek");
/* harmony import */ var dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_5__);






dayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_isBetween__WEBPACK_IMPORTED_MODULE_4___default()));
dayjs__WEBPACK_IMPORTED_MODULE_3___default().extend((dayjs_plugin_isoWeek__WEBPACK_IMPORTED_MODULE_5___default()));
const meetingScheduled = "Meeting Scheduled";
const meetingConfirmed = "Meeting Confirmed";
const converted = "Converted";
const upcomingMeetingsRatio = async (user, timePeriod) => {
    try {
        let upcomingMeeting;
        if (user.profile.access_level === 0) {
            upcomingMeeting = getDesignerUpcomingMeeting(user, timePeriod);
        }
        else if (user.profile.access_level === 1) {
            upcomingMeeting = await getTeamMeetings(user, timePeriod);
        }
        return { upcomingMeeting };
    }
    catch (error) {
        return error;
    }
};
const getDesignerUpcomingMeeting = async (user, weekInReq) => {
    let totalMeeting = 0;
    const leadData = [];
    const predicate = {};
    predicate.design_user__c = user.salesforceuserid;
    predicate.OR = [];
    predicate.OR.push({ status: meetingScheduled }, { status: meetingConfirmed }, { status: converted });
    const leads = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({ where: predicate });
    const mStartOfWeek = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().startOf('isoWeek').isoWeekday(2).toDate();
    const mEndofweek = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().endOf('isoWeek').toDate();
    const mstartofNextWeek = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().add(1, 'week').startOf('isoWeek').isoWeekday(2).toDate();
    const mEndOfnextWeek = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().add(1, 'week').endOf('isoWeek').toDate();
    console.log("mStartOfWeek = ", mStartOfWeek, "mEndofweek = ", mEndofweek, "mstatrofNextWeek =", mstartofNextWeek, "mEndOfnextWeek = ", mEndOfnextWeek);
    leads.map((lead) => {
        const mDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(lead.willingness_for_meeting__c);
        if (weekInReq === _enumerations_TimePeriodLeadMeetingEnum__WEBPACK_IMPORTED_MODULE_1__["default"].THIS_WEEK) {
            if (mDate.isBetween(mStartOfWeek, mEndofweek, "days", "[]")) {
                totalMeeting++;
                leadData.push({
                    meetingScheduledDate: lead.willingness_for_meeting__c,
                    leadName: lead.name
                });
            }
        }
        if (weekInReq === _enumerations_TimePeriodLeadMeetingEnum__WEBPACK_IMPORTED_MODULE_1__["default"].NEXT_WEEK) {
            if (mDate.isBetween(mstartofNextWeek, mEndOfnextWeek, "days", "[]")) {
                totalMeeting++;
                leadData.push({
                    meetingScheduledDate: lead.willingness_for_meeting__c,
                    leadName: lead.name
                });
            }
        }
        if (weekInReq === _enumerations_TimePeriodLeadMeetingEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ALL) {
            totalMeeting++;
            leadData.push({
                meetingScheduledDate: lead.willingness_for_meeting__c,
                leadName: lead.name
            });
        }
    });
    return {
        totalMeeting,
        leadData
    };
};
const getTeamMeetings = async (user, timePeriod) => {
    var _a;
    let totalMeeting = 0;
    const leadData = [];
    const statusPredicate = {};
    statusPredicate.OR = [];
    statusPredicate.OR.push({ status: meetingScheduled }, { status: meetingConfirmed }, { status: converted });
    const fetchedUser = await (0,_api_users_Mutations_GetUser__WEBPACK_IMPORTED_MODULE_2__.getUser)(user.userid);
    const predicate = {};
    predicate.OR = [];
    (_a = fetchedUser[0].teams) === null || _a === void 0 ? void 0 : _a.forEach(team => {
        predicate.OR.push({
            designer_team_name__c: team.name
        });
    });
    const mainPredicate = {};
    mainPredicate.AND = [];
    mainPredicate.AND.push(predicate);
    mainPredicate.AND.push(statusPredicate);
    const leads = await _prismaConfig__WEBPACK_IMPORTED_MODULE_0__.prisma.lead.findMany({ where: mainPredicate });
    console.log("total leads", leads.length);
    const mStartOfWeek = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().startOf('isoWeek').isoWeekday(2).toDate();
    const mEndofweek = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().endOf('isoWeek').toDate();
    const mstartofNextWeek = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().add(1, 'week').startOf('isoWeek').isoWeekday(2).toDate();
    const mEndOfnextWeek = dayjs__WEBPACK_IMPORTED_MODULE_3___default()().add(1, 'week').endOf('isoWeek').toDate();
    console.log("mStartOfWeek = ", mStartOfWeek, "mEndofweek = ", mEndofweek, "mstatrofNextWeek =", mstartofNextWeek, "mEndOfnextWeek = ", mEndOfnextWeek);
    for (const lead of leads) {
        const mDate = dayjs__WEBPACK_IMPORTED_MODULE_3___default()(lead.willingness_for_meeting__c);
        if (timePeriod === _enumerations_TimePeriodLeadMeetingEnum__WEBPACK_IMPORTED_MODULE_1__["default"].THIS_WEEK) {
            if (mDate.isBetween(mStartOfWeek, mEndofweek, "days", "[]")) {
                totalMeeting++;
                leadData.push({
                    meetingScheduledDate: lead.willingness_for_meeting__c,
                    leadName: lead.name
                });
            }
        }
        if (timePeriod === _enumerations_TimePeriodLeadMeetingEnum__WEBPACK_IMPORTED_MODULE_1__["default"].NEXT_WEEK) {
            if (mDate.isBetween(mstartofNextWeek, mEndOfnextWeek, "days", "[]")) {
                totalMeeting++;
                leadData.push({
                    meetingScheduledDate: lead.willingness_for_meeting__c,
                    leadName: lead.name
                });
            }
        }
        if (timePeriod === _enumerations_TimePeriodLeadMeetingEnum__WEBPACK_IMPORTED_MODULE_1__["default"].ALL) {
            totalMeeting++;
            leadData.push({
                meetingScheduledDate: lead.willingness_for_meeting__c,
                leadName: lead.name
            });
        }
    }
    return {
        totalMeeting,
        leadData
    };
};


/***/ }),

/***/ "./src/prismaConfig.ts":
/*!*****************************!*\
  !*** ./src/prismaConfig.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "prisma": () => (/* binding */ prisma)
/* harmony export */ });
/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ "@prisma/client");
/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);

const prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();
const changePath = async () => {
    await prisma.$queryRaw `SET search_path TO "$user", public;`;
};
changePath();


/***/ }),

/***/ "./src/utils/ProjectMileStoneUtil.ts":
/*!*******************************************!*\
  !*** ./src/utils/ProjectMileStoneUtil.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../domain/enumerations/ProjectMileStoneEnum */ "./src/domain/enumerations/ProjectMileStoneEnum.ts");
/* harmony import */ var _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../domain/enumerations/SmartSheetCellValueEnum */ "./src/domain/enumerations/SmartSheetCellValueEnum.ts");


class ProjectMileStonesUtil {
    static getSheetMileStoneName(projectMileStone) {
        var mileStoneName;
        switch (projectMileStone) {
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].PROJECT_SIGNUP:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].PROJECT_SIGNUP;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].SITE_SURVEY:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].SITE_SURVEY;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].KNOW_YOUR_CLIENT:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].KNOW_YOUR_CLIENT;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].DESIGN_PRESENTATION:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].FIRST_CUT_MEETING;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].DESIGN_FINALIZATION:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].DESIGN_FINALIZATION;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].SITE_VALIDATION_REQUEST:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].REQUEST_PM_FOR_KICKOFF;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].SITE_VALIDATION_MEETING:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].KICKOFF_MEETING_AT_SITE;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].POST_SITE_VALIDATION_REVISION:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].DWG_REVISIONS;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].GFC_CHECKING:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].GFC_CHECKING;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].DESIGN_SIGNOFF:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].DESIGN_SIGN_OFF;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].PRODUCTION_REQUEST:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].PROJECT_RECEIVED_FOR_PLANNING;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].PRODUCTION:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].PRODUCTION;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].READY_FOR_DISPATCH:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].READY_FOR_DISPATCH;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].READY_FOR_HANDOVER:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].READY_FOR_HANDOVER;
                break;
            case _domain_enumerations_ProjectMileStoneEnum__WEBPACK_IMPORTED_MODULE_0__["default"].HANDOVER:
                mileStoneName = _domain_enumerations_SmartSheetCellValueEnum__WEBPACK_IMPORTED_MODULE_1__["default"].HANDOVER;
                break;
        }
        return mileStoneName;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProjectMileStonesUtil);


/***/ }),

/***/ "./src/utils/commonUtils.ts":
/*!**********************************!*\
  !*** ./src/utils/commonUtils.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExperienceCentersAsInSalesforce": () => (/* binding */ ExperienceCentersAsInSalesforce),
/* harmony export */   "OdooExperienceCenterID": () => (/* binding */ OdooExperienceCenterID),
/* harmony export */   "OdooStateID": () => (/* binding */ OdooStateID),
/* harmony export */   "callExternalAPIWithPost": () => (/* binding */ callExternalAPIWithPost),
/* harmony export */   "checkAndMarkMilestonesOnSmartsheet": () => (/* binding */ checkAndMarkMilestonesOnSmartsheet),
/* harmony export */   "defaultResponseObj": () => (/* binding */ defaultResponseObj),
/* harmony export */   "experiencecenters": () => (/* binding */ experiencecenters),
/* harmony export */   "getGstByStates": () => (/* binding */ getGstByStates),
/* harmony export */   "getLeadsAndOpportunityConditionForAccessLevel2": () => (/* binding */ getLeadsAndOpportunityConditionForAccessLevel2),
/* harmony export */   "getLeadsAndOpportunityConditionForAccessLevel3": () => (/* binding */ getLeadsAndOpportunityConditionForAccessLevel3),
/* harmony export */   "getOdooGroupID": () => (/* binding */ getOdooGroupID),
/* harmony export */   "getOdooStudioID": () => (/* binding */ getOdooStudioID),
/* harmony export */   "queryForFetchingRemindersTemplate": () => (/* binding */ queryForFetchingRemindersTemplate),
/* harmony export */   "queryForFetchingTemplate": () => (/* binding */ queryForFetchingTemplate)
/* harmony export */ });
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! superagent */ "superagent");
/* harmony import */ var superagent__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(superagent__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _api_projects_Smartsheet_Mutations_UpdateMilestone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/projects/Smartsheet/Mutations/UpdateMilestone */ "./src/api/projects/Smartsheet/Mutations/UpdateMilestone.ts");
/* harmony import */ var _prismaConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../prismaConfig */ "./src/prismaConfig.ts");



const defaultResponseObj = {
    code: null,
    message: null,
    data: null,
};
const queryForFetchingTemplate = JSON.stringify({
    query: `{
    projectTemplates {
      data{
        attributes{
          Template_Name
          milestone_details(pagination : {start : 0, limit: 20} ){
            label
            payment_percentage
            milestone_checklist{
              is_payment_milestone_checklist
              approval_from_customer
              share_with_customer
              checklist_string
              description
              required
              is_checked
              data
            }
            autorequest
            InvoicePercentage
            mom
            description
            smartsheet_field
          }
          default
          files_checklist{
            checklist_string
            description
            required
            share_with_customer
            approval_from_customer
          }
        }
      }
    }
  }`,
});
const queryForFetchingRemindersTemplate = (slug) => JSON.stringify({
    query: `{
    reminders(filters : {slug : { eq : "${slug}" }}){
      data{
        attributes{
          label
          slug
          emailActivate
          email_template
          emailSubject
          recipients{
            recepient
          }
          smsActivate
          smsDLTID
          smsBody
          whatsappActive
          whatsAppImageUrl
          whatsAppImageUrl
          whatsAppTemplateName
          whatsAppBodyTemplate
          recipient_cc{
            recepient
          }
          whatsAppBodyTemplate
          params
        }
      }
    }
  }`,
});
const callExternalAPIWithPost = async (url, body) => {
    const res = await superagent__WEBPACK_IMPORTED_MODULE_0___default().post(url)
        .send(body)
        .set("Content-Type", "application/json");
    return res.body;
};
const getGstByStates = (state) => {
    switch (state.toLowerCase()) {
        case "karnataka":
            return "29AABCU9603R1ZJ";
        case "maharashtra":
            return "27AABCU9603R1ZN";
        case "tamil nadu":
            return "33AABCU9603R1ZU";
        default:
            return null;
    }
};
var OdooStateID;
(function (OdooStateID) {
    OdooStateID[OdooStateID["karnataka"] = 593] = "karnataka";
    OdooStateID[OdooStateID["maharashtra"] = 597] = "maharashtra";
    OdooStateID[OdooStateID["tamil nadu"] = 607] = "tamil nadu";
    OdooStateID[OdooStateID["telangana"] = 608] = "telangana";
})(OdooStateID || (OdooStateID = {}));
var ExperienceCentersAsInSalesforce;
(function (ExperienceCentersAsInSalesforce) {
    ExperienceCentersAsInSalesforce["MGDC"] = "MGDC";
    ExperienceCentersAsInSalesforce["WDC"] = "WDC";
    ExperienceCentersAsInSalesforce["MUMBAI_DC"] = "Mumbai DC";
    ExperienceCentersAsInSalesforce["HYDERABAD_DC"] = "Hyderabad DC";
    ExperienceCentersAsInSalesforce["HSRDC"] = "HSRDC";
    ExperienceCentersAsInSalesforce["CHENNAI_DC"] = "Chennai DC";
    ExperienceCentersAsInSalesforce["JPDC"] = "JPDC";
    ExperienceCentersAsInSalesforce["THANE_DC"] = "Thane DC";
    ExperienceCentersAsInSalesforce["KDRMYS"] = "KDRMYS";
    ExperienceCentersAsInSalesforce["YERPUN"] = "YERPUN";
    ExperienceCentersAsInSalesforce["BHHYD"] = "BHHYD";
    ExperienceCentersAsInSalesforce["SJPBLR"] = "SJPBLR";
    ExperienceCentersAsInSalesforce["KHMUM"] = "KHMUM";
    ExperienceCentersAsInSalesforce["WLMUM"] = "WLMUM";
    ExperienceCentersAsInSalesforce["OMRCH"] = "OMRCH";
    ExperienceCentersAsInSalesforce["HRBRBLR"] = "HRBRBLR";
    ExperienceCentersAsInSalesforce["RSPCO"] = "RSPCO";
})(ExperienceCentersAsInSalesforce || (ExperienceCentersAsInSalesforce = {}));
var OdooExperienceCenterID;
(function (OdooExperienceCenterID) {
    OdooExperienceCenterID[OdooExperienceCenterID["MGDC"] = 1] = "MGDC";
    OdooExperienceCenterID[OdooExperienceCenterID["WDC"] = 2] = "WDC";
    OdooExperienceCenterID[OdooExperienceCenterID["HSRBLR"] = 3] = "HSRBLR";
    OdooExperienceCenterID[OdooExperienceCenterID["RCMUM"] = 4] = "RCMUM";
    OdooExperienceCenterID[OdooExperienceCenterID["GBHYD"] = 5] = "GBHYD";
    OdooExperienceCenterID[OdooExperienceCenterID["ASCHN"] = 27] = "ASCHN";
    OdooExperienceCenterID[OdooExperienceCenterID["JPNBLR"] = 31] = "JPNBLR";
    OdooExperienceCenterID[OdooExperienceCenterID["GBRTHN"] = 33] = "GBRTHN";
    OdooExperienceCenterID[OdooExperienceCenterID["KDRMYS"] = 36] = "KDRMYS";
    OdooExperienceCenterID[OdooExperienceCenterID["BHHYD"] = 39] = "BHHYD";
    OdooExperienceCenterID[OdooExperienceCenterID["YERPUN"] = 42] = "YERPUN";
    OdooExperienceCenterID[OdooExperienceCenterID["SJPBLR"] = 45] = "SJPBLR";
    OdooExperienceCenterID[OdooExperienceCenterID["KHMUM"] = 47] = "KHMUM";
    OdooExperienceCenterID[OdooExperienceCenterID["WLMUM"] = 50] = "WLMUM";
    OdooExperienceCenterID[OdooExperienceCenterID["OMRCH"] = 54] = "OMRCH";
    OdooExperienceCenterID[OdooExperienceCenterID["HRBRBLR"] = 56] = "HRBRBLR";
    OdooExperienceCenterID[OdooExperienceCenterID["RSPCO"] = 62] = "RSPCO";
})(OdooExperienceCenterID || (OdooExperienceCenterID = {}));
var GroupEnum;
(function (GroupEnum) {
    GroupEnum["BENGALURU"] = "bengaluru";
    GroupEnum["MYSORE"] = "mysore";
    GroupEnum["MUMBAI"] = "mumbai";
    GroupEnum["THANE"] = "thane";
    GroupEnum["HYDERABAD"] = "hyderabad";
    GroupEnum["CHENNAI"] = "chennai";
})(GroupEnum || (GroupEnum = {}));
var OdooGroupID;
(function (OdooGroupID) {
    OdooGroupID[OdooGroupID["BENGALURU"] = 3] = "BENGALURU";
    OdooGroupID[OdooGroupID["MYSORE"] = 17] = "MYSORE";
    OdooGroupID[OdooGroupID["MUMBAI"] = 6] = "MUMBAI";
    OdooGroupID[OdooGroupID["THANE"] = 16] = "THANE";
    OdooGroupID[OdooGroupID["HYDERABAD"] = 9] = "HYDERABAD";
    OdooGroupID[OdooGroupID["CHENNAI"] = 12] = "CHENNAI";
})(OdooGroupID || (OdooGroupID = {}));
var StudioNameAsInSalesforce;
(function (StudioNameAsInSalesforce) {
    StudioNameAsInSalesforce["MGDCSTUDIO1"] = "MGDC Studio 1";
    StudioNameAsInSalesforce["MGDCSTUDIO2"] = "MGDC Studio 2";
    StudioNameAsInSalesforce["DPBANGALOREMGDC"] = "DP Bangalore MGDC";
    StudioNameAsInSalesforce["WDCSTUDI1"] = "WDC Studio 1";
    StudioNameAsInSalesforce["DPBANGALOREWDC"] = "DP Bangalore WDC";
    StudioNameAsInSalesforce["HSRDCSTUDIO1"] = "HSRDC Studio 1";
    StudioNameAsInSalesforce["DPBANGALOREHSRDC"] = "DP Bangalore HSRDC";
    StudioNameAsInSalesforce["MUMBAISTUDIO1"] = "Mumbai Studio 1";
    StudioNameAsInSalesforce["MUMBAISTUDIO2"] = "Mumbai Studio 2";
    StudioNameAsInSalesforce["MUMBAISTUDIO3"] = "Mumbai Studio 3";
    StudioNameAsInSalesforce["DPMUMBAI"] = "DP Mumbai";
    StudioNameAsInSalesforce["HYDERABADSTUDIO1"] = "Hyderabad Studio 1";
    StudioNameAsInSalesforce["DPHYDERABAD"] = "DP Hyderabad";
    StudioNameAsInSalesforce["CHENNAISTUDIO1"] = "Chennai Studio 1";
    StudioNameAsInSalesforce["CHENNAIDP"] = "Chennai DP";
    StudioNameAsInSalesforce["JPDCXPRESSO"] = "JPDC XPresso";
    StudioNameAsInSalesforce["KDRMYSSTD1"] = "KDRMYS-Std-1";
    StudioNameAsInSalesforce["KDRMYSDPSTD1"] = "KDRMYS-DPStd-1";
    StudioNameAsInSalesforce["YERPUNSTD1"] = "YERPUN-Std-1";
    StudioNameAsInSalesforce["YERPUNDPSTD1"] = "YERPUN-DPStd-1";
    StudioNameAsInSalesforce["BHHYDSTD1"] = "BHHYD-Std-1";
    StudioNameAsInSalesforce["BHHYDDPSTD1"] = "BHHYD-DPStd-1";
    StudioNameAsInSalesforce["GBRTHNDPSTD1"] = "DP Thane";
    StudioNameAsInSalesforce["GBRTHNSTD1"] = "Thane Studio 1";
    StudioNameAsInSalesforce["GBRTHNSTD2"] = "Thane Studio 2";
    StudioNameAsInSalesforce["SJPBLRSTD1"] = "SJPBLR-Std-1";
    StudioNameAsInSalesforce["KHMUMSTD1"] = "KHMUM-Std-1";
    StudioNameAsInSalesforce["KHMUMDPSTD1"] = "KHMUM-DPStd-1";
    StudioNameAsInSalesforce["WLMUMSTD1"] = "WLMUM-Std-1";
    StudioNameAsInSalesforce["WLMUMDPSTD1"] = "WLMUM-DPStd-1";
    StudioNameAsInSalesforce["OMRCHSTD1"] = "OMRCH-Std-1";
    StudioNameAsInSalesforce["OMRCHDPstd1"] = "OMRCH-DPstd-1";
    StudioNameAsInSalesforce["HRBRBLRSTD1"] = "HRBRBLR-Std-1";
    StudioNameAsInSalesforce["RSPCOSTD1"] = "RSPCO-Std-1";
    StudioNameAsInSalesforce["RSPCODPSTD1"] = "RSPCO-DPStd-1";
})(StudioNameAsInSalesforce || (StudioNameAsInSalesforce = {}));
var OdooStudioID;
(function (OdooStudioID) {
    OdooStudioID[OdooStudioID["MGBLRSTD1"] = 6] = "MGBLRSTD1";
    OdooStudioID[OdooStudioID["MGBLRSTD2"] = 7] = "MGBLRSTD2";
    OdooStudioID[OdooStudioID["MGBLRDPSTD1"] = 8] = "MGBLRDPSTD1";
    OdooStudioID[OdooStudioID["WFBLRSTD1"] = 9] = "WFBLRSTD1";
    OdooStudioID[OdooStudioID["WFBLRDPSTD1"] = 10] = "WFBLRDPSTD1";
    OdooStudioID[OdooStudioID["HSRBLRSTD1"] = 11] = "HSRBLRSTD1";
    OdooStudioID[OdooStudioID["HSRBLRDPSTD1"] = 12] = "HSRBLRDPSTD1";
    OdooStudioID[OdooStudioID["RCMUMSTD1"] = 13] = "RCMUMSTD1";
    OdooStudioID[OdooStudioID["RCMUMSTD2"] = 14] = "RCMUMSTD2";
    OdooStudioID[OdooStudioID["RCMUMSTD3"] = 15] = "RCMUMSTD3";
    OdooStudioID[OdooStudioID["RCMUMDPSTD1"] = 16] = "RCMUMDPSTD1";
    OdooStudioID[OdooStudioID["GBHYDSTD1"] = 17] = "GBHYDSTD1";
    OdooStudioID[OdooStudioID["GBHYDDPSTD1"] = 18] = "GBHYDDPSTD1";
    OdooStudioID[OdooStudioID["ASCHNSTD1"] = 29] = "ASCHNSTD1";
    OdooStudioID[OdooStudioID["ASCHNDPSTD1"] = 30] = "ASCHNDPSTD1";
    OdooStudioID[OdooStudioID["JPNBLRSTD1"] = 32] = "JPNBLRSTD1";
    OdooStudioID[OdooStudioID["KDRMYSSTD1"] = 37] = "KDRMYSSTD1";
    OdooStudioID[OdooStudioID["KDRMYSDPSTD1"] = 38] = "KDRMYSDPSTD1";
    OdooStudioID[OdooStudioID["YERPUNSTD1"] = 43] = "YERPUNSTD1";
    OdooStudioID[OdooStudioID["YERPUNDPSTD1"] = 44] = "YERPUNDPSTD1";
    OdooStudioID[OdooStudioID["BHHYDSTD1"] = 40] = "BHHYDSTD1";
    OdooStudioID[OdooStudioID["BHHYDDPSTD1"] = 41] = "BHHYDDPSTD1";
    OdooStudioID[OdooStudioID["GBRTHNDPSTD1"] = 34] = "GBRTHNDPSTD1";
    OdooStudioID[OdooStudioID["GBRTHNSTD1"] = 35] = "GBRTHNSTD1";
    OdooStudioID[OdooStudioID["SJPBLRSTD1"] = 46] = "SJPBLRSTD1";
    OdooStudioID[OdooStudioID["KHMUMSTD1"] = 48] = "KHMUMSTD1";
    OdooStudioID[OdooStudioID["KHMUMDPSTD1"] = 49] = "KHMUMDPSTD1";
    OdooStudioID[OdooStudioID["WLMUMSTD1"] = 51] = "WLMUMSTD1";
    OdooStudioID[OdooStudioID["WLMUMDPSTD1"] = 52] = "WLMUMDPSTD1";
    OdooStudioID[OdooStudioID["GBRTHNSTD2"] = 53] = "GBRTHNSTD2";
    OdooStudioID[OdooStudioID["OMRCHSTD1"] = 55] = "OMRCHSTD1";
    OdooStudioID[OdooStudioID["HRBRBLRSTD1"] = 57] = "HRBRBLRSTD1";
    OdooStudioID[OdooStudioID["OMRCHDPstd1"] = 59] = "OMRCHDPstd1";
    OdooStudioID[OdooStudioID["RSPCOSTD1"] = 63] = "RSPCOSTD1";
    OdooStudioID[OdooStudioID["RSPCODPSTD1"] = 64] = "RSPCODPSTD1";
})(OdooStudioID || (OdooStudioID = {}));
const experiencecenters = (exp) => {
    if (exp === ExperienceCentersAsInSalesforce.MGDC) {
        return OdooExperienceCenterID.MGDC;
    }
    else if (exp === ExperienceCentersAsInSalesforce.WDC) {
        return OdooExperienceCenterID.WDC;
    }
    else if (exp === ExperienceCentersAsInSalesforce.HYDERABAD_DC) {
        return OdooExperienceCenterID.GBHYD;
    }
    else if (exp === ExperienceCentersAsInSalesforce.MUMBAI_DC) {
        return OdooExperienceCenterID.RCMUM;
    }
    else if (exp === ExperienceCentersAsInSalesforce.HSRDC) {
        return OdooExperienceCenterID.HSRBLR;
    }
    else if (exp === ExperienceCentersAsInSalesforce.CHENNAI_DC) {
        return OdooExperienceCenterID.ASCHN;
    }
    else if (exp === ExperienceCentersAsInSalesforce.JPDC) {
        return OdooExperienceCenterID.JPNBLR;
    }
    else if (exp === ExperienceCentersAsInSalesforce.KDRMYS) {
        return OdooExperienceCenterID.KDRMYS;
    }
    else if (exp === ExperienceCentersAsInSalesforce.YERPUN) {
        return OdooExperienceCenterID.YERPUN;
    }
    else if (exp === ExperienceCentersAsInSalesforce.BHHYD) {
        return OdooExperienceCenterID.BHHYD;
    }
    else if (exp === ExperienceCentersAsInSalesforce.THANE_DC) {
        return OdooExperienceCenterID.GBRTHN;
    }
    else if (exp === ExperienceCentersAsInSalesforce.SJPBLR) {
        return OdooExperienceCenterID.SJPBLR;
    }
    else if (exp === ExperienceCentersAsInSalesforce.KHMUM) {
        return OdooExperienceCenterID.KHMUM;
    }
    else if (exp === ExperienceCentersAsInSalesforce.WLMUM) {
        return OdooExperienceCenterID.WLMUM;
    }
    else if (exp === ExperienceCentersAsInSalesforce.OMRCH) {
        return OdooExperienceCenterID.OMRCH;
    }
    else if (exp === ExperienceCentersAsInSalesforce.HRBRBLR) {
        return OdooExperienceCenterID.HRBRBLR;
    }
    else if (exp === ExperienceCentersAsInSalesforce.RSPCO) {
        return OdooExperienceCenterID.RSPCO;
    }
    else {
        return null;
    }
};
const getOdooGroupID = (ECCity) => {
    const lowerCaseECCity = ECCity.toLowerCase();
    const trimmedCity = lowerCaseECCity.trim();
    if (trimmedCity === GroupEnum.BENGALURU) {
        return OdooGroupID.BENGALURU;
    }
    else if (trimmedCity === GroupEnum.MYSORE) {
        return OdooGroupID.MYSORE;
    }
    else if (trimmedCity === GroupEnum.MUMBAI) {
        return OdooGroupID.MUMBAI;
    }
    else if (trimmedCity === GroupEnum.THANE) {
        return OdooGroupID.THANE;
    }
    else if (trimmedCity === GroupEnum.HYDERABAD) {
        return OdooGroupID.HYDERABAD;
    }
    else if (trimmedCity === GroupEnum.CHENNAI) {
        return OdooGroupID.CHENNAI;
    }
    else {
        return null;
    }
};
const getOdooStudioID = (studioNameInRequest) => {
    const trimmedStudioname = studioNameInRequest.trim();
    if (trimmedStudioname === StudioNameAsInSalesforce.MGDCSTUDIO1) {
        return OdooStudioID.MGBLRSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.MGDCSTUDIO2) {
        return OdooStudioID.MGBLRSTD2;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.DPBANGALOREMGDC) {
        return OdooStudioID.MGBLRDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.WDCSTUDI1) {
        return OdooStudioID.WFBLRSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.DPBANGALOREWDC) {
        return OdooStudioID.WFBLRDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.HSRDCSTUDIO1) {
        return OdooStudioID.HSRBLRSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.DPBANGALOREHSRDC) {
        return OdooStudioID.HSRBLRDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.MUMBAISTUDIO1) {
        return OdooStudioID.RCMUMSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.MUMBAISTUDIO2) {
        return OdooStudioID.RCMUMSTD2;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.MUMBAISTUDIO3) {
        return OdooStudioID.RCMUMSTD3;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.DPMUMBAI) {
        return OdooStudioID.RCMUMDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.HYDERABADSTUDIO1) {
        return OdooStudioID.GBHYDSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.DPHYDERABAD) {
        return OdooStudioID.GBHYDDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.CHENNAISTUDIO1) {
        return OdooStudioID.ASCHNSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.CHENNAIDP) {
        return OdooStudioID.ASCHNDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.JPDCXPRESSO) {
        return OdooStudioID.JPNBLRSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.KDRMYSSTD1) {
        return OdooStudioID.KDRMYSSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.KDRMYSDPSTD1) {
        return OdooStudioID.KDRMYSDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.YERPUNSTD1) {
        return OdooStudioID.YERPUNSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.YERPUNDPSTD1) {
        return OdooStudioID.YERPUNDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.BHHYDSTD1) {
        return OdooStudioID.BHHYDSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.BHHYDDPSTD1) {
        return OdooStudioID.BHHYDDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.GBRTHNSTD1) {
        return OdooStudioID.GBRTHNSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.GBRTHNDPSTD1) {
        return OdooStudioID.GBRTHNDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.GBRTHNSTD2) {
        return OdooStudioID.GBRTHNSTD2;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.SJPBLRSTD1) {
        return OdooStudioID.SJPBLRSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.KHMUMSTD1) {
        return OdooStudioID.KHMUMSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.KHMUMDPSTD1) {
        return OdooStudioID.KHMUMDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.WLMUMSTD1) {
        return OdooStudioID.WLMUMSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.WLMUMDPSTD1) {
        return OdooStudioID.WLMUMDPSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.OMRCHSTD1) {
        return OdooStudioID.OMRCHSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.OMRCHDPstd1) {
        return OdooStudioID.OMRCHDPstd1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.HRBRBLRSTD1) {
        return OdooStudioID.HRBRBLRSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.RSPCOSTD1) {
        return OdooStudioID.RSPCOSTD1;
    }
    else if (trimmedStudioname === StudioNameAsInSalesforce.RSPCODPSTD1) {
        return OdooStudioID.RSPCODPSTD1;
    }
    else {
        return null;
    }
};
const checkAndMarkMilestonesOnSmartsheet = async (projectid, milestoneDetails) => {
    console.log("milestone_details", milestoneDetails);
    let areAllMilestonesCompleted = true;
    milestoneDetails.milestone_checklist.forEach((mileStoneChecklist) => {
        console.log("mileStoneChecklist", mileStoneChecklist.is_checked);
        if (!mileStoneChecklist.is_checked) {
            areAllMilestonesCompleted = false;
        }
    });
    if (areAllMilestonesCompleted) {
        const projectData = await _prismaConfig__WEBPACK_IMPORTED_MODULE_2__.prisma.dc_projects.findUnique({
            where: {
                id: projectid,
            },
        });
        const updateSmartsheetMilestonePayload = {
            smartSheetId: projectData.smartsheetid,
            mileStoneName: milestoneDetails.label,
            actualStartDate: "2022-06-01",
            actualFinishDate: new Date().toISOString().split("T")[0],
        };
        console.log("Calling the Smartsheet API");
        console.log(updateSmartsheetMilestonePayload);
        const updateMilestoneOnSmartsheetResponse = await (0,_api_projects_Smartsheet_Mutations_UpdateMilestone__WEBPACK_IMPORTED_MODULE_1__.updateMilestone)(null, updateSmartsheetMilestonePayload, null);
        console.log(updateMilestoneOnSmartsheetResponse);
    }
    else {
        console.log("Not Calling Smartsheet API");
    }
};
const getLeadsAndOpportunityConditionForAccessLevel2 = (experienceCenters, searchCondition) => {
    return {
        AND: {
            OR: experienceCenters.map((expCenter) => {
                return {
                    meeting_venue__c: expCenter.name,
                };
            }),
        },
        OR: searchCondition,
    };
};
const getLeadsAndOpportunityConditionForAccessLevel3 = (cities, searchCondition) => {
    return {
        AND: {
            OR: cities.map((city) => {
                return {
                    region__c: city.name,
                };
            }),
        },
        OR: searchCondition,
    };
};


/***/ }),

/***/ "@graphql-tools/schema":
/*!****************************************!*\
  !*** external "@graphql-tools/schema" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@graphql-tools/schema");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "apollo-datasource-rest":
/*!*****************************************!*\
  !*** external "apollo-datasource-rest" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = require("apollo-datasource-rest");

/***/ }),

/***/ "apollo-server":
/*!********************************!*\
  !*** external "apollo-server" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("apollo-server");

/***/ }),

/***/ "aws-sdk":
/*!**************************!*\
  !*** external "aws-sdk" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("aws-sdk");

/***/ }),

/***/ "btoa":
/*!***********************!*\
  !*** external "btoa" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("btoa");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "dayjs":
/*!************************!*\
  !*** external "dayjs" ***!
  \************************/
/***/ ((module) => {

module.exports = require("dayjs");

/***/ }),

/***/ "dayjs/plugin/isBetween":
/*!*****************************************!*\
  !*** external "dayjs/plugin/isBetween" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = require("dayjs/plugin/isBetween");

/***/ }),

/***/ "dayjs/plugin/isoWeek":
/*!***************************************!*\
  !*** external "dayjs/plugin/isoWeek" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("dayjs/plugin/isoWeek");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("dotenv");

/***/ }),

/***/ "googleapis":
/*!*****************************!*\
  !*** external "googleapis" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("googleapis");

/***/ }),

/***/ "graphql-scalars":
/*!**********************************!*\
  !*** external "graphql-scalars" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("graphql-scalars");

/***/ }),

/***/ "jsforce":
/*!**************************!*\
  !*** external "jsforce" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("jsforce");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "mailgen":
/*!**************************!*\
  !*** external "mailgen" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mailgen");

/***/ }),

/***/ "msg91-api":
/*!****************************!*\
  !*** external "msg91-api" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("msg91-api");

/***/ }),

/***/ "nodemailer":
/*!*****************************!*\
  !*** external "nodemailer" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("nodemailer");

/***/ }),

/***/ "shortid":
/*!**************************!*\
  !*** external "shortid" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("shortid");

/***/ }),

/***/ "smartsheet":
/*!*****************************!*\
  !*** external "smartsheet" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("smartsheet");

/***/ }),

/***/ "standard-http-error":
/*!**************************************!*\
  !*** external "standard-http-error" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("standard-http-error");

/***/ }),

/***/ "superagent":
/*!*****************************!*\
  !*** external "superagent" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("superagent");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("uuid");

/***/ }),

/***/ "xml-js":
/*!*************************!*\
  !*** external "xml-js" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("xml-js");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/schema */ "./src/api/schema.ts");
/* harmony import */ var _api_datasources__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api/datasources */ "./src/api/datasources.ts");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ "./src/config.ts");
const { ApolloServer } = __webpack_require__(/*! apollo-server */ "apollo-server");



(__webpack_require__(/*! dotenv */ "dotenv").config)();
const server = new ApolloServer({
    schema: _api_schema__WEBPACK_IMPORTED_MODULE_0__.schema,
    dataSources: _api_datasources__WEBPACK_IMPORTED_MODULE_1__.dataSources,
    context: async ({ req }) => req,
});
server.listen({ port: _config__WEBPACK_IMPORTED_MODULE_2__["default"].PORT }).then(({ url }) => {
    console.log(`:rocket:  Server ready at ${url}`);
});

})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,